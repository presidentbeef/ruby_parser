#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby18Parser < RubyParser::Parser


require "ruby_parser/legacy/ruby_lexer"
require "ruby_parser/legacy/ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-504,494,261,261,197,-83,-451,-504,-504,-504,-451,-90,3,-504,-504,648',
'-504,-89,-85,-87,-86,436,535,-64,254,-504,500,-88,501,-77,-439,255,494',
'494,-84,-504,-504,-439,-504,-504,-504,-504,-504,494,198,199,-82,195',
'-75,98,-90,593,-83,627,196,564,-83,494,594,198,199,-72,710,194,-504',
'-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,627',
'627,-504,-504,-504,-500,551,534,260,260,-504,563,-501,-504,728,-77,501',
'261,-504,725,-504,294,-504,-504,-504,-504,-504,-504,-504,-75,-504,-504',
'-504,-77,102,-82,493,190,399,101,647,-81,-77,-79,-78,-504,-504,-281',
'-78,191,-504,-80,-86,-77,-281,-281,-281,-77,-76,102,-281,-281,-79,-281',
'101,102,102,493,493,294,101,101,102,218,626,-497,102,101,493,-366,192',
'101,-281,-281,-90,-281,-281,-281,-281,-281,102,482,493,193,481,101,469',
'102,102,626,626,260,101,101,523,215,198,199,237,217,216,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-439,-79,-281',
'-281,-281,523,554,-439,523,285,-281,528,-497,-281,-498,-504,-439,-89',
'-281,-79,-281,218,-281,-281,-281,-281,-281,-281,-281,523,-281,593,-281',
'523,-497,287,288,286,594,-79,525,524,523,-79,564,-281,-281,-275,-80',
'675,-281,469,-88,215,-275,-275,-275,217,216,-275,-275,-275,693,-275',
'-442,-504,525,524,521,525,524,-442,-504,-275,-275,564,-498,-500,563',
'294,-442,-504,-275,-275,545,-275,-275,-275,-275,-275,525,524,526,-81',
'525,524,530,-89,-498,-504,546,102,564,525,524,536,101,482,-85,563,484',
'-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275,-275',
'294,-77,-275,-275,-275,-85,482,-275,694,617,-275,563,482,-275,-275,484',
'-275,-79,-275,780,-275,-87,-275,-275,-275,-275,-275,-275,-275,75,-275',
'683,-275,-442,-449,-448,-447,76,467,468,-442,-449,-448,-447,-520,-275',
'-275,-275,-275,-504,-275,-520,-520,-520,-87,-520,-520,-520,-520,-328',
'-520,834,-520,-520,-520,-84,-328,-520,-520,-520,-520,-520,-500,-76,321',
'-328,342,-84,-501,-520,-520,-520,-520,-520,-520,-520,-520,102,198,199',
'-520,-520,101,-520,-520,-520,-520,-520,345,-504,662,365,660,659,658',
'661,-504,666,665,669,668,-500,834,366,-444,-504,-445,-446,518,-520,395',
'-444,-500,-445,-446,519,-520,396,-501,-500,-520,263,-520,-504,-500,-501',
'397,-520,-500,398,-501,639,263,-520,-501,640,666,665,669,668,-450,198',
'199,400,-520,401,-500,-450,666,665,669,668,-501,463,430,-520,-450,-520',
'433,-520,464,102,-520,-500,-500,-500,101,-500,-520,462,-520,-500,-500',
'-520,436,-504,-500,441,-500,-500,-500,-500,-500,-500,-500,737,728,198',
'199,-500,-500,-500,-500,-500,-500,-500,362,218,102,102,364,363,102,101',
'101,-500,263,101,-500,-500,-500,-500,-500,-500,-500,-500,-500,-500,-63',
'-500,-500,457,-500,-500,-500,-504,669,668,458,215,737,728,-504,217,216',
'213,214,-500,459,-274,465,-504,266,294,-500,695,-274,-500,-500,263,-500',
'-500,470,471,-500,-274,-500,218,-500,-504,-500,294,486,472,503,-282',
'355,505,-500,506,473,504,-282,-500,-500,-500,-500,-500,-500,397,502',
'-282,-500,-500,-501,-501,-501,529,-501,533,540,-86,-501,-501,542,-262',
'544,-501,263,-501,-501,-501,-501,-501,-501,-501,218,218,218,218,-501',
'-501,-501,-501,-501,-501,-501,772,773,574,774,96,97,590,294,595,-501',
'237,596,-501,-501,-501,-501,-501,-501,-501,-501,-501,-501,597,-501,-501',
'-72,-501,-501,-501,218,222,227,228,229,224,226,234,235,230,231,644,-521',
'-521,-282,598,232,233,642,-501,554,-282,-501,-501,475,-501,-501,643',
'611,-501,-282,-501,215,-501,221,-501,217,216,213,214,225,223,219,-501',
'220,612,294,619,-501,-501,-501,-501,-501,-501,622,-283,501,-501,-501',
'65,66,67,-283,54,630,677,-88,59,60,679,441,-283,63,441,61,62,64,26,27',
'68,69,696,707,436,436,25,31,30,91,90,92,93,246,712,20,714,718,719,724',
'541,263,44,263,218,95,94,85,53,87,86,88,89,96,97,218,83,84,728,41,42',
'40,218,222,227,228,229,224,226,234,235,230,231,-281,211,212,-450,733',
'232,233,-281,203,728,-450,207,-501,741,55,56,-281,742,57,-450,746,215',
'760,221,43,217,216,213,214,225,223,219,21,220,762,765,766,81,75,77,78',
'79,80,767,768,-263,76,82,102,236,781,-218,-281,101,65,66,67,10,54,-281',
'789,574,59,60,-501,574,574,63,-281,61,62,64,26,27,68,69,801,263,263',
'237,25,31,30,91,90,92,93,806,-262,20,104,105,106,107,108,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,810,83,84,813,41,42,40,218,222,227,228',
'229,224,226,234,235,230,231,844,-521,-521,-274,815,232,233,845,39,818',
'-274,33,822,826,55,56,843,827,57,-274,35,215,294,221,43,217,216,213',
'214,225,223,219,21,220,838,839,846,81,75,77,78,79,80,847,-282,848,76',
'82,65,66,67,-282,54,355,849,-283,59,60,853,856,-282,63,-283,61,62,64',
'249,250,68,69,858,-283,859,860,248,278,282,91,90,92,93,865,218,104,105',
'106,107,108,866,870,279,873,874,95,94,85,53,87,86,88,89,96,97,765,83',
'84,765,766,662,283,660,659,658,661,215,-281,887,890,217,216,213,214',
'-281,574,574,906,907,-501,908,784,912,-281,207,611,916,55,56,917,765',
'57,104,105,106,107,108,662,652,660,659,658,661,919,920,574,666,665,669',
'668,81,75,77,78,79,80,574,574,,76,82,65,66,67,787,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,666,665,669,668,248,278,282,91,90,92,93,,,,',
',,,541,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,218,222,227',
'228,229,224,226,234,235,230,231,,211,212,,,232,233,,784,,,207,,,55,56',
',,57,,,215,,221,,217,216,213,214,225,223,219,,220,,,,81,75,77,78,79',
'80,,,,76,82,,236,,881,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57',
',35,,,,43,662,,660,659,658,661,,21,,,,,81,75,77,78,79,80,,,,76,82,8',
'65,66,67,10,54,,,,59,60,,,,63,652,61,62,64,26,27,68,69,666,665,669,668',
'25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,218,-521,-521,-521,-521,224,226,,,-521,-521,,,,',
',232,233,,39,,,268,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225',
'223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,',
',,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214',
',,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44',
'11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,',
',,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,,',
'219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,',
',,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,,,,',
',232,233,,39,,,268,,,55,56,,,57,,35,215,,221,43,217,216,213,214,,,219',
'21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63',
',61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12',
'95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,,,,,,232',
'233,,39,,,268,,,55,56,,,57,,35,215,,221,43,217,216,213,214,,,219,21',
'220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61',
'62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,-521,-521,-521,-521,224',
'226,,,-521,-521,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217',
'216,213,214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66',
'67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92',
'93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,218,-521,-521,-521,-521,224,226,,,-521,-521,,,,,,232,233,,39,,,33',
',,55,56,,,57,,35,215,,221,43,217,216,213,214,225,223,219,21,220,,,,81',
'75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26',
'27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87',
'86,88,89,96,97,,83,84,,41,42,40,218,-521,-521,-521,-521,224,226,,,-521',
'-521,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213',
'214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,-521',
'-521,-521,-521,224,226,,,-521,-521,,,,,,232,233,,39,,,33,,,55,56,,,57',
',35,215,,221,43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79',
'80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,',
',,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,218,-521,-521,-521,-521,224,226,,,-521,-521,',
',,,,232,233,,39,,,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225',
'223,219,21,220,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,218,222,227',
'228,229,224,226,,,230,231,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215',
',221,43,217,216,213,214,225,223,219,21,220,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,218,222,227,228,229,224,226,234,,230,231,,,,,,232,233,,39',
',,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,225,223,219,21,220',
',,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,,,,,,232,233,,39',
',,33,,,55,56,,,57,,35,215,,221,43,217,216,213,214,,,,21,,,,,81,75,77',
'78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56',
',,57,,35,215,,221,43,217,216,213,214,,,,21,,,,,81,75,77,78,79,80,,,',
'76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31',
'30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,218,,,,,,,,,,,,,,,,232,233,,39,,,33,,,55,56,,,57,,35,215',
',,43,217,216,213,214,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59',
'60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9',
'44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,',
',,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,',
',63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11',
'12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,',
',39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76',
'82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30',
'91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84',
',41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21',
',,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55',
'56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27',
'68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57',
',35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,8,65,66,67,10,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,',
',,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78',
'79,80,,,,76,82,8,65,66,67,10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69',
',,,,25,31,30,91,90,92,93,,,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,10,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,9,44',
'11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,',
',,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,',
',,76,82,156,167,157,180,153,173,163,162,183,184,178,161,160,155,181',
'185,186,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152',
'171,170,,,,,,151,158,149,150,147,148,112,114,111,,113,,,,,,,,142,143',
',140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137',
'136,,123,141,139,138,134,135,130,128,121,,122,,,146,81,,,,,,,,,,82,156',
'167,157,180,153,173,163,162,183,184,178,161,160,155,181,185,186,165',
'154,168,172,174,166,159,,,175,182,177,176,169,179,164,152,171,170,,',
',,,151,158,149,150,147,148,112,114,,,113,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,,,146,81,,,65,66,67,,54,,,82,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,',
',95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203',
',,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,',
'246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,',
'44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,',
',,,203,,,207,,,55,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,244,,246,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,-252,-252,-252,,-252,,,,-252',
'-252,,,,-252,,-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252,-252',
'-252,-252,-252,-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252,-252',
'-252,-252,-252,,-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,',
'-252,263,,-252,-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252',
'-252,-252,-252,-252,,,,-252,-252,-252,-252,-252,,-252,,,,-252,-252,',
',,-252,,-252,-252,-252,-252,-252,-252,-252,,,,,-252,-252,-252,-252,-252',
'-252,-252,,,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252,-252,-252,-252',
'-252,,-252,-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,,-252,266,',
'-252,-252,,,-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252,-252,-252',
'-252,-252,,,,-252,-252,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,,57,,272',
',,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,',
'63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276',
',,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301',
',,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,',
',95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203',
',,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,315,,,33,,,55,56,,,57,,35,,,',
',,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,-497,-497,-497,,-497,,,,-497',
'-497,,,,-497,,-497,-497,-497,-497,-497,-497,-497,,-497,,,-497,-497,-497',
'-497,-497,-497,-497,,,,,,,,,,-497,,,-497,-497,-497,-497,-497,-497,-497',
'-497,-497,-497,,-497,-497,,-497,-497,-497,,,,,,,,,,,,,,,,,,,,-497,,',
'-497,-497,,-497,-497,,,-497,,-497,,-497,,-497,,,,,,,,-497,,-497,,,-497',
'-497,-497,-497,-497,-497,,,,-497,-497,-498,-498,-498,,-498,,,,-498,-498',
',,,-498,,-498,-498,-498,-498,-498,-498,-498,,-498,,,-498,-498,-498,-498',
'-498,-498,-498,,,,,,,,,,-498,,,-498,-498,-498,-498,-498,-498,-498,-498',
'-498,-498,,-498,-498,,-498,-498,-498,,,,,,,,,,,,,,,,,,,,-498,,,-498',
'-498,,-498,-498,,,-498,,-498,,-498,,-498,,,,,,,,-498,,-498,,,-498,-498',
'-498,-498,-498,-498,,,,-498,-498,65,66,67,,54,,,,59,60,,,,63,,61,62',
'64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,',
',,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,',
',,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25',
'31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,',
',,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,',
',55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
'10,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93',
',,20,,,,,,9,44,11,12,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,39,,,33,,,55,56,,,57,,35,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,373,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,373,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301',
',,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,445,56,,,57,,244,,246,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207',
',,55,56,,,57,,244,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,455,55,56,,,57,,244,,246,,43,,,,,,,,210',
',,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,207,,,55,56',
',,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,475,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279',
',,95,94,507,53,87,86,508,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,509',
',,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66',
'67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,279,,,95,94,507,53,87,86,508,89,96,97,,83,84,,,,283,',
',,,,,,,,,,,,,,,,,,509,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77',
'78,79,80,,,,76,82,156,167,157,180,153,173,163,162,183,184,178,161,160',
'155,181,185,186,165,154,168,172,174,166,159,,,175,182,177,176,169,179',
'164,152,171,170,,,,,,151,158,149,150,147,148,112,114,,,113,,,,,,,,142',
'143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,',
',137,136,,123,141,139,138,134,135,130,128,121,,122,,,146,81,,,65,66',
'67,,54,,,82,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,-252,-252,-252,,-252,,,,-252,-252,,,,-252,,-252',
'-252,-252,-252,-252,-252,-252,,,,,-252,-252,-252,-252,-252,-252,-252',
',,,,,,,,,-252,,,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252,,-252',
'-252,,-252,-252,-252,,,,,,,,,,,,,,,,,,,,-252,,,-252,263,,-252,-252,',
',-252,,-252,,-252,,-252,,,,,,,,-252,,,,,-252,-252,-252,-252,-252,-252',
',,,-252,-252,-502,-502,-502,,-502,,,,-502,-502,,,,-502,,-502,-502,-502',
'-502,-502,-502,-502,,,,,-502,-502,-502,-502,-502,-502,-502,,,,,,,,,',
'-502,,,-502,-502,-502,-502,-502,-502,-502,-502,-502,-502,,-502,-502',
',-502,-502,-502,,,,,,,,,,,,,,,,,,,,-502,,,-502,-502,,-502,-502,,,-502',
',-502,,-502,,-502,,,,,,,,-502,,,,,-502,-502,-502,-502,-502,-502,,,,-502',
'-502,-503,-503,-503,,-503,,,,-503,-503,,,,-503,,-503,-503,-503,-503',
'-503,-503,-503,,,,,-503,-503,-503,-503,-503,-503,-503,,,,,,,,,,-503',
',,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,,-503,-503,,-503',
'-503,-503,,,,,,,,,,,,,,,,,,,,-503,,,-503,-503,,-503,-503,,,-503,,-503',
',-503,,-503,,,,,,,,-503,,,,,-503,-503,-503,-503,-503,-503,,,,-503,-503',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,',
',59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,',
',,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,',
',,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79',
'80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,',
'248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,566,,246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,',
'76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278',
'282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,',
'41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,570,,246,,43,,,',
',,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,584,,246,,43,,,,,,,,21,,',
',,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86',
'88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,',
'57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,614',
',,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301,,,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87',
'86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56',
',,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,',
',,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,20,,',
',,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,',
',,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75,77,78,79,80',
',,,76,82,156,167,157,180,153,173,163,162,183,184,178,161,160,155,181',
'185,186,165,154,168,172,174,166,159,,,175,182,177,176,169,179,164,152',
'171,170,,,,,,151,158,149,150,147,148,112,114,,,113,,,,,,,,142,143,,140',
'124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136',
',123,141,139,138,134,135,130,128,121,,122,,,146,81,,,65,66,67,,54,,',
'82,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,682,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,',
',,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68',
'69,,,,,25,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,',
'81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249',
'250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87',
'86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,',
'57,,700,,701,,,,,,,,,702,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,566,,246,,43,,,,,,,,210,',
',,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64',
'249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53',
'87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55',
'56,,,57,,373,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67',
',54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92',
'93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,',
',,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,745,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42',
'40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,301',
',,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91',
'90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,',
',,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207,',
',55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,792,,246,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,797',
',246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,799,,246,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,',
',25,31,30,91,90,92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97',
',83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,',
',,,,,,21,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'65,66,67,,54,,,,59,60,,,,63,,61,62,64,26,27,68,69,,,,,25,31,30,91,90',
'92,93,,,20,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40',
',,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,21,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,',
',,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60',
',,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44',
',,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,',
'203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76',
'82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282',
'91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283',
',,,,,,,,,,,,,,,,,,,276,,,273,,,55,56,,,57,,842,,841,,,,,,,,,,,,,,,81',
'75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250',
'68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88',
'89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57',
',,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80',
',,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248',
'278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83',
'84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,',
',,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94',
'85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207,',
',55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54',
',,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,',
',,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,',
',,,,,,,,,,,203,,,207,,,55,56,,,57,,867,,,,43,,,,,,,,210,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207,,,55,56,,,57,,,,,,,,,',
',,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61',
'62,64,249,250,68,69,,,,,248,31,30,91,90,92,93,,,,,,,,,,44,,,95,94,85',
'53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,',
',55,56,,,57,,301,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65',
'66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91',
'90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89,96,97,,83,84,,,,283',
',,,,,,,,,,,,,,,,,,,784,,,207,,,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77',
'78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69',
',,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,891,',
'246,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59',
'60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,',
',,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,',
',,,,,203,,,207,,,55,56,,,57,,894,,246,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207',
',,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,',
'54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78',
'79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68,69,',
',,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95,94,85,53,87,86,88,89,96',
'97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,,,207,,,55,56,,,57,,,,,,43',
',,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63',
',61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207',
',,55,56,,,57,,,,,,,,,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,',
'54,,,,59,60,,,,63,,61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93',
',,,,,,,,,44,,,95,94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,',
',,,,,,,,,,,,203,,,207,,,55,56,,,57,,923,,246,,43,,,,,,,,210,,,,,81,75',
'77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,,61,62,64,249,250,68',
'69,,,,,248,278,282,91,90,92,93,,,,,,,,,,279,,,95,94,85,53,87,86,88,89',
'96,97,,83,84,,,,283,,,,,,,,,,,,,,,,,,,,784,,,207,,,55,56,,,57,,,,,,',
',,,,,,,,,,,,81,75,77,78,79,80,,,,76,82,65,66,67,,54,,,,59,60,,,,63,',
'61,62,64,249,250,68,69,,,,,248,278,282,91,90,92,93,,,,,,,,,,44,,,95',
'94,85,53,87,86,88,89,96,97,,83,84,,41,42,40,,,,,,,,,,,,,,,,,,,,203,',
',207,,,55,56,,,57,,,,,,43,,,,,,,,210,,,,,81,75,77,78,79,80,,,,76,82',
'156,167,157,180,153,173,163,162,183,184,178,161,160,155,181,185,186',
'165,154,168,172,174,166,159,,,175,182,177,329,328,330,327,152,171,170',
',,,,,151,158,149,150,325,326,323,114,87,86,324,89,,,,,,,142,143,,140',
'124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,335,,,,,,,,137,136',
',123,141,139,138,134,135,130,128,121,,122,,,146,156,167,157,180,153',
'173,163,162,183,184,178,161,160,155,181,185,186,165,154,168,172,174',
'166,159,,,175,182,177,176,169,179,164,152,171,170,,,,,,151,158,149,150',
'147,148,112,114,352,351,113,353,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138',
'134,135,130,128,121,,122,,,146,156,167,157,180,153,173,163,162,183,184',
'178,161,160,155,181,185,186,165,154,168,172,174,166,159,,,175,182,177',
'176,169,179,164,152,171,170,,,,,,151,158,149,150,147,148,112,114,,,113',
',,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,',
',,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,380,383',
'146,,381,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
'385,389,146,,387,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,438,383,146,,439,,,,,,,,142,143,,140,124,125,126,,129,131,',
',127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,438,383,146,,439,,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138',
'134,135,130,128,121,,122,555,383,146,,556,,,,,,,,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,557,389,146,,558,,,,,,,,142,143,,140',
'124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136',
',123,141,139,138,134,135,130,128,121,,122,600,383,146,,601,,,,,,,,142',
'143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,',
',137,136,,123,141,139,138,134,135,130,128,121,,122,603,389,146,,604',
',,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,',
',,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,555,383',
'146,,556,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
'557,389,146,,558,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,634,383,146,,635,,,,,,,,142,143,,140,124,125,126,,129,131,',
',127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135',
'130,128,121,,122,636,389,146,,637,,,,,,,,142,143,,140,124,125,126,,129',
'131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138',
'134,135,130,128,121,,122,,,146,218,222,227,228,229,224,226,234,235,230',
'231,,211,212,,,232,233,,,,-218,,,,,,,,,,,215,,221,,217,216,213,214,225',
'223,219,,220,,,,,,,438,383,,,439,,,,,236,,-218,142,143,,140,124,125',
'126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136,,123,141',
'139,138,134,135,130,128,121,,122,438,383,146,,439,,,,,,,,142,143,,140',
'124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,,,137,136',
',123,141,139,138,134,135,130,128,121,,122,748,389,146,,749,,,,,,,,142',
'143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,,,,,,,,,,,,',
',137,136,,123,141,139,138,134,135,130,128,121,,122,438,383,146,,439',
',,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145,132,133,',
',,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122,883,383',
'146,,884,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,,144,145',
'132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128,121,,122',
'885,389,146,,886,,,,,,,,142,143,,140,124,125,126,,129,131,,,127,,,,',
'144,145,132,133,,,,,,,,,,,,,,137,136,,123,141,139,138,134,135,130,128',
'121,,122,,,146,218,222,227,228,229,224,226,234,235,230,231,,211,212',
',,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,',
',,,,,,,,,,,,,,236,,574,218,222,227,228,229,224,226,234,235,230,231,',
'211,212,,,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219',
',220,,218,222,227,228,229,224,226,234,235,230,231,,211,212,236,561,232',
'233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222',
'227,228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,',
',,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224',
'226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217',
'216,213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230',
'231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225',
'223,219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236',
'232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218',
'222,227,228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,',
',,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229',
'224,226,234,235,230,231,,211,212,294,236,232,233,,,,,,,,,,,,,,,215,',
'221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224,226,234',
'235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213',
'214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230,231,,211',
'212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219',
',220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236,232,233',
',,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222,227',
'228,229,224,226,234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,',
'215,,221,,217,216,213,214,225,223,219,,220,218,222,227,228,229,224,226',
'234,235,230,231,,211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216',
'213,214,225,223,219,,220,218,222,227,228,229,224,226,234,235,230,231',
',211,212,,236,232,233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223',
'219,,220,218,222,227,228,229,224,226,234,235,230,231,,211,212,,236,232',
'233,,,,,,,,,,,,,,,215,,221,,217,216,213,214,225,223,219,,220,218,222',
'227,228,229,224,226,234,235,230,231,,211,212,294,236,232,233,,,,,,,',
',,,,,,,215,,221,,217,216,213,214,225,223,219,,220,,,,,,,,,,,,,,,,236' ]
        racc_action_table = arr = ::Array.new(25044, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'385,306,58,280,17,313,38,385,385,385,202,316,1,385,385,513,385,505,634',
'635,636,582,346,597,28,385,311,637,311,600,323,28,307,744,746,385,385',
'323,385,385,385,385,385,809,609,609,17,16,38,3,17,451,38,496,16,428',
'202,814,451,672,672,597,582,16,385,385,385,385,385,385,385,385,385,385',
'385,385,385,385,497,747,385,385,385,636,385,346,58,280,385,428,637,385',
'868,600,868,29,385,609,385,451,385,385,385,385,385,385,385,313,385,385',
'385,600,306,316,306,12,204,306,513,505,634,635,636,385,385,387,385,13',
'385,637,385,600,387,387,387,600,746,513,387,387,601,387,513,307,744',
'307,744,672,307,744,496,404,496,507,809,496,809,29,14,809,387,387,204',
'387,387,387,387,387,814,299,814,15,299,814,398,497,747,497,747,29,497',
'747,531,404,18,18,23,404,404,387,387,387,387,387,387,387,387,387,387',
'387,387,387,387,507,601,387,387,387,337,387,507,341,37,387,341,507,387',
'508,603,507,398,387,601,387,405,387,387,387,387,387,387,387,339,387',
'722,387,343,507,40,40,39,722,601,531,531,348,601,447,387,387,53,387',
'531,387,286,387,405,53,53,53,405,405,53,53,53,555,53,508,603,337,337',
'337,341,341,508,603,53,53,448,508,603,447,722,508,603,53,53,380,53,53',
'53,53,53,339,339,339,286,343,343,343,286,508,603,381,5,580,348,348,348',
'5,300,555,448,300,53,53,53,53,53,53,53,53,53,53,53,53,53,53,44,380,53',
'53,53,380,487,53,556,487,53,580,490,53,53,490,53,381,53,696,53,381,53',
'53,53,53,53,53,53,73,53,544,53,324,325,326,327,73,283,283,324,325,326',
'327,437,53,53,53,53,748,53,437,437,437,556,440,437,437,437,45,437,762',
'440,440,440,696,45,440,440,440,437,440,883,544,65,45,79,544,884,437',
'437,440,437,437,437,437,437,310,296,296,440,440,310,440,440,440,440',
'440,80,748,652,187,652,652,652,652,748,762,762,762,762,748,874,189,328',
'748,329,330,332,437,201,328,883,329,330,332,437,201,884,883,440,437',
'437,748,883,884,201,440,883,203,884,509,440,440,884,509,652,652,652',
'652,274,305,305,205,437,206,883,274,874,874,874,874,884,275,242,440',
'274,437,243,437,275,648,437,557,557,557,648,557,440,275,440,557,557',
'440,247,885,557,256,557,557,557,557,557,557,557,621,621,649,649,557',
'557,557,557,557,557,557,111,423,653,755,111,111,824,653,755,557,259',
'824,557,557,557,557,557,557,557,557,557,557,267,557,557,269,557,557',
'557,885,765,765,270,423,897,897,885,423,423,423,423,885,271,277,276',
'885,278,279,557,557,277,557,557,282,557,557,287,288,557,277,557,291',
'557,885,557,298,302,289,314,465,312,315,557,317,289,314,465,557,557',
'557,557,557,557,289,314,465,557,557,558,558,558,342,558,345,367,557',
'558,558,372,375,379,558,386,558,558,558,558,558,558,558,406,407,408',
'409,558,558,558,558,558,558,558,673,673,434,673,673,673,449,450,452',
'558,453,454,558,558,558,558,558,558,558,558,558,558,456,558,558,457',
'558,558,558,402,402,402,402,402,402,402,402,402,402,402,511,402,402',
'640,461,402,402,511,558,558,640,558,558,466,558,558,511,476,558,640',
'558,402,558,402,558,402,402,402,402,402,402,402,558,402,477,478,488',
'558,558,558,558,558,558,492,724,498,558,558,63,63,63,724,63,499,535',
'558,63,63,539,547,724,63,552,63,63,63,63,63,63,63,559,567,569,572,63',
'63,63,63,63,63,63,574,583,63,586,591,592,599,370,602,63,605,607,63,63',
'63,63,63,63,63,63,63,63,608,63,63,610,63,63,63,370,370,370,370,370,370',
'370,370,370,370,370,604,370,370,782,613,370,370,604,63,623,782,63,604',
'629,63,63,604,631,63,782,633,370,654,370,63,370,370,370,370,370,370',
'370,63,370,655,656,662,63,63,63,63,63,63,667,670,681,63,63,63,370,699',
'370,749,63,100,100,100,100,100,749,703,705,100,100,749,708,713,100,749',
'100,100,100,100,100,100,100,715,720,721,723,100,100,100,100,100,100',
'100,726,729,100,7,7,7,7,7,100,100,100,100,100,100,100,100,100,100,100',
'100,100,100,730,100,100,735,100,100,100,403,403,403,403,403,403,403',
'403,403,403,403,783,403,403,785,738,403,403,783,100,743,785,100,751',
'756,100,100,783,757,100,785,100,403,758,403,100,403,403,403,403,403',
'403,403,100,403,770,776,784,100,100,100,100,100,100,786,846,787,100',
'100,700,700,700,846,700,100,790,908,700,700,795,798,846,700,908,700',
'700,700,700,700,700,700,802,908,803,804,700,700,700,700,700,700,700',
'816,424,109,109,109,109,109,817,823,700,828,829,700,700,700,700,700',
'700,700,700,700,700,830,700,700,833,834,516,700,516,516,516,516,424',
'886,847,851,424,424,424,424,886,854,857,880,881,886,882,700,892,886',
'700,896,902,700,700,903,904,700,354,354,354,354,354,760,516,760,760',
'760,760,905,906,910,516,516,516,516,700,700,700,700,700,700,913,926',
',700,700,842,842,842,700,842,,,,842,842,,,,842,,842,842,842,842,842',
'842,842,760,760,760,760,842,842,842,842,842,842,842,,,,,,,,560,,842',
',,842,842,842,842,842,842,842,842,842,842,,842,842,,,,842,560,560,560',
'560,560,560,560,560,560,560,560,,560,560,,,560,560,,842,,,842,,,842',
'842,,,842,,,560,,560,,560,560,560,560,560,560,560,,560,,,,842,842,842',
'842,842,842,,,,842,842,,560,,842,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2',
'2,2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,,2,2',
'2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,,2,,2,,,,2,837,,837,837,837,837,,2',
',,,,2,2,2,2,2,2,,,,2,2,33,33,33,33,33,33,,,,33,33,,,,33,837,33,33,33',
'33,33,33,33,837,837,837,837,33,33,33,33,33,33,33,,,33,,,,,,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,413,413,413,413,413',
'413,413,,,413,413,,,,,,413,413,,33,,,33,,,33,33,,,33,,33,413,,413,33',
'413,413,413,413,413,413,413,33,413,,,,33,33,33,33,33,33,,,,33,33,190',
'190,190,190,190,190,,,,190,190,,,,190,,190,190,190,190,190,190,190,',
',,,190,190,190,190,190,190,190,,,190,,,,,,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,,190,190,,190,190,190,414,,,,,,,,,,,,,,',
',414,414,,190,,,190,,,190,190,,,190,,190,414,,414,190,414,414,414,414',
',,414,190,414,,,,190,190,190,190,190,190,,,,190,190,207,207,207,207',
'207,207,,,,207,207,,,,207,,207,207,207,207,207,207,207,,,,,207,207,207',
'207,207,207,207,,,207,,,,,,207,207,207,207,207,207,207,207,207,207,207',
'207,207,207,,207,207,,207,207,207,415,,,,,,,,,,,,,,,,415,415,,207,,',
'207,,,207,207,,,207,,207,415,,415,207,415,415,415,415,,,415,207,415',
',,,207,207,207,207,207,207,,,,207,207,268,268,268,268,268,268,,,,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,268,268,268,268,268,268',
'268,,,268,,,,,,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
',268,268,,268,268,268,416,,,,,,,,,,,,,,,,416,416,,268,,,268,,,268,268',
',,268,,268,416,,416,268,416,416,416,416,,,416,268,416,,,,268,268,268',
'268,268,268,,,,268,268,273,273,273,273,273,273,,,,273,273,,,,273,,273',
'273,273,273,273,273,273,,,,,273,273,273,273,273,273,273,,,273,,,,,,273',
'273,273,273,273,273,273,273,273,273,273,273,273,273,,273,273,,273,273',
'273,417,,,,,,,,,,,,,,,,417,417,,273,,,273,,,273,273,,,273,,273,417,',
'417,273,417,417,417,417,,,417,273,417,,,,273,273,273,273,273,273,,,',
'273,273,295,295,295,295,295,295,,,,295,295,,,,295,,295,295,295,295,295',
'295,295,,,,,295,295,295,295,295,295,295,,,295,,,,,,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,,295,295,,295,295,295,418,418,418',
'418,418,418,418,,,418,418,,,,,,418,418,,295,,,295,,,295,295,,,295,,295',
'418,,418,295,418,418,418,418,418,418,418,295,418,,,,295,295,295,295',
'295,295,,,,295,295,366,366,366,366,366,366,,,,366,366,,,,366,,366,366',
'366,366,366,366,366,,,,,366,366,366,366,366,366,366,,,366,,,,,,366,366',
'366,366,366,366,366,366,366,366,366,366,366,366,,366,366,,366,366,366',
'419,419,419,419,419,419,419,,,419,419,,,,,,419,419,,366,,,366,,,366',
'366,,,366,,366,419,,419,366,419,419,419,419,419,419,419,366,419,,,,366',
'366,366,366,366,366,,,,366,366,491,491,491,491,491,491,,,,491,491,,',
',491,,491,491,491,491,491,491,491,,,,,491,491,491,491,491,491,491,,',
'491,,,,,,491,491,491,491,491,491,491,491,491,491,491,491,491,491,,491',
'491,,491,491,491,420,420,420,420,420,420,420,,,420,420,,,,,,420,420',
',491,,,491,,,491,491,,,491,,491,420,,420,491,420,420,420,420,420,420',
'420,491,420,,,,491,491,491,491,491,491,,,,491,491,495,495,495,495,495',
'495,,,,495,495,,,,495,,495,495,495,495,495,495,495,,,,,495,495,495,495',
'495,495,495,,,495,,,,,,495,495,495,495,495,495,495,495,495,495,495,495',
'495,495,,495,495,,495,495,495,421,421,421,421,421,421,421,,,421,421',
',,,,,421,421,,495,,,495,,,495,495,,,495,,495,421,,421,495,421,421,421',
'421,421,421,421,495,421,,,,495,495,495,495,495,495,,,,495,495,500,500',
'500,500,500,500,,,,500,500,,,,500,,500,500,500,500,500,500,500,,,,,500',
'500,500,500,500,500,500,,,500,,,,,,500,500,500,500,500,500,500,500,500',
'500,500,500,500,500,,500,500,,500,500,500,422,422,422,422,422,422,422',
',,422,422,,,,,,422,422,,500,,,500,,,500,500,,,500,,500,422,,422,500',
'422,422,422,422,422,422,422,500,422,,,,500,500,500,500,500,500,,,,500',
'500,650,650,650,650,650,650,,,,650,650,,,,650,,650,650,650,650,650,650',
'650,,,,,650,650,650,650,650,650,650,,,650,,,,,,650,650,650,650,650,650',
'650,650,650,650,650,650,650,650,,650,650,,650,650,650,425,425,425,425',
'425,425,425,,,425,425,,,,,,425,425,,650,,,650,,,650,650,,,650,,650,425',
',425,650,425,425,425,425,425,425,425,650,425,,,,650,650,650,650,650',
'650,,,,650,650,651,651,651,651,651,651,,,,651,651,,,,651,,651,651,651',
'651,651,651,651,,,,,651,651,651,651,651,651,651,,,651,,,,,,651,651,651',
'651,651,651,651,651,651,651,651,651,651,651,,651,651,,651,651,651,426',
'426,426,426,426,426,426,426,,426,426,,,,,,426,426,,651,,,651,,,651,651',
',,651,,651,426,,426,651,426,426,426,426,426,426,426,651,426,,,,651,651',
'651,651,651,651,,,,651,651,674,674,674,674,674,674,,,,674,674,,,,674',
',674,674,674,674,674,674,674,,,,,674,674,674,674,674,674,674,,,674,',
',,,,674,674,674,674,674,674,674,674,674,674,674,674,674,674,,674,674',
',674,674,674,410,,,,,,,,,,,,,,,,410,410,,674,,,674,,,674,674,,,674,',
'674,410,,410,674,410,410,410,410,,,,674,,,,,674,674,674,674,674,674',
',,,674,674,704,704,704,704,704,704,,,,704,704,,,,704,,704,704,704,704',
'704,704,704,,,,,704,704,704,704,704,704,704,,,704,,,,,,704,704,704,704',
'704,704,704,704,704,704,704,704,704,704,,704,704,,704,704,704,411,,',
',,,,,,,,,,,,,411,411,,704,,,704,,,704,704,,,704,,704,411,,411,704,411',
'411,411,411,,,,704,,,,,704,704,704,704,704,704,,,,704,704,716,716,716',
'716,716,716,,,,716,716,,,,716,,716,716,716,716,716,716,716,,,,,716,716',
'716,716,716,716,716,,,716,,,,,,716,716,716,716,716,716,716,716,716,716',
'716,716,716,716,,716,716,,716,716,716,412,,,,,,,,,,,,,,,,412,412,,716',
',,716,,,716,716,,,716,,716,412,,,716,412,412,412,412,,,,716,,,,,716',
'716,716,716,716,716,,,,716,716,717,717,717,717,717,717,,,,717,717,,',
',717,,717,717,717,717,717,717,717,,,,,717,717,717,717,717,717,717,,',
'717,,,,,,717,717,717,717,717,717,717,717,717,717,717,717,717,717,,717',
'717,,717,717,717,,,,,,,,,,,,,,,,,,,,717,,,717,,,717,717,,,717,,717,',
',,717,,,,,,,,717,,,,,717,717,717,717,717,717,,,,717,717,728,728,728',
'728,728,728,,,,728,728,,,,728,,728,728,728,728,728,728,728,,,,,728,728',
'728,728,728,728,728,,,728,,,,,,728,728,728,728,728,728,728,728,728,728',
'728,728,728,728,,728,728,,728,728,728,,,,,,,,,,,,,,,,,,,,728,,,728,',
',728,728,,,728,,728,,,,728,,,,,,,,728,,,,,728,728,728,728,728,728,,',
',728,728,739,739,739,739,739,739,,,,739,739,,,,739,,739,739,739,739',
'739,739,739,,,,,739,739,739,739,739,739,739,,,739,,,,,,739,739,739,739',
'739,739,739,739,739,739,739,739,739,739,,739,739,,739,739,739,,,,,,',
',,,,,,,,,,,,,739,,,739,,,739,739,,,739,,739,,,,739,,,,,,,,739,,,,,739',
'739,739,739,739,739,,,,739,739,740,740,740,740,740,740,,,,740,740,,',
',740,,740,740,740,740,740,740,740,,,,,740,740,740,740,740,740,740,,',
'740,,,,,,740,740,740,740,740,740,740,740,740,740,740,740,740,740,,740',
'740,,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,,,740,740,,,740,,740,',
',,740,,,,,,,,740,,,,,740,740,740,740,740,740,,,,740,740,752,752,752',
'752,752,752,,,,752,752,,,,752,,752,752,752,752,752,752,752,,,,,752,752',
'752,752,752,752,752,,,752,,,,,,752,752,752,752,752,752,752,752,752,752',
'752,752,752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,',
',752,752,,,752,,752,,,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,',
',752,752,794,794,794,794,794,794,,,,794,794,,,,794,,794,794,794,794',
'794,794,794,,,,,794,794,794,794,794,794,794,,,794,,,,,,794,794,794,794',
'794,794,794,794,794,794,794,794,794,794,,794,794,,794,794,794,,,,,,',
',,,,,,,,,,,,,794,,,794,,,794,794,,,794,,794,,,,794,,,,,,,,794,,,,,794',
'794,794,794,794,794,,,,794,794,806,806,806,806,806,806,,,,806,806,,',
',806,,806,806,806,806,806,806,806,,,,,806,806,806,806,806,806,806,,',
'806,,,,,,806,806,806,806,806,806,806,806,806,806,806,806,806,806,,806',
'806,,806,806,806,,,,,,,,,,,,,,,,,,,,806,,,806,,,806,806,,,806,,806,',
',,806,,,,,,,,806,,,,,806,806,806,806,806,806,,,,806,806,819,819,819',
'819,819,819,,,,819,819,,,,819,,819,819,819,819,819,819,819,,,,,819,819',
'819,819,819,819,819,,,819,,,,,,819,819,819,819,819,819,819,819,819,819',
'819,819,819,819,,819,819,,819,819,819,,,,,,,,,,,,,,,,,,,,819,,,819,',
',819,819,,,819,,819,,,,819,,,,,,,,819,,,,,819,819,819,819,819,819,,',
',819,819,862,862,862,862,862,862,,,,862,862,,,,862,,862,862,862,862',
'862,862,862,,,,,862,862,862,862,862,862,862,,,862,,,,,,862,862,862,862',
'862,862,862,862,862,862,862,862,862,862,,862,862,,862,862,862,,,,,,',
',,,,,,,,,,,,,862,,,862,,,862,862,,,862,,862,,,,862,,,,,,,,862,,,,,862',
'862,862,862,862,862,,,,862,862,864,864,864,864,864,864,,,,864,864,,',
',864,,864,864,864,864,864,864,864,,,,,864,864,864,864,864,864,864,,',
'864,,,,,,864,864,864,864,864,864,864,864,864,864,864,864,864,864,,864',
'864,,864,864,864,,,,,,,,,,,,,,,,,,,,864,,,864,,,864,864,,,864,,864,',
',,864,,,,,,,,864,,,,,864,864,864,864,864,864,,,,864,864,869,869,869',
'869,869,869,,,,869,869,,,,869,,869,869,869,869,869,869,869,,,,,869,869',
'869,869,869,869,869,,,869,,,,,,869,869,869,869,869,869,869,869,869,869',
'869,869,869,869,,869,869,,869,869,869,,,,,,,,,,,,,,,,,,,,869,,,869,',
',869,869,,,869,,869,,,,869,,,,,,,,869,,,,,869,869,869,869,869,869,,',
',869,869,872,872,872,872,872,872,,,,872,872,,,,872,,872,872,872,872',
'872,872,872,,,,,872,872,872,872,872,872,872,,,872,,,,,,872,872,872,872',
'872,872,872,872,872,872,872,872,872,872,,872,872,,872,872,872,,,,,,',
',,,,,,,,,,,,,872,,,872,,,872,872,,,872,,872,,,,872,,,,,,,,872,,,,,872',
'872,872,872,872,872,,,,872,872,878,878,878,878,878,878,,,,878,878,,',
',878,,878,878,878,878,878,878,878,,,,,878,878,878,878,878,878,878,,',
'878,,,,,,878,878,878,878,878,878,878,878,878,878,878,878,878,878,,878',
'878,,878,878,878,,,,,,,,,,,,,,,,,,,,878,,,878,,,878,878,,,878,,878,',
',,878,,,,,,,,878,,,,,878,878,878,878,878,878,,,,878,878,8,8,8,8,8,,',
',8,8,,,,8,,8,8,8,8,8,8,8,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8',
'8,8,8,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,',
',,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9',
'9,9,9,9,9,,,9,9,9,9,9,9,9,9,9,9,,,,,,9,9,9,9,9,9,9,9,9,,9,,,,,,,,9,9',
',9,9,9,9,,9,9,,,9,,,,,9,9,9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,,9',
',,9,9,,,,,,,,,,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,10,10,10,10,10,10,,,10,10,10,10,10,10,10,10,10,10,,,,,,10,10,10,10',
'10,10,10,10,,,10,,,,,,,,10,10,,10,10,10,10,,10,10,,,10,,,,,10,10,10',
'10,,,,,,,,,,,,,,10,10,,10,10,10,10,10,10,10,10,10,,10,,,10,10,,,20,20',
'20,,20,,,10,20,20,,,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20,20,20',
'20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20,,',
',,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,,,,,,,,20,,,,,20,20,20',
'20,20,20,,,,20,20,21,21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21',
',,,,21,21,21,21,21,21,21,,,,,,,,,,21,,,21,21,21,21,21,21,21,21,21,21',
',21,21,,21,21,21,,,,,,,,,,,,,,,,,,,,21,,,21,,,21,21,,,21,,,,,,21,,,',
',,,,21,,,,,21,21,21,21,21,21,,,,21,21,25,25,25,,25,,,,25,25,,,,25,,25',
'25,25,25,25,25,25,,,,,25,25,25,25,25,25,25,,,,,,,,,,25,,,25,25,25,25',
'25,25,25,25,25,25,,25,25,,25,25,25,,,,,,,,,,,,,,,,,,,,25,,,25,,,25,25',
',,25,,25,,25,,25,,,,,,,,25,,,,,25,25,25,25,25,25,,,,25,25,26,26,26,',
'26,,,,26,26,,,,26,,26,26,26,26,26,26,26,,,,,26,26,26,26,26,26,26,,,',
',,,,,,26,,,26,26,26,26,26,26,26,26,26,26,,26,26,,26,26,26,,,,,,,,,,',
',,,,,,,,,26,,,26,,,26,26,,,26,,26,,26,,26,,,,,,,,26,,,,,26,26,26,26',
'26,26,,,,26,26,27,27,27,,27,,,,27,27,,,,27,,27,27,27,27,27,27,27,,,',
',27,27,27,27,27,27,27,,,,,,,,,,27,,,27,27,27,27,27,27,27,27,27,27,,27',
'27,,27,27,27,,,,,,,,,,,,,,,,,,,,27,,,27,,,27,27,,,27,,27,,27,,27,,,',
',,,,27,,,,,27,27,27,27,27,27,,,,27,27,30,30,30,,30,,,,30,30,,,,30,,30',
'30,30,30,30,30,30,,,,,30,30,30,30,30,30,30,,,,,,,,,,30,,,30,30,30,30',
'30,30,30,30,30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,30,,30',
'30,,,30,,30,,30,,30,,,,,,,,30,,,,,30,30,30,30,30,30,,,,30,30,31,31,31',
',31,,,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,31,31,31,31,31,31,31,,',
',,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31,,,,,,,,,',
',,,,,,,,,,31,,,31,31,,31,31,,,31,,31,,31,,31,,,,,,,,31,,,,,31,31,31',
'31,31,31,,,,31,31,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34',
',,,,34,34,34,34,34,34,34,,,,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34',
',34,34,,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,,,,,,,,,,',
',,,,,34,34,34,34,34,34,,,,34,34,35,35,35,,35,,,,35,35,,,,35,,35,35,35',
'35,35,35,35,,,,,35,35,35,35,35,35,35,,,,,,,,,,35,,,35,35,35,35,35,35',
'35,35,35,35,,35,35,,,,35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,',
',,,,,,,,,,,,,,,35,35,35,35,35,35,,,,35,35,41,41,41,,41,,,,41,41,,,,41',
',41,41,41,41,41,41,41,,,,,41,41,41,41,41,41,41,,,,,,,,,,41,,,41,41,41',
'41,41,41,41,41,41,41,,41,41,,41,41,41,,,,,,,,,,,,,,,,,,,,41,,,41,,,41',
'41,,,41,,,,,,41,,,,,,,,41,,,,,41,41,41,41,41,41,,,,41,41,42,42,42,,42',
',,,42,42,,,,42,,42,42,42,42,42,42,42,,,,,42,42,42,42,42,42,42,,,,,,',
',,,42,,,42,42,42,42,42,42,42,42,42,42,,42,42,,42,42,42,,,,,,,,,,,,,',
',,,,,,42,,,42,,,42,42,,,42,,,,,,42,,,,,,,,42,,,,,42,42,42,42,42,42,',
',,42,42,43,43,43,,43,,,,43,43,,,,43,,43,43,43,43,43,43,43,,,,,43,43',
'43,43,43,43,43,,,,,,,,,,43,,,43,43,43,43,43,43,43,43,43,43,,43,43,,43',
'43,43,,,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,43,,,,',
'43,43,43,43,43,43,,,,43,43,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55',
'55,55,55,,,,,55,55,55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55',
'55,55,55,55,,55,55,,55,55,55,,,,,,,,,,,,,,,,,,,,55,,,55,,,55,55,,,55',
',,,,,55,,,,,,,,55,,,,,55,55,55,55,55,55,,,,55,55,56,56,56,,56,,,,56',
'56,,,,56,,56,56,56,56,56,56,56,,,,,56,56,56,56,56,56,56,,,,,,,,,,56',
',,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56,,,,,,,,,,,,,,,,,,,',
'56,,,56,,,56,56,,,56,,56,,,,56,,,,,,,,56,,,,,56,56,56,56,56,56,,,,56',
'56,59,59,59,,59,,,,59,59,,,,59,,59,59,59,59,59,59,59,,,,,59,59,59,59',
'59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,,59,59,,59,59',
'59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,,,,,59,,,,,,,,59,,,,,59',
'59,59,59,59,59,,,,59,59,60,60,60,,60,,,,60,60,,,,60,,60,60,60,60,60',
'60,60,,,,,60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60',
'60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,',
',,,60,,,,,,,,60,,,,,60,60,60,60,60,60,,,,60,60,64,64,64,,64,,,,64,64',
',,,64,,64,64,64,64,64,64,64,,,,,64,64,64,64,64,64,64,,,,,,,,,,64,,,64',
'64,64,64,64,64,64,64,64,64,,64,64,,,,64,,,,,,,,,,,,,,,,,,,,64,,,64,',
',64,64,,,64,,64,,,,,,,,,,,,,,,,,64,64,64,64,64,64,,,,64,64,85,85,85',
',85,,,,85,85,,,,85,,85,85,85,85,85,85,85,,85,,,85,85,85,85,85,85,85',
',,,,,,,,,85,,,85,85,85,85,85,85,85,85,85,85,,85,85,,85,85,85,,,,,,,',
',,,,,,,,,,,,85,,,85,85,,85,85,,,85,,85,,85,,85,,,,,,,,85,,85,,,85,85',
'85,85,85,85,,,,85,85,88,88,88,,88,,,,88,88,,,,88,,88,88,88,88,88,88',
'88,,88,,,88,88,88,88,88,88,88,,,,,,,,,,88,,,88,88,88,88,88,88,88,88',
'88,88,,88,88,,88,88,88,,,,,,,,,,,,,,,,,,,,88,,,88,88,,88,88,,,88,,88',
',88,,88,,,,,,,,88,,88,,,88,88,88,88,88,88,,,,88,88,104,104,104,,104',
',,,104,104,,,,104,,104,104,104,104,104,104,104,,,,,104,104,104,104,104',
'104,104,,,104,,,,,,,104,,,104,104,104,104,104,104,104,104,104,104,,104',
'104,,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104,,,104,104,,,104,,,,,,104',
',,,,,,,104,,,,,104,104,104,104,104,104,,,,104,104,105,105,105,,105,',
',,105,105,,,,105,,105,105,105,105,105,105,105,,,,,105,105,105,105,105',
'105,105,,,105,,,,,,,105,,,105,105,105,105,105,105,105,105,105,105,,105',
'105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,105,,,105,,,,,,105',
',,,,,,,105,,,,,105,105,105,105,105,105,,,,105,105,106,106,106,,106,',
',,106,106,,,,106,,106,106,106,106,106,106,106,,,,,106,106,106,106,106',
'106,106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,106,106,106,,106',
'106,,106,106,106,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,106,,,106,,,,,,106',
',,,,,,,106,,,,,106,106,106,106,106,106,,,,106,106,107,107,107,,107,',
',,107,107,,,,107,,107,107,107,107,107,107,107,,,,,107,107,107,107,107',
'107,107,,,107,,,,,,,107,,,107,107,107,107,107,107,107,107,107,107,,107',
'107,,107,107,107,,,,,,,,,,,,,,,,,,,,107,,,107,,,107,107,,,107,,,,,,107',
',,,,,,,107,,,,,107,107,107,107,107,107,,,,107,107,108,108,108,108,108',
',,,108,108,,,,108,,108,108,108,108,108,108,108,,,,,108,108,108,108,108',
'108,108,,,108,,,,,,108,108,108,108,108,108,108,108,108,108,108,108,108',
'108,,108,108,,108,108,108,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,,108',
',108,,,,108,,,,,,,,108,,,,,108,108,108,108,108,108,,,,108,108,191,191',
'191,,191,,,,191,191,,,,191,,191,191,191,191,191,191,191,,,,,191,191',
'191,191,191,191,191,,,,,,,,,,191,,,191,191,191,191,191,191,191,191,191',
'191,,191,191,,191,191,191,,,,,,,,,,,,,,,,,,,,191,,,191,,,191,191,,,191',
',191,,,,191,,,,,,,,191,,,,,191,191,191,191,191,191,,,,191,191,192,192',
'192,,192,,,,192,192,,,,192,,192,192,192,192,192,192,192,,,,,192,192',
'192,192,192,192,192,,,,,,,,,,192,,,192,192,192,192,192,192,192,192,192',
'192,,192,192,,192,192,192,,,,,,,,,,,,,,,,,,,,192,,,192,,,192,192,,,192',
',192,,,,192,,,,,,,,192,,,,,192,192,192,192,192,192,,,,192,192,193,193',
'193,,193,,,,193,193,,,,193,,193,193,193,193,193,193,193,,,,,193,193',
'193,193,193,193,193,,,,,,,,,,193,,,193,193,193,193,193,193,193,193,193',
'193,,193,193,,193,193,193,,,,,,,,,,,,,,,,,,,,193,,,193,,,193,193,,,193',
',,,,,193,,,,,,,,193,,,,,193,193,193,193,193,193,,,,193,193,194,194,194',
',194,,,,194,194,,,,194,,194,194,194,194,194,194,194,,,,,194,194,194',
'194,194,194,194,,,,,,,,,,194,,,194,194,194,194,194,194,194,194,194,194',
',194,194,,194,194,194,,,,,,,,,,,,,,,,,,,,194,,,194,,,194,194,,,194,',
'194,,,,194,,,,,,,,194,,,,,194,194,194,194,194,194,,,,194,194,197,197',
'197,,197,,,,197,197,,,,197,,197,197,197,197,197,197,197,,,,,197,197',
'197,197,197,197,197,,,,,,,,,,197,,,197,197,197,197,197,197,197,197,197',
'197,,197,197,,197,197,197,,,,,,,,,,,,,,,,,,,,197,,,197,,,197,197,,,197',
',,,,,197,,,,,,,,197,,,,,197,197,197,197,197,197,,,,197,197,198,198,198',
',198,,,,198,198,,,,198,,198,198,198,198,198,198,198,,,,,198,198,198',
'198,198,198,198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,198,198',
'198,,198,198,,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,,198,198,,,198',
',,,,,198,,,,,,,,198,,,,,198,198,198,198,198,198,,,,198,198,199,199,199',
',199,,,,199,199,,,,199,,199,199,199,199,199,199,199,,,,,199,199,199',
'199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199,199,199,199,199',
'199,,199,199,,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199,,,199,199,,,199',
',,,,,199,,,,,,,,199,,,,,199,199,199,199,199,199,,,,199,199,210,210,210',
',210,,,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,210,210,210',
'210,210,210,210,,,,,,,,,,210,,,210,210,210,210,210,210,210,210,210,210',
',210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,',
',,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,211,211,211',
',211,,,,211,211,,,,211,,211,211,211,211,211,211,211,,,,,211,211,211',
'211,211,211,211,,,,,,,,,,211,,,211,211,211,211,211,211,211,211,211,211',
',211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,',
',,,,211,,,,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,212,212,212',
',212,,,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,212,212,212',
'212,212,212,212,,,,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212',
',212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,',
',,,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,213,213,213',
',213,,,,213,213,,,,213,,213,213,213,213,213,213,213,,,,,213,213,213',
'213,213,213,213,,,,,,,,,,213,,,213,213,213,213,213,213,213,213,213,213',
',213,213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213,,,213,213,,,213,',
',,,,213,,,,,,,,213,,,,,213,213,213,213,213,213,,,,213,213,214,214,214',
',214,,,,214,214,,,,214,,214,214,214,214,214,214,214,,,,,214,214,214',
'214,214,214,214,,,,,,,,,,214,,,214,214,214,214,214,214,214,214,214,214',
',214,214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,',
',,,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214,215,215,215',
',215,,,,215,215,,,,215,,215,215,215,215,215,215,215,,,,,215,215,215',
'215,215,215,215,,,,,,,,,,215,,,215,215,215,215,215,215,215,215,215,215',
',215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,',
',,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215,215,216,216,216',
',216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,216,216,216',
'216,216,216,216,,,,,,,,,,216,,,216,216,216,216,216,216,216,216,216,216',
',216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,',
',,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,217,217,217',
',217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,217,217,217',
'217,217,217,217,,,,,,,,,,217,,,217,217,217,217,217,217,217,217,217,217',
',217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,',
',,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217,218,218,218',
',218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,218,218,218',
'218,218,218,218,,,,,,,,,,218,,,218,218,218,218,218,218,218,218,218,218',
',218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,',
',,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218,219,219,219',
',219,,,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,219,219,219',
'219,219,219,219,,,,,,,,,,219,,,219,219,219,219,219,219,219,219,219,219',
',219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,',
',,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,220,220,220',
',220,,,,220,220,,,,220,,220,220,220,220,220,220,220,,,,,220,220,220',
'220,220,220,220,,,,,,,,,,220,,,220,220,220,220,220,220,220,220,220,220',
',220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,',
',,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,221,221,221',
',221,,,,221,221,,,,221,,221,221,221,221,221,221,221,,,,,221,221,221',
'221,221,221,221,,,,,,,,,,221,,,221,221,221,221,221,221,221,221,221,221',
',221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,',
',,,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,222,222,222',
',222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,,222,222,222',
'222,222,222,222,,,,,,,,,,222,,,222,222,222,222,222,222,222,222,222,222',
',222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,',
',,,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,223,223,223',
',223,,,,223,223,,,,223,,223,223,223,223,223,223,223,,,,,223,223,223',
'223,223,223,223,,,,,,,,,,223,,,223,223,223,223,223,223,223,223,223,223',
',223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223,223,,,223,',
',,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223,224,224,224',
',224,,,,224,224,,,,224,,224,224,224,224,224,224,224,,,,,224,224,224',
'224,224,224,224,,,,,,,,,,224,,,224,224,224,224,224,224,224,224,224,224',
',224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224,,,224,224,,,224,',
',,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224,225,225,225',
',225,,,,225,225,,,,225,,225,225,225,225,225,225,225,,,,,225,225,225',
'225,225,225,225,,,,,,,,,,225,,,225,225,225,225,225,225,225,225,225,225',
',225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,225,,,225,',
',,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225,226,226,226',
',226,,,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,226,226,226',
'226,226,226,226,,,,,,,,,,226,,,226,226,226,226,226,226,226,226,226,226',
',226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,',
',,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,227,227,227',
',227,,,,227,227,,,,227,,227,227,227,227,227,227,227,,,,,227,227,227',
'227,227,227,227,,,,,,,,,,227,,,227,227,227,227,227,227,227,227,227,227',
',227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,',
',,,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,228,228,228',
',228,,,,228,228,,,,228,,228,228,228,228,228,228,228,,,,,228,228,228',
'228,228,228,228,,,,,,,,,,228,,,228,228,228,228,228,228,228,228,228,228',
',228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228,',
',,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,229,229,229',
',229,,,,229,229,,,,229,,229,229,229,229,229,229,229,,,,,229,229,229',
'229,229,229,229,,,,,,,,,,229,,,229,229,229,229,229,229,229,229,229,229',
',229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,229,,,229,',
',,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,230,230,230',
',230,,,,230,230,,,,230,,230,230,230,230,230,230,230,,,,,230,230,230',
'230,230,230,230,,,,,,,,,,230,,,230,230,230,230,230,230,230,230,230,230',
',230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,',
',,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230,231,231,231',
',231,,,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,231,231,231',
'231,231,231,231,,,,,,,,,,231,,,231,231,231,231,231,231,231,231,231,231',
',231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,',
',,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,232,232,232',
',232,,,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,232,232,232',
'232,232,232,232,,,,,,,,,,232,,,232,232,232,232,232,232,232,232,232,232',
',232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,',
',,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,233,233,233',
',233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,233,233,233',
'233,233,233,233,,,,,,,,,,233,,,233,233,233,233,233,233,233,233,233,233',
',233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,',
',,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,234,234,234',
',234,,,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,234,234,234',
'234,234,234,234,,,,,,,,,,234,,,234,234,234,234,234,234,234,234,234,234',
',234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,',
',,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,235,235,235',
',235,,,,235,235,,,,235,,235,235,235,235,235,235,235,,,,,235,235,235',
'235,235,235,235,,,,,,,,,,235,,,235,235,235,235,235,235,235,235,235,235',
',235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,',
',,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,236,236,236',
',236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,,236,236,236',
'236,236,236,236,,,,,,,,,,236,,,236,236,236,236,236,236,236,236,236,236',
',236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,',
',,,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,244,244,244',
',244,,,,244,244,,,,244,,244,244,244,244,244,244,244,,,,,244,244,244',
'244,244,244,244,,,,,,,,,,244,,,244,244,244,244,244,244,244,244,244,244',
',244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,',
',,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,246,246,246',
',246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,246,246,246',
'246,246,246,246,,,,,,,,,,246,,,246,246,246,246,246,246,246,246,246,246',
',246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,',
',,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,257,257,257',
',257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,257,257,257',
'257,257,257,257,,,,,,,,,,257,,,257,257,257,257,257,257,257,257,257,257',
',257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,',
'257,,257,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,263',
'263,263,,263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,263',
'263,263,263,263,263,263,,,,,,,,,,263,,,263,263,263,263,263,263,263,263',
'263,263,,263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263',
',,263,,263,,263,,263,,,,,,,,263,,,,,263,263,263,263,263,263,,,,263,263',
'266,266,266,,266,,,,266,266,,,,266,,266,266,266,266,266,266,266,,,,',
'266,266,266,266,266,266,266,,,,,,,,,,266,,,266,266,266,266,266,266,266',
'266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,266',
'266,266,,,266,,266,,266,,266,,,,,,,,266,,,,,266,266,266,266,266,266',
',,,266,266,272,272,272,,272,,,,272,272,,,,272,,272,272,272,272,272,272',
'272,,,,,272,272,272,272,272,272,272,,,,,,,,,,272,,,272,272,272,272,272',
'272,272,272,272,272,,272,272,,,,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272',
'272,,,272,,,,,,,,,,,,,,,,,,,272,272,272,272,272,272,,,,272,272,293,293',
'293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,,293,293',
'293,293,293,293,293,,,,,,,,,,293,,,293,293,293,293,293,293,293,293,293',
'293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,293,,293,293',
',,293,,,,,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293,293,301',
'301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,301',
'301,301,301,301,301,301,,,,,,,,,,301,,,301,301,301,301,301,301,301,301',
'301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301',
',,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301,303',
'303,303,,303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,303',
'303,303,303,303,303,303,,,,,,,,,,303,,,303,303,303,303,303,303,303,303',
'303,303,,303,303,,303,303,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303',
',,303,,,,,,303,,,,,,,,303,,,,,303,303,303,303,303,303,,,,303,303,308',
'308,308,,308,,,,308,308,,,,308,,308,308,308,308,308,308,308,,,,,308',
'308,308,308,308,308,308,,,308,,,,,,,308,,,308,308,308,308,308,308,308',
'308,308,308,,308,308,,308,308,308,,,,,,,,,,,,,,,,,,,,308,,,308,,,308',
'308,,,308,,,,,,308,,,,,,,,308,,,,,308,308,308,308,308,308,,,,308,308',
'309,309,309,,309,,,,309,309,,,,309,,309,309,309,309,309,309,309,,,,',
'309,309,309,309,309,309,309,,,309,,,,,,,309,,,309,309,309,309,309,309',
'309,309,309,309,,309,309,,309,309,309,,,,,,,,,,,,,,,,,,,,309,,,309,',
',309,309,,,309,,,,,,309,,,,,,,,309,,,,,309,309,309,309,309,309,,,,309',
'309,320,320,320,,320,,,,320,320,,,,320,,320,320,320,320,320,320,320',
',,,,320,320,320,320,320,320,320,,,,,,,,,,320,,,320,320,320,320,320,320',
'320,320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320',
',,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320,320,322,322,322',
',322,,,,322,322,,,,322,,322,322,322,322,322,322,322,,,,,322,322,322',
'322,322,322,322,,,,,,,,,,322,,,322,322,322,322,322,322,322,322,322,322',
',322,322,,,,322,,,,,,,,,,,,,,,,,,,,322,,,322,,,322,322,,,322,,,,,,,',
',,,,,,,,,,,322,322,322,322,322,322,,,,322,322,361,361,361,361,361,361',
'361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361,361',
'361,,,361,361,361,361,361,361,361,361,361,361,,,,,,361,361,361,361,361',
'361,361,361,,,361,,,,,,,,361,361,,361,361,361,361,,361,361,,,361,,,',
',361,361,361,361,,,,,,,,,,,,,,361,361,,361,361,361,361,361,361,361,361',
'361,,361,,,361,361,,,373,373,373,,373,,,361,373,373,,,,373,,373,373',
'373,373,373,373,373,,,,,373,373,373,373,373,373,373,,,,,,,,,,373,,,373',
'373,373,373,373,373,373,373,373,373,,373,373,,373,373,373,,,,,,,,,,',
',,,,,,,,,373,,,373,,,373,373,,,373,,,,,,373,,,,,,,,373,,,,,373,373,373',
'373,373,373,,,,373,373,382,382,382,,382,,,,382,382,,,,382,,382,382,382',
'382,382,382,382,,,,,382,382,382,382,382,382,382,,,,,,,,,,382,,,382,382',
'382,382,382,382,382,382,382,382,,382,382,,382,382,382,,,,,,,,,,,,,,',
',,,,,382,,,382,382,,382,382,,,382,,382,,382,,382,,,,,,,,382,,,,,382',
'382,382,382,382,382,,,,382,382,389,389,389,,389,,,,389,389,,,,389,,389',
'389,389,389,389,389,389,,,,,389,389,389,389,389,389,389,,,,,,,,,,389',
',,389,389,389,389,389,389,389,389,389,389,,389,389,,389,389,389,,,,',
',,,,,,,,,,,,,,,389,,,389,389,,389,389,,,389,,389,,389,,389,,,,,,,,389',
',,,,389,389,389,389,389,389,,,,389,389,390,390,390,,390,,,,390,390,',
',,390,,390,390,390,390,390,390,390,,,,,390,390,390,390,390,390,390,',
',,,,,,,,390,,,390,390,390,390,390,390,390,390,390,390,,390,390,,390',
'390,390,,,,,,,,,,,,,,,,,,,,390,,,390,390,,390,390,,,390,,390,,390,,390',
',,,,,,,390,,,,,390,390,390,390,390,390,,,,390,390,397,397,397,,397,',
',,397,397,,,,397,,397,397,397,397,397,397,397,,,,,397,397,397,397,397',
'397,397,,,,,,,,,,397,,,397,397,397,397,397,397,397,397,397,397,,397',
'397,,397,397,397,,,,,,,,,,,,,,,,,,,,397,,,397,,,397,397,,,397,,397,',
',,397,,,,,,,,397,,,,,397,397,397,397,397,397,,,,397,397,399,399,399',
',399,,,,399,399,,,,399,,399,399,399,399,399,399,399,,,,,399,399,399',
'399,399,399,399,,,,,,,,,,399,,,399,399,399,399,399,399,399,399,399,399',
',399,399,,399,399,399,,,,,,,,,,,,,,,,,,,,399,,,399,,,399,399,,,399,',
',,,,399,,,,,,,,399,,,,,399,399,399,399,399,399,,,,399,399,400,400,400',
',400,,,,400,400,,,,400,,400,400,400,400,400,400,400,,,,,400,400,400',
'400,400,400,400,,,,,,,,,,400,,,400,400,400,400,400,400,400,400,400,400',
',400,400,,400,400,400,,,,,,,,,,,,,,,,,,,,400,,,400,,,400,400,,,400,',
',,,,400,,,,,,,,400,,,,,400,400,400,400,400,400,,,,400,400,401,401,401',
',401,,,,401,401,,,,401,,401,401,401,401,401,401,401,,,,,401,401,401',
'401,401,401,401,,,,,,,,,,401,,,401,401,401,401,401,401,401,401,401,401',
',401,401,,401,401,401,,,,,,,,,,,,,,,,,,,,401,,,401,,,401,401,,,401,',
',,,,401,,,,,,,,401,,,,,401,401,401,401,401,401,,,,401,401,430,430,430',
',430,,,,430,430,,,,430,,430,430,430,430,430,430,430,,,,,430,430,430',
'430,430,430,430,,,,,,,,,,430,,,430,430,430,430,430,430,430,430,430,430',
',430,430,,430,430,430,,,,,,,,,,,,,,,,,,,,430,,,430,,,430,430,,,430,',
'430,,430,,430,,,,,,,,430,,,,,430,430,430,430,430,430,,,,430,430,433',
'433,433,,433,,,,433,433,,,,433,,433,433,433,433,433,433,433,,,,,433',
'433,433,433,433,433,433,,,,,,,,,,433,,,433,433,433,433,433,433,433,433',
'433,433,,433,433,,433,433,433,,,,,,,,,,,,,,,,,,,,433,,,433,,,433,433',
',,433,,433,,433,,433,,,,,,,,433,,,,,433,433,433,433,433,433,,,,433,433',
'436,436,436,,436,,,,436,436,,,,436,,436,436,436,436,436,436,436,,,,',
'436,436,436,436,436,436,436,,,,,,,,,,436,,,436,436,436,436,436,436,436',
'436,436,436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436',
'436,,,436,,,,,,436,,,,,,,,436,,,,,436,436,436,436,436,436,,,,436,436',
'445,445,445,,445,,,,445,445,,,,445,,445,445,445,445,445,445,445,,,,',
'445,445,445,445,445,445,445,,,445,,,,,,,445,,,445,445,445,445,445,445',
'445,445,445,445,,445,445,,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,',
',445,445,,,445,,445,,445,,445,,,,,,,,445,,,,,445,445,445,445,445,445',
',,,445,445,462,462,462,,462,,,,462,462,,,,462,,462,462,462,462,462,462',
'462,,,,,462,462,462,462,462,462,462,,,,,,,,,,462,,,462,462,462,462,462',
'462,462,462,462,462,,462,462,,462,462,462,,,,,,,,,,,,,,,,,,,,462,,,462',
',,462,462,,,462,,462,,,,462,,,,,,,,462,,,,,462,462,462,462,462,462,',
',,462,462,469,469,469,,469,,,,469,469,,,,469,,469,469,469,469,469,469',
'469,,,,,469,469,469,469,469,469,469,,,,,,,,,,469,,,469,469,469,469,469',
'469,469,469,469,469,,469,469,,469,469,469,,,,,,,,,,,,,,,,,,,,469,,,469',
',,469,469,,,469,,,,,,469,,,,,,,,469,,,,,469,469,469,469,469,469,,,,469',
'469,470,470,470,,470,,,,470,470,,,,470,,470,470,470,470,470,470,470',
',,,,470,470,470,470,470,470,470,,,,,,,,,,470,,,470,470,470,470,470,470',
'470,470,470,470,,470,470,,470,470,470,,,,,,,,,,,,,,,,,,,,470,,,470,',
',470,470,,,470,,,,,,470,,,,,,,,470,,,,,470,470,470,470,470,470,,,,470',
'470,471,471,471,,471,,,,471,471,,,,471,,471,471,471,471,471,471,471',
',,,,471,471,471,471,471,471,471,,,,,,,,,,471,,,471,471,471,471,471,471',
'471,471,471,471,,471,471,,471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471,',
',471,471,,,471,,,,,,471,,,,,,,,471,,,,,471,471,471,471,471,471,,,,471',
'471,475,475,475,,475,,,,475,475,,,,475,,475,475,475,475,475,475,475',
',,,,475,475,475,475,475,475,475,,,475,,,,,,,475,,,475,475,475,475,475',
'475,475,475,475,475,,475,475,,475,475,475,,,,,,,,,,,,,,,,,,,,475,,,475',
',,475,475,,,475,,,,,,475,,,,,,,,475,,,,,475,475,475,475,475,475,,,,475',
'475,481,481,481,,481,,,,481,481,,,,481,,481,481,481,481,481,481,481',
',,,,481,481,481,481,481,481,481,,,,,,,,,,481,,,481,481,481,481,481,481',
'481,481,481,481,,481,481,,481,481,481,,,,,,,,,,,,,,,,,,,,481,,,481,',
',481,481,,,481,,481,,,,481,,,,,,,,481,,,,,481,481,481,481,481,481,,',
',481,481,484,484,484,,484,,,,484,484,,,,484,,484,484,484,484,484,484',
'484,,,,,484,484,484,484,484,484,484,,,,,,,,,,484,,,484,484,484,484,484',
'484,484,484,484,484,,484,484,,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484',
',,484,484,,,484,,,,,,484,,,,,,,,484,,,,,484,484,484,484,484,484,,,,484',
'484,502,502,502,,502,,,,502,502,,,,502,,502,502,502,502,502,502,502',
',,,,502,502,502,502,502,502,502,,,,,,,,,,502,,,502,502,502,502,502,502',
'502,502,502,502,,502,502,,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,',
',502,502,,,502,,502,,,,502,,,,,,,,502,,,,,502,502,502,502,502,502,,',
',502,502,514,514,514,,514,,,,514,514,,,,514,,514,514,514,514,514,514',
'514,,,,,514,514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514,514',
'514,514,514,514,514,514,,514,514,,514,514,514,,,,,,,,,,,,,,,,,,,,514',
',,514,,,514,514,,,514,,,,,,514,,,,,,,,514,,,,,514,514,514,514,514,514',
',,,514,514,520,520,520,,520,,,,520,520,,,,520,,520,520,520,520,520,520',
'520,,,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520',
'520,520,520,520,520,520,,520,520,,520,520,520,,,,,,,,,,,,,,,,,,,,520',
',,520,,,520,520,,,520,,,,,,520,,,,,,,,520,,,,,520,520,520,520,520,520',
',,,520,520,538,538,538,538,538,538,538,538,538,538,538,538,538,538,538',
'538,538,538,538,538,538,538,538,538,,,538,538,538,538,538,538,538,538',
'538,538,,,,,,538,538,538,538,538,538,538,538,,,538,,,,,,,,538,538,,538',
'538,538,538,,538,538,,,538,,,,,538,538,538,538,,,,,,,,,,,,,,538,538',
',538,538,538,538,538,538,538,538,538,,538,,,538,538,,,541,541,541,,541',
',,538,541,541,,,,541,,541,541,541,541,541,541,541,,,,,541,541,541,541',
'541,541,541,,,,,,,,,,541,,,541,541,541,541,541,541,541,541,541,541,',
'541,541,,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,,',
',,,541,,,,,,,,541,,,,,541,541,541,541,541,541,,,,541,541,542,542,542',
',542,,,,542,542,,,,542,,542,542,542,542,542,542,542,,,,,542,542,542',
'542,542,542,542,,,,,,,,,,542,,,542,542,542,542,542,542,542,542,542,542',
',542,542,,542,542,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542,,,542,',
'542,,,,542,,,,,,,,542,,,,,542,542,542,542,542,542,,,,542,542,545,545',
'545,,545,,,,545,545,,,,545,,545,545,545,545,545,545,545,,,,,545,545',
'545,545,545,545,545,,,,,,,,,,545,,,545,545,545,545,545,545,545,545,545',
'545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545',
',,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545,546,546,546',
',546,,,,546,546,,,,546,,546,546,546,546,546,546,546,,,,,546,546,546',
'546,546,546,546,,,,,,,,,,546,,,546,546,546,546,546,546,546,546,546,546',
',546,546,,546,546,546,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,546,,,546,',
',,,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546,546,551,551,551',
',551,,,,551,551,,,,551,,551,551,551,551,551,551,551,,,,,551,551,551',
'551,551,551,551,,,,,,,,,,551,,,551,551,551,551,551,551,551,551,551,551',
',551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551,551,,,551,',
',,,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551,551,554,554,554',
',554,,,,554,554,,,,554,,554,554,554,554,554,554,554,,,,,554,554,554',
'554,554,554,554,,,,,,,,,,554,,,554,554,554,554,554,554,554,554,554,554',
',554,554,,554,554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,,554,',
',,,,554,,,,,,,,554,,,,,554,554,554,554,554,554,,,,554,554,561,561,561',
',561,,,,561,561,,,,561,,561,561,561,561,561,561,561,,,,,561,561,561',
'561,561,561,561,,,,,,,,,,561,,,561,561,561,561,561,561,561,561,561,561',
',561,561,,561,561,561,,,,,,,,,,,,,,,,,,,,561,,,561,,,561,561,,,561,',
',,,,561,,,,,,,,561,,,,,561,561,561,561,561,561,,,,561,561,563,563,563',
',563,,,,563,563,,,,563,,563,563,563,563,563,563,563,,,,,563,563,563',
'563,563,563,563,,,,,,,,,,563,,,563,563,563,563,563,563,563,563,563,563',
',563,563,,,,563,,,,,,,,,,,,,,,,,,,,563,,,563,,,563,563,,,563,,563,,563',
',,,,,,,,563,,,,,,563,563,563,563,563,563,,,,563,563,566,566,566,,566',
',,,566,566,,,,566,,566,566,566,566,566,566,566,,,,,566,566,566,566,566',
'566,566,,,,,,,,,,566,,,566,566,566,566,566,566,566,566,566,566,,566',
'566,,566,566,566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,,566,,,,,,566',
',,,,,,,566,,,,,566,566,566,566,566,566,,,,566,566,570,570,570,,570,',
',,570,570,,,,570,,570,570,570,570,570,570,570,,,,,570,570,570,570,570',
'570,570,,,,,,,,,,570,,,570,570,570,570,570,570,570,570,570,570,,570',
'570,,570,570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,,,,,570',
',,,,,,,570,,,,,570,570,570,570,570,570,,,,570,570,584,584,584,,584,',
',,584,584,,,,584,,584,584,584,584,584,584,584,,,,,584,584,584,584,584',
'584,584,,,,,,,,,,584,,,584,584,584,584,584,584,584,584,584,584,,584',
'584,,584,584,584,,,,,,,,,,,,,,,,,,,,584,,,584,,,584,584,,,584,,,,,,584',
',,,,,,,584,,,,,584,584,584,584,584,584,,,,584,584,595,595,595,,595,',
',,595,595,,,,595,,595,595,595,595,595,595,595,,,,,595,595,595,595,595',
'595,595,,,,,,,,,,595,,,595,595,595,595,595,595,595,595,595,595,,595',
'595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,,595,,595,',
'595,,595,,,,,,,,595,,,,,595,595,595,595,595,595,,,,595,595,611,611,611',
',611,,,,611,611,,,,611,,611,611,611,611,611,611,611,,,,,611,611,611',
'611,611,611,611,,,,,,,,,,611,,,611,611,611,611,611,611,611,611,611,611',
',611,611,,611,611,611,,,,,,,,,,,,,,,,,,,,611,,,611,,,611,611,,,611,',
'611,,,,611,,,,,,,,611,,,,,611,611,611,611,611,611,,,,611,611,614,614',
'614,,614,,,,614,614,,,,614,,614,614,614,614,614,614,614,,,,,614,614',
'614,614,614,614,614,,,,,,,,,,614,,,614,614,614,614,614,614,614,614,614',
'614,,614,614,,614,614,614,,,,,,,,,,,,,,,,,,,,614,,,614,,,614,614,,,614',
',,,,,614,,,,,,,,614,,,,,614,614,614,614,614,614,,,,614,614,617,617,617',
',617,,,,617,617,,,,617,,617,617,617,617,617,617,617,,,,,617,617,617',
'617,617,617,617,,,,,,,,,,617,,,617,617,617,617,617,617,617,617,617,617',
',617,617,,617,617,617,,,,,,,,,,,,,,,,,,,,617,,,617,,,617,617,,,617,',
',,,,617,,,,,,,,617,,,,,617,617,617,617,617,617,,,,617,617,632,632,632',
',632,,,,632,632,,,,632,,632,632,632,632,632,632,632,,,,,632,632,632',
'632,632,632,632,,,,,,,,,,632,,,632,632,632,632,632,632,632,632,632,632',
',632,632,,632,632,632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,',
'632,,,,632,,,,,,,,632,,,,,632,632,632,632,632,632,,,,632,632,638,638',
'638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638,,,,,638,638',
'638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638,638,638',
'638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638,,,638,638',
',,638,,,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638,,,,638,638,643',
'643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,643',
'643,643,643,643,643,643,,,,,,,,,,643,,,643,643,643,643,643,643,643,643',
'643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643',
',,643,,643,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643,643',
'682,682,682,,682,,,,682,682,,,,682,,682,682,682,682,682,682,682,,,,',
'682,682,682,682,682,682,682,,,,,,,,,,682,,,682,682,682,682,682,682,682',
'682,682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682',
'682,,,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682,,,,682,682',
'683,683,683,,683,,,,683,683,,,,683,,683,683,683,683,683,683,683,,,,',
'683,683,683,683,683,683,683,,,,,,,,,,683,,,683,683,683,683,683,683,683',
'683,683,683,,683,683,,683,683,683,,,,,,,,,,,,,,,,,,,,683,,,683,,,683',
'683,,,683,,,,,,683,,,,,,,,683,,,,,683,683,683,683,683,683,,,,683,683',
'693,693,693,,693,,,,693,693,,,,693,,693,693,693,693,693,693,693,,,,',
'693,693,693,693,693,693,693,,,,,,,,,,693,,,693,693,693,693,693,693,693',
'693,693,693,,693,693,,693,693,693,,,,,,,,,,,,,,,,,,,,693,,,693,,,693',
'693,,,693,,,,,,693,,,,,,,,693,,,,,693,693,693,693,693,693,,,,693,693',
'694,694,694,,694,,,,694,694,,,,694,,694,694,694,694,694,694,694,,,,',
'694,694,694,694,694,694,694,,,,,,,,,,694,,,694,694,694,694,694,694,694',
'694,694,694,,694,694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694',
'694,,,694,,,,,,694,,,,,,,,694,,,,,694,694,694,694,694,694,,,,694,694',
'695,695,695,,695,,,,695,695,,,,695,,695,695,695,695,695,695,695,,,,',
'695,695,695,695,695,695,695,,,,,,,,,,695,,,695,695,695,695,695,695,695',
'695,695,695,,695,695,,695,695,695,,,,,,,,,,,,,,,,,,,,695,,,695,,,695',
'695,,,695,,,,,,695,,,,,,,,695,,,,,695,695,695,695,695,695,,,,695,695',
'701,701,701,,701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,',
'701,701,701,701,701,701,701,,,,,,,,,,701,,,701,701,701,701,701,701,701',
'701,701,701,,701,701,,,,701,,,,,,,,,,,,,,,,,,,,701,,,701,,,701,701,',
',701,,,,,,,,,,,,,,,,,,,701,701,701,701,701,701,,,,701,701,707,707,707',
',707,,,,707,707,,,,707,,707,707,707,707,707,707,707,,,,,707,707,707',
'707,707,707,707,,,,,,,,,,707,,,707,707,707,707,707,707,707,707,707,707',
',707,707,,707,707,707,,,,,,,,,,,,,,,,,,,,707,,,707,,,707,707,,,707,',
'707,,707,,707,,,,,,,,707,,,,,707,707,707,707,707,707,,,,707,707,710',
'710,710,,710,,,,710,710,,,,710,,710,710,710,710,710,710,710,,,,,710',
'710,710,710,710,710,710,,,,,,,,,,710,,,710,710,710,710,710,710,710,710',
'710,710,,710,710,,710,710,710,,,,,,,,,,,,,,,,,,,,710,,,710,,,710,710',
',,710,,710,,710,,710,,,,,,,,710,,,,,710,710,710,710,710,710,,,,710,710',
'712,712,712,,712,,,,712,712,,,,712,,712,712,712,712,712,712,712,,,,',
'712,712,712,712,712,712,712,,,,,,,,,,712,,,712,712,712,712,712,712,712',
'712,712,712,,712,712,,712,712,712,,,,,,,,,,,,,,,,,,,,712,,,712,,,712',
'712,,,712,,712,,712,,712,,,,,,,,712,,,,,712,712,712,712,712,712,,,,712',
'712,737,737,737,,737,,,,737,737,,,,737,,737,737,737,737,737,737,737',
',,,,737,737,737,737,737,737,737,,,737,,,,,,,737,,,737,737,737,737,737',
'737,737,737,737,737,,737,737,,737,737,737,,,,,,,,,,,,,,,,,,,,737,,,737',
',,737,737,,,737,,,,,,737,,,,,,,,737,,,,,737,737,737,737,737,737,,,,737',
'737,745,745,745,,745,,,,745,745,,,,745,,745,745,745,745,745,745,745',
',,,,745,745,745,745,745,745,745,,,,,,,,,,745,,,745,745,745,745,745,745',
'745,745,745,745,,745,745,,745,745,745,,,,,,,,,,,,,,,,,,,,745,,,745,',
',745,745,,,745,,,,,,745,,,,,,,,745,,,,,745,745,745,745,745,745,,,,745',
'745,753,753,753,,753,,,,753,753,,,,753,,753,753,753,753,753,753,753',
',,,,753,753,753,753,753,753,753,,,753,,,,,,,753,,,753,753,753,753,753',
'753,753,753,753,753,,753,753,,753,753,753,,,,,,,,,,,,,,,,,,,,753,,,753',
',,753,753,,,753,,,,,,753,,,,,,,,753,,,,,753,753,753,753,753,753,,,,753',
'753,766,766,766,,766,,,,766,766,,,,766,,766,766,766,766,766,766,766',
',,,,766,766,766,766,766,766,766,,,,,,,,,,766,,,766,766,766,766,766,766',
'766,766,766,766,,766,766,,766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766,',
',766,766,,,766,,,,,,766,,,,,,,,766,,,,,766,766,766,766,766,766,,,,766',
'766,780,780,780,,780,,,,780,780,,,,780,,780,780,780,780,780,780,780',
',,,,780,780,780,780,780,780,780,,,,,,,,,,780,,,780,780,780,780,780,780',
'780,780,780,780,,780,780,,780,780,780,,,,,,,,,,,,,,,,,,,,780,,,780,',
',780,780,,,780,,,,,,780,,,,,,,,780,,,,,780,780,780,780,780,780,,,,780',
'780,781,781,781,,781,,,,781,781,,,,781,,781,781,781,781,781,781,781',
',,,,781,781,781,781,781,781,781,,,,,,,,,,781,,,781,781,781,781,781,781',
'781,781,781,781,,781,781,,,,781,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,781',
',,781,,781,,781,,,,,,,,,,,,,,,781,781,781,781,781,781,,,,781,781,792',
'792,792,,792,,,,792,792,,,,792,,792,792,792,792,792,792,792,,,,,792',
'792,792,792,792,792,792,,,,,,,,,,792,,,792,792,792,792,792,792,792,792',
'792,792,,792,792,,792,792,792,,,,,,,,,,,,,,,,,,,,792,,,792,,,792,792',
',,792,,,,,,792,,,,,,,,792,,,,,792,792,792,792,792,792,,,,792,792,797',
'797,797,,797,,,,797,797,,,,797,,797,797,797,797,797,797,797,,,,,797',
'797,797,797,797,797,797,,,,,,,,,,797,,,797,797,797,797,797,797,797,797',
'797,797,,797,797,,797,797,797,,,,,,,,,,,,,,,,,,,,797,,,797,,,797,797',
',,797,,,,,,797,,,,,,,,797,,,,,797,797,797,797,797,797,,,,797,797,799',
'799,799,,799,,,,799,799,,,,799,,799,799,799,799,799,799,799,,,,,799',
'799,799,799,799,799,799,,,,,,,,,,799,,,799,799,799,799,799,799,799,799',
'799,799,,799,799,,799,799,799,,,,,,,,,,,,,,,,,,,,799,,,799,,,799,799',
',,799,,,,,,799,,,,,,,,799,,,,,799,799,799,799,799,799,,,,799,799,810',
'810,810,,810,,,,810,810,,,,810,,810,810,810,810,810,810,810,,,,,810',
'810,810,810,810,810,810,,,,,,,,,,810,,,810,810,810,810,810,810,810,810',
'810,810,,810,810,,,,810,,,,,,,,,,,,,,,,,,,,810,,,810,,,810,810,,,810',
',,,,,,,,,,,,,,,,,,810,810,810,810,810,810,,,,810,810,818,818,818,,818',
',,,818,818,,,,818,,818,818,818,818,818,818,818,,,,,818,818,818,818,818',
'818,818,,,,,,,,,,818,,,818,818,818,818,818,818,818,818,818,818,,818',
'818,,818,818,818,,,,,,,,,,,,,,,,,,,,818,,,818,,,818,818,,,818,,818,',
',,818,,,,,,,,818,,,,,818,818,818,818,818,818,,,,818,818,841,841,841',
',841,,,,841,841,,,,841,,841,841,841,841,841,841,841,,,,,841,841,841',
'841,841,841,841,,,,,,,,,,841,,,841,841,841,841,841,841,841,841,841,841',
',841,841,,,,841,,,,,,,,,,,,,,,,,,,,841,,,841,,,841,841,,,841,,,,,,,',
',,,,,,,,,,,841,841,841,841,841,841,,,,841,841,843,843,843,,843,,,,843',
'843,,,,843,,843,843,843,843,843,843,843,,,,,843,843,843,843,843,843',
'843,,,,,,,,,,843,,,843,843,843,843,843,843,843,843,843,843,,843,843',
',843,843,843,,,,,,,,,,,,,,,,,,,,843,,,843,,,843,843,,,843,,843,,,,843',
',,,,,,,843,,,,,843,843,843,843,843,843,,,,843,843,848,848,848,,848,',
',,848,848,,,,848,,848,848,848,848,848,848,848,,,,,848,848,848,848,848',
'848,848,,,,,,,,,,848,,,848,848,848,848,848,848,848,848,848,848,,848',
'848,,,,848,,,,,,,,,,,,,,,,,,,,848,,,848,,,848,848,,,848,,,,,,,,,,,,',
',,,,,,848,848,848,848,848,848,,,,848,848,853,853,853,,853,,,,853,853',
',,,853,,853,853,853,853,853,853,853,,,,,853,853,853,853,853,853,853',
',,,,,,,,,853,,,853,853,853,853,853,853,853,853,853,853,,853,853,,853',
'853,853,,,,,,,,,,,,,,,,,,,,853,,,853,,,853,853,,,853,,853,,853,,853',
',,,,,,,853,,,,,853,853,853,853,853,853,,,,853,853,856,856,856,,856,',
',,856,856,,,,856,,856,856,856,856,856,856,856,,,,,856,856,856,856,856',
'856,856,,,,,,,,,,856,,,856,856,856,856,856,856,856,856,856,856,,856',
'856,,856,856,856,,,,,,,,,,,,,,,,,,,,856,,,856,,,856,856,,,856,,856,',
'856,,856,,,,,,,,856,,,,,856,856,856,856,856,856,,,,856,856,867,867,867',
',867,,,,867,867,,,,867,,867,867,867,867,867,867,867,,,,,867,867,867',
'867,867,867,867,,,,,,,,,,867,,,867,867,867,867,867,867,867,867,867,867',
',867,867,,867,867,867,,,,,,,,,,,,,,,,,,,,867,,,867,,,867,867,,,867,',
',,,,867,,,,,,,,867,,,,,867,867,867,867,867,867,,,,867,867,887,887,887',
',887,,,,887,887,,,,887,,887,887,887,887,887,887,887,,,,,887,887,887',
'887,887,887,887,,,,,,,,,,887,,,887,887,887,887,887,887,887,887,887,887',
',887,887,,,,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,,,,,,,',
',,,,,,,,,,,887,887,887,887,887,887,,,,887,887,891,891,891,,891,,,,891',
'891,,,,891,,891,891,891,891,891,891,891,,,,,891,891,891,891,891,891',
'891,,,,,,,,,,891,,,891,891,891,891,891,891,891,891,891,891,,891,891',
',891,891,891,,,,,,,,,,,,,,,,,,,,891,,,891,,,891,891,,,891,,,,,,891,',
',,,,,,891,,,,,891,891,891,891,891,891,,,,891,891,894,894,894,,894,,',
',894,894,,,,894,,894,894,894,894,894,894,894,,,,,894,894,894,894,894',
'894,894,,,,,,,,,,894,,,894,894,894,894,894,894,894,894,894,894,,894',
'894,,894,894,894,,,,,,,,,,,,,,,,,,,,894,,,894,,,894,894,,,894,,,,,,894',
',,,,,,,894,,,,,894,894,894,894,894,894,,,,894,894,907,907,907,,907,',
',,907,907,,,,907,,907,907,907,907,907,907,907,,,,,907,907,907,907,907',
'907,907,,,,,,,,,,907,,,907,907,907,907,907,907,907,907,907,907,,907',
'907,,,,907,,,,,,,,,,,,,,,,,,,,907,,,907,,,907,907,,,907,,,,,,,,,,,,',
',,,,,,907,907,907,907,907,907,,,,907,907,912,912,912,,912,,,,912,912',
',,,912,,912,912,912,912,912,912,912,,,,,912,912,912,912,912,912,912',
',,,,,,,,,912,,,912,912,912,912,912,912,912,912,912,912,,912,912,,912',
'912,912,,,,,,,,,,,,,,,,,,,,912,,,912,,,912,912,,,912,,912,,912,,912',
',,,,,,,912,,,,,912,912,912,912,912,912,,,,912,912,920,920,920,,920,',
',,920,920,,,,920,,920,920,920,920,920,920,920,,,,,920,920,920,920,920',
'920,920,,,,,,,,,,920,,,920,920,920,920,920,920,920,920,920,920,,920',
'920,,,,920,,,,,,,,,,,,,,,,,,,,920,,,920,,,920,920,,,920,,,,,,,,,,,,',
',,,,,,920,920,920,920,920,920,,,,920,920,923,923,923,,923,,,,923,923',
',,,923,,923,923,923,923,923,923,923,,,,,923,923,923,923,923,923,923',
',,,,,,,,,923,,,923,923,923,923,923,923,923,923,923,923,,923,923,,923',
'923,923,,,,,,,,,,,,,,,,,,,,923,,,923,,,923,923,,,923,,,,,,923,,,,,,',
',923,,,,,923,923,923,923,923,923,,,,923,923,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,,,67,67,67,67,67,67',
'67,67,67,67,,,,,,67,67,67,67,67,67,67,67,67,67,67,67,,,,,,,67,67,,67',
'67,67,67,,67,67,,,67,,,,,67,67,67,67,,,,,,67,,,,,,,,67,67,,67,67,67',
'67,67,67,67,67,67,,67,,,67,81,81,81,81,81,81,81,81,81,81,81,81,81,81',
'81,81,81,81,81,81,81,81,81,81,,,81,81,81,81,81,81,81,81,81,81,,,,,,81',
'81,81,81,81,81,81,81,81,81,81,81,,,,,,,81,81,,81,81,81,81,,81,81,,,81',
',,,,81,81,81,81,,,,,,,,,,,,,,81,81,,81,81,81,81,81,81,81,81,81,,81,',
',81,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671,671',
'671,671,671,671,671,671,671,671,,,671,671,671,671,671,671,671,671,671',
'671,,,,,,671,671,671,671,671,671,671,671,,,671,,,,,,,,671,671,,671,671',
'671,671,,671,671,,,671,,,,,671,671,671,671,,,,,,,,,,,,,,671,671,,671',
'671,671,671,671,671,671,671,671,,671,195,195,671,,195,,,,,,,,195,195',
',195,195,195,195,,195,195,,,195,,,,,195,195,195,195,,,,,,,,,,,,,,195',
'195,,195,195,195,195,195,195,195,195,195,,195,196,196,195,,196,,,,,',
',,196,196,,196,196,196,196,,196,196,,,196,,,,,196,196,196,196,,,,,,',
',,,,,,,196,196,,196,196,196,196,196,196,196,196,196,,196,254,254,196',
',254,,,,,,,,254,254,,254,254,254,254,,254,254,,,254,,,,,254,254,254',
'254,,,,,,,,,,,,,,254,254,,254,254,254,254,254,254,254,254,254,,254,255',
'255,254,,255,,,,,,,,255,255,,255,255,255,255,,255,255,,,255,,,,,255',
'255,255,255,,,,,,,,,,,,,,255,255,,255,255,255,255,255,255,255,255,255',
',255,395,395,255,,395,,,,,,,,395,395,,395,395,395,395,,395,395,,,395',
',,,,395,395,395,395,,,,,,,,,,,,,,395,395,,395,395,395,395,395,395,395',
'395,395,,395,396,396,395,,396,,,,,,,,396,396,,396,396,396,396,,396,396',
',,396,,,,,396,396,396,396,,,,,,,,,,,,,,396,396,,396,396,396,396,396',
'396,396,396,396,,396,463,463,396,,463,,,,,,,,463,463,,463,463,463,463',
',463,463,,,463,,,,,463,463,463,463,,,,,,,,,,,,,,463,463,,463,463,463',
'463,463,463,463,463,463,,463,464,464,463,,464,,,,,,,,464,464,,464,464',
'464,464,,464,464,,,464,,,,,464,464,464,464,,,,,,,,,,,,,,464,464,,464',
'464,464,464,464,464,464,464,464,,464,472,472,464,,472,,,,,,,,472,472',
',472,472,472,472,,472,472,,,472,,,,,472,472,472,472,,,,,,,,,,,,,,472',
'472,,472,472,472,472,472,472,472,472,472,,472,473,473,472,,473,,,,,',
',,473,473,,473,473,473,473,,473,473,,,473,,,,,473,473,473,473,,,,,,',
',,,,,,,473,473,,473,473,473,473,473,473,473,473,473,,473,503,503,473',
',503,,,,,,,,503,503,,503,503,503,503,,503,503,,,503,,,,,503,503,503',
'503,,,,,,,,,,,,,,503,503,,503,503,503,503,503,503,503,503,503,,503,504',
'504,503,,504,,,,,,,,504,504,,504,504,504,504,,504,504,,,504,,,,,504',
'504,504,504,,,,,,,,,,,,,,504,504,,504,504,504,504,504,504,504,504,504',
',504,,,504,581,581,581,581,581,581,581,581,581,581,581,,581,581,,,581',
'581,,,,581,,,,,,,,,,,581,,581,,581,581,581,581,581,581,581,,581,,,,',
',,593,593,,,593,,,,,581,,581,593,593,,593,593,593,593,,593,593,,,593',
',,,,593,593,593,593,,,,,,,,,,,,,,593,593,,593,593,593,593,593,593,593',
'593,593,,593,594,594,593,,594,,,,,,,,594,594,,594,594,594,594,,594,594',
',,594,,,,,594,594,594,594,,,,,,,,,,,,,,594,594,,594,594,594,594,594',
'594,594,594,594,,594,642,642,594,,642,,,,,,,,642,642,,642,642,642,642',
',642,642,,,642,,,,,642,642,642,642,,,,,,,,,,,,,,642,642,,642,642,642',
'642,642,642,642,642,642,,642,644,644,642,,644,,,,,,,,644,644,,644,644',
'644,644,,644,644,,,644,,,,,644,644,644,644,,,,,,,,,,,,,,644,644,,644',
'644,644,644,644,644,644,644,644,,644,844,844,644,,844,,,,,,,,844,844',
',844,844,844,844,,844,844,,,844,,,,,844,844,844,844,,,,,,,,,,,,,,844',
'844,,844,844,844,844,844,844,844,844,844,,844,845,845,844,,845,,,,,',
',,845,845,,845,845,845,845,,845,845,,,845,,,,,845,845,845,845,,,,,,',
',,,,,,,845,845,,845,845,845,845,845,845,845,845,845,,845,,,845,850,850',
'850,850,850,850,850,850,850,850,850,,850,850,,,850,850,,,,,,,,,,,,,',
',850,,850,,850,850,850,850,850,850,850,,850,,,,,,,,,,,,,,,,850,,850',
'427,427,427,427,427,427,427,427,427,427,427,,427,427,,,427,427,,,,,',
',,,,,,,,,427,,427,,427,427,427,427,427,427,427,,427,,22,22,22,22,22',
'22,22,22,22,22,22,,22,22,427,427,22,22,,,,,,,,,,,,,,,22,,22,,22,22,22',
'22,22,22,22,,22,240,240,240,240,240,240,240,240,240,240,240,,240,240',
',22,240,240,,,,,,,,,,,,,,,240,,240,,240,240,240,240,240,240,240,,240',
'378,378,378,378,378,378,378,378,378,378,378,,378,378,,240,378,378,,',
',,,,,,,,,,,,378,,378,,378,378,378,378,378,378,378,,378,392,392,392,392',
'392,392,392,392,392,392,392,,392,392,,378,392,392,,,,,,,,,,,,,,,392',
',392,,392,392,392,392,392,392,392,,392,474,474,474,474,474,474,474,474',
'474,474,474,,474,474,,392,474,474,,,,,,,,,,,,,,,474,,474,,474,474,474',
'474,474,474,474,,474,485,485,485,485,485,485,485,485,485,485,485,,485',
'485,,474,485,485,,,,,,,,,,,,,,,485,,485,,485,485,485,485,485,485,485',
',485,606,606,606,606,606,606,606,606,606,606,606,,606,606,485,485,606',
'606,,,,,,,,,,,,,,,606,,606,,606,606,606,606,606,606,606,,606,680,680',
'680,680,680,680,680,680,680,680,680,,680,680,,606,680,680,,,,,,,,,,',
',,,,680,,680,,680,680,680,680,680,680,680,,680,685,685,685,685,685,685',
'685,685,685,685,685,,685,685,,680,685,685,,,,,,,,,,,,,,,685,,685,,685',
'685,685,685,685,685,685,,685,687,687,687,687,687,687,687,687,687,687',
'687,,687,687,,685,687,687,,,,,,,,,,,,,,,687,,687,,687,687,687,687,687',
'687,687,,687,690,690,690,690,690,690,690,690,690,690,690,,690,690,,687',
'690,690,,,,,,,,,,,,,,,690,,690,,690,690,690,690,690,690,690,,690,692',
'692,692,692,692,692,692,692,692,692,692,,692,692,,690,692,692,,,,,,',
',,,,,,,,692,,692,,692,692,692,692,692,692,692,,692,697,697,697,697,697',
'697,697,697,697,697,697,,697,697,,692,697,697,,,,,,,,,,,,,,,697,,697',
',697,697,697,697,697,697,697,,697,734,734,734,734,734,734,734,734,734',
'734,734,,734,734,,697,734,734,,,,,,,,,,,,,,,734,,734,,734,734,734,734',
'734,734,734,,734,779,779,779,779,779,779,779,779,779,779,779,,779,779',
'734,734,779,779,,,,,,,,,,,,,,,779,,779,,779,779,779,779,779,779,779',
',779,,,,,,,,,,,,,,,,779' ]
        racc_action_check = arr = ::Array.new(25044, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    12,  1236,    49,   nil,   181,   nil,   868,  4773,  4894,
  5015,   nil,     6,    -3,    28,    87,   -28,   -80,   149,   nil,
  5128,  5249, 24289,   159,   nil,  5370,  5491,  5612,   -51,    70,
  5733,  5854,   nil,  1358,  5975,  6096,   nil,    86,   -78,   187,
   180,  6217,  6338,  6459,   205,   312,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   250,   nil,  6580,  6701,   nil,   -23,  6822,
  6943,   nil,   nil,   741,  7064,   322,   nil, 22778,   nil,   nil,
   nil,   nil,   nil,   244,   nil,   nil,   nil,   nil,   nil,   277,
   299, 22888,   nil,   nil,   nil,  7185,   nil,   nil,  7306,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   868,   nil,   nil,   nil,  7427,  7548,  7669,  7790,  7911,   988,
   nil,   483,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   303,   nil,   332,
  1480,  8032,  8153,  8274,  8395, 23058, 23118,  8516,  8637,  8758,
   nil,   373,   -74,   414,    32,   351,   399,  1602,   nil,   nil,
  8879,  9000,  9121,  9242,  9363,  9484,  9605,  9726,  9847,  9968,
 10089, 10210, 10331, 10452, 10573, 10694, 10815, 10936, 11057, 11178,
 11299, 11420, 11541, 11662, 11783, 11904, 12025,   nil,   nil,   nil,
 24334,   nil,   366,   370, 12146,   nil, 12267,   427,   nil,   nil,
   nil,   nil,   nil,   nil, 23178, 23238,   421, 12388,   nil,   457,
   nil,   nil,   nil, 12509,   nil,   nil, 12630,   468,  1724,   471,
   478,   450, 12751,  1846,   403,   416,   525,   502,   493,   458,
   -22,   nil,   500,   308,   nil,   nil,   170,   526,   527,   526,
   nil,   531,   nil, 12872,   nil,  1968,   381,   nil,   476,    46,
   187, 12993,   508, 13114,   nil,   444,   -11,    20, 13235, 13356,
   292,    12,   476,   -19,   527,   552,   -13,   583,   nil,   nil,
 13477,   nil, 13598,   -45,   286,   287,   288,   289,   367,   369,
   370,   nil,   371,   nil,   nil,   nil,   nil,   151,   nil,   175,
   nil,   154,   505,   179,   nil,   507,   -35,   nil,   188,   nil,
   nil,   nil,   nil,   nil,  1045,   nil,   nil,   nil,   nil,   nil,
   nil, 13719,   nil,   nil,   nil,   nil,  2090,   518,   nil,   nil,
   741,   nil,   506, 13832,   nil,   507,   nil,   nil, 24379,   542,
   203,   219, 13953,   nil,   nil,     0,   549,   125,   nil, 14074,
 14195,   nil, 24424,   nil,   nil, 23298, 23358, 14316,    90, 14437,
 14558, 14679,   620,   868,    87,   160,   580,   581,   582,   583,
  2822,  2944,  3066,  1358,  1480,  1602,  1724,  1846,  1968,  2090,
  2212,  2334,  2456,   471,   961,  2578,  2700, 24243,   -17,   nil,
 14800,   nil,   nil, 14921,   531,   nil, 15042,   372,   nil,   nil,
   383,   nil,   nil,   nil,   nil, 15163,   nil,   175,   206,   573,
   539,   -24,   537,   638,   578,   nil,   589,   554,   nil,   nil,
   nil,   611, 15284, 23418, 23478,   528,   621,   nil,   nil, 15405,
 15526, 15647, 23538, 23598, 24469, 15768,   705,   720,   607,   nil,
   nil, 15889,   nil,   nil, 16010, 24514,   nil,   211,   621,   nil,
   217,  2212,   726,   nil,   nil,  2334,    27,    52,   724,   739,
  2456,   nil, 16131, 23658, 23718,    -7,   nil,   128,   192,   420,
   nil,   620,   nil,    14, 16252,   nil,  1002,   nil,   nil,   nil,
 16373,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   125,   nil,   nil,   nil,   622,   nil,   nil, 16494,   643,
   nil, 16607, 16728,   nil,   275, 16849, 16970,   660,   nil,   nil,
   nil, 17091,   663,   nil, 17212,   181,   252,   499,   620,   673,
  1110, 17333,   nil, 17454,   nil,   nil, 17575,   640,   nil,   682,
 17696,   nil,   683,   nil,   679,   nil,   nil,   nil,   nil,   nil,
   233, 23766,   -64,   651, 17817,   nil,   691,   nil,   nil,   nil,
   nil,   692,   693, 23832, 23892, 17938,   nil,   -65,   nil,   690,
     5,   116,   697,   193,   741,   699, 24559,   723,   734,     9,
   787, 18059,   nil,   732, 18180,   nil,   nil, 18301,   nil,   nil,
   nil,   510,   nil,   811,   nil,   nil,   nil,   nil,   nil,   820,
   nil,   824, 18422,   744,    -6,    -5,    -4,     3, 18543,   nil,
   623,   nil, 23952, 18664, 24012,   nil,   nil,   nil,   376,   490,
  2578,  2700,   379,   413,   712,   724,   725,   nil,   nil,   nil,
   nil,   nil,   722,   nil,   nil,   nil,   nil,   810,   nil,   nil,
   811, 22998,    24,   604,  2822,   nil,   nil,   nil,   nil,   nil,
 24604,   735, 18785, 18906,   nil, 24649,   nil, 24694,   nil,   nil,
 24739,   nil, 24784, 19027, 19148, 19269,   263, 24829,   nil,   740,
   989, 19390,   nil,   770,  2944,   751,   nil, 19511,   755,   nil,
 19632,   nil, 19753,   756,   nil,   804,  3066,  3188,   nil,   nil,
   806,   807,   159,   868,   664,   nil,   895,   nil,  3310,   778,
   840,   nil,   nil,   nil, 24874,   919,   nil, 19874,   938,  3432,
  3554,   nil,   nil,   826,    21, 19995,    10,    53,   352,   793,
   nil,   863,  3676, 20116,   nil,   414,   947,   951,   842,   nil,
  1039,   nil,   340,   nil,   nil,   467, 20237,   nil,   nil,   nil,
   889,   nil,   nil,   nil,   nil,   nil,   868,   nil,   nil, 24919,
 20358, 20479,   744,   868,   926,   871,   860,   891,   nil,   nil,
   988,   nil, 20600,   nil,  3798,   875,   nil, 20721,   876, 20842,
   nil,   nil,   903,  1006,   928,   nil,  3920,   nil,   nil,    31,
 20963,   nil,   nil,   nil,    45,   nil,  1015,  1022, 21084,  4042,
   nil,   nil,   nil,  1023,   417,   nil,   nil,   nil,   946,   909,
   920,   nil,   nil,   923,   920,   nil,   nil,  1287,   nil,   nil,
   nil, 21205,  1110, 21326, 24072, 24132,   912,   962, 21447,   nil,
 24180,   950,   nil, 21568,   940,   nil, 21689,   941,   nil,   nil,
   nil,   nil,  4164,   nil,  4286,   nil,   nil, 21810,    78,  4408,
   nil,   nil,  4530,   nil,   391,   nil,   nil,   nil,  4652,   nil,
   942,   972,   979,   375,   381,   488,   983, 21931,   nil,   nil,
   nil, 22052,   947,   nil, 22173,   nil,  1069,   555,   nil,   nil,
   nil,   nil,  1068,  1071,   955,  1085,   998, 22294,   923,   nil,
   970,   nil, 22415,   981,   nil,   nil,   nil,   nil,   nil,   nil,
 22536,   nil,   nil, 22657,   nil,   nil,   982,   nil ]

racc_action_default = [
    -1,  -521,  -520,  -521,    -2,  -509,    -5,    -6,  -521,  -521,
  -521,   -20,  -521,  -521,  -521,  -521,  -521,  -274,   -34,   -35,
  -521,  -521,   -40,   -42,   -43,  -287,  -324,  -325,   -47,  -252,
  -372,  -290,   -61,  -520,   -65,   -70,   -71,  -521,  -450,  -521,
  -521,  -521,  -521,  -521,  -511,  -217,  -267,  -268,  -269,  -270,
  -271,  -272,  -273,  -499,  -276,  -521,  -520,  -285,  -293,  -521,
  -521,  -297,  -300,  -509,  -521,  -309,  -316,  -521,  -326,  -327,
  -395,  -396,  -397,  -398,  -399,  -520,  -402,  -520,  -520,  -520,
  -520,  -520,  -429,  -435,  -436,  -439,  -440,  -441,  -442,  -443,
  -444,  -445,  -446,  -447,  -448,  -449,  -452,  -453,   928,    -4,
  -510,  -516,  -517,  -518,  -521,  -521,  -521,  -521,  -521,    -8,
    -9,  -521,   -96,   -97,   -98,   -99,  -100,  -101,  -102,  -103,
  -104,  -108,  -109,  -110,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -120,  -121,  -122,  -123,  -124,  -125,  -126,
  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,
  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,
  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,
  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,
  -167,  -168,  -169,  -170,  -171,  -172,  -173,   -14,  -105,  -521,
  -520,  -521,  -521,  -521,  -520,  -521,  -521,  -521,  -521,  -521,
   -38,  -521,  -450,  -521,  -274,  -521,  -521,  -520,   -39,  -209,
  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,
  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -521,
  -521,  -521,  -521,  -521,  -521,  -521,  -521,  -360,  -363,   -44,
  -218,  -231,  -520,  -520,  -521,  -239,  -521,  -262,  -287,  -324,
  -325,  -494,   -45,   -46,  -521,  -521,   -53,  -521,  -292,  -521,
  -373,  -376,   -59,  -520,  -371,   -60,  -521,   -61,  -520,  -521,
  -521,   -66,   -68,  -520,   -75,  -521,  -521,   -82,  -290,  -511,
  -366,  -328,  -372,  -521,   -69,   -73,  -282,  -437,  -438,  -521,
  -194,  -195,  -210,  -521,  -512,  -520,  -278,  -219,  -511,  -513,
  -513,  -521,  -521,  -520,  -294,   -41,  -521,  -521,  -521,  -521,
  -509,  -521,  -510,  -450,  -521,  -521,  -274,  -521,  -340,  -341,
  -521,  -312,  -521,   -96,   -97,  -134,  -135,  -151,  -156,  -163,
  -166,  -319,  -521,  -450,  -488,  -489,  -400,  -521,  -415,  -521,
  -417,  -521,  -521,  -521,  -407,  -521,  -521,  -413,  -521,  -428,
  -430,  -431,  -432,  -433,    -7,  -519,   -15,   -16,   -17,   -18,
   -19,  -521,   -11,   -12,   -13,  -106,  -520,  -521,   -23,   -31,
  -174,  -262,  -521,  -521,   -24,   -32,   -33,   -25,  -176,  -521,
  -500,  -501,  -520,  -502,  -503,  -500,  -252,  -501,  -370,  -505,
  -506,   -30,  -183,   -36,   -37,  -521,  -521,  -520,  -282,  -521,
  -521,  -521,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -196,  -197,  -198,  -199,  -200,  -201,  -202,  -203,  -204,  -205,
  -206,  -207,  -208,  -211,  -212,  -213,  -214,  -521,  -520,  -232,
  -521,  -261,  -234,  -521,  -520,  -259,  -521,  -252,  -500,  -501,
  -252,   -50,   -54,  -253,  -254,  -255,  -367,  -520,  -520,  -521,
  -511,  -511,  -520,  -231,  -521,  -289,  -521,   -62,  -280,   -74,
   -67,  -521,  -520,  -521,  -521,   -81,  -521,  -437,  -438,  -521,
  -521,  -521,  -521,  -521,  -215,  -521,  -387,  -521,  -511,  -220,
  -221,  -515,  -514,  -223,  -515,  -511,  -284,  -513,  -521,  -491,
  -513,  -520,  -329,  -330,  -331,  -520,  -521,  -521,  -521,  -521,
  -520,  -379,  -520,  -521,  -521,  -282,  -306,   -91,   -92,  -521,
   -94,  -521,  -274,  -521,  -521,  -317,  -468,  -321,  -507,  -508,
  -521,  -401,  -416,  -419,  -420,  -422,  -403,  -418,  -404,  -405,
  -406,  -521,  -409,  -411,  -412,  -521,  -434,   -10,  -521,  -521,
   -22,  -521,  -521,  -266,  -283,  -521,  -521,   -55,  -229,  -230,
  -368,  -521,   -57,  -369,  -521,  -500,  -501,  -504,  -281,  -521,
  -174,  -521,  -356,  -521,  -358,  -361,  -521,  -520,  -260,  -263,
  -521,  -495,  -521,  -238,  -521,  -496,   -48,  -364,   -49,  -365,
  -520,   -40,  -521,  -520,  -521,  -251,  -521,  -257,  -374,  -377,
  -225,  -521,  -521,  -521,  -521,  -521,  -288,   -62,   -72,  -521,
  -500,  -501,  -520,   -78,   -80,  -521,  -182,  -192,  -193,  -521,
  -520,  -520,  -277,  -521,  -521,  -263,  -224,  -515,  -493,  -286,
  -492,  -520,  -332,  -520,  -298,  -333,  -334,  -335,  -301,  -521,
  -304,  -521,  -521,  -521,  -500,  -501,  -504,  -281,  -521,   -91,
   -92,   -93,  -521,  -520,  -521,  -310,  -454,  -455,  -521,  -313,
  -520,  -520,  -468,  -521,  -487,  -487,  -487,  -467,  -469,  -470,
  -471,  -472,  -473,  -474,  -477,  -479,  -480,  -482,  -483,  -484,
  -521,  -521,  -511,  -521,  -520,  -408,  -410,  -414,  -107,   -21,
  -175,  -264,  -521,  -521,   -27,  -178,   -28,  -179,   -56,   -29,
  -180,   -58,  -181,  -521,  -521,  -521,  -283,  -216,  -342,  -344,
  -354,  -521,  -357,  -521,  -520,  -520,  -236,  -521,  -520,   -51,
  -521,  -244,  -521,  -520,  -256,  -521,  -520,  -520,  -226,  -227,
  -520,  -520,  -511,  -521,   -76,  -291,  -520,  -338,  -520,  -388,
  -520,  -389,  -390,  -279,  -511,  -521,  -336,  -521,  -521,  -520,
  -520,  -303,  -305,  -381,  -521,  -521,  -283,  -521,   -91,   -92,
   -95,  -521,  -520,  -521,  -457,  -521,  -521,  -521,  -511,  -459,
  -521,  -463,  -521,  -465,  -466,  -521,  -521,  -481,  -485,  -322,
  -521,  -421,  -424,  -425,  -426,  -427,  -521,  -265,   -26,  -177,
  -521,  -345,   -83,  -521,  -521,   -90,  -353,  -521,  -355,  -359,
  -521,  -233,  -521,  -235,  -520,  -520,  -241,  -521,  -520,  -521,
  -250,  -258,  -521,  -521,  -521,    -3,  -520,  -394,  -339,  -521,
  -521,  -392,  -222,  -295,  -521,  -296,  -521,  -521,  -521,  -520,
  -383,  -307,  -283,  -521,  -521,  -314,  -318,  -320,  -521,  -487,
  -487,  -475,  -486,  -487,  -521,  -478,  -476,  -468,  -490,  -423,
  -343,  -521,  -350,  -520,  -521,  -521,   -89,  -521,  -521,  -362,
  -520,  -521,  -240,  -521,  -520,  -246,  -521,  -520,  -375,  -378,
  -228,  -393,  -520,  -391,  -520,  -299,  -302,  -521,  -520,  -520,
  -311,  -456,  -520,  -458,  -521,  -461,  -462,  -464,  -520,  -346,
  -349,  -521,  -521,   -85,   -87,   -86,   -88,  -521,  -352,  -237,
   -52,  -521,  -520,  -242,  -521,  -245,  -387,  -520,  -382,  -380,
  -384,  -385,  -521,  -521,  -487,  -521,  -521,  -521,   -84,  -351,
  -520,  -247,  -521,  -520,  -386,  -337,  -308,  -315,  -460,  -323,
  -521,  -348,  -243,  -521,  -248,  -347,  -520,  -249 ]

clist = [
'13,302,477,499,271,610,13,110,188,331,118,118,451,115,115,99,243,243',
'243,103,651,281,281,350,369,376,293,571,657,641,442,13,241,241,241,120',
'120,735,284,577,264,200,579,491,495,726,256,262,265,624,628,281,761',
'763,764,306,307,835,738,310,109,1,318,298,522,480,483,830,2,833,532',
'115,565,311,805,100,296,103,571,208,305,305,339,341,305,115,348,245',
'245,245,187,588,589,513,319,515,361,189,13,580,356,357,358,359,794,538',
'13,239,252,253,587,267,269,443,382,386,586,715,334,488,304,317,645,332',
'517,305,305,305,305,295,478,303,308,739,309,740,638,869,320,379,752',
'514,755,872,322,650,516,671,837,699,703,428,354,704,447,716,448,717',
'744,899,360,632,750,730,657,809,336,337,343,835,242,242,242,437,440',
'531,346,771,673,674,349,904,753,758,829,16,831,520,13,,629,16,,,,,,',
',,390,298,,201,201,13,,,201,201,201,,,,,,16,275,275,393,394,,,,709,',
',875,876,15,,877,,,,15,,,201,201,,,201,201,,,201,314,243,368,374,377',
',618,243,391,620,243,676,281,15,466,,,241,,13,,,446,453,13,,241,,460',
',,,,479,,,16,,,,201,201,201,201,16,264,13,490,,,,,,821,571,918,900,496',
'497,571,281,,281,,,,915,382,386,,,,245,498,688,577,579,103,245,691,15',
'245,305,305,,,,,15,372,372,,444,,878,559,,722,450,267,456,454,657,,267',
'461,,,,,756,757,537,,,118,,13,115,,,,,,,,16,201,201,201,201,,,201,201',
'201,605,,,,120,,,16,,605,,,,553,,,547,390,,242,552,298,,,599,452,,,242',
',,,,,15,,,,567,,605,,914,,,,,,,591,592,15,,583,,,17,201,,,,731,17,201',
'633,487,201,571,16,,,576,275,16,578,,823,613,,,,,,296,616,390,298,17',
'277,277,,,,,390,16,,,819,,,,,,,,13,,201,201,13,,15,609,,13,,15,316,',
'511,,511,571,585,390,298,625,625,720,721,,,,,,,,,15,,,38,,646,,432,',
'38,,698,,649,678,17,,118,,672,115,,,17,862,,,16,281,864,,,,,38,274,274',
',901,605,,,120,,,,,,,,,,,,,,,903,201,,,,,905,567,313,751,,333,,,15,',
',,,,,,,723,684,686,,,,,689,,,,769,,553,,,,,,,,38,,,,17,201,,,38,,,747',
',,,,,,,,,17,201,390,,13,13,298,,,,770,,,,201,305,,,754,,,,,759,,,,,13',
',16,115,,,16,,,,,16,,201,,281,281,,,,,,,,,201,786,788,,798,13,201,804',
'17,,,,277,17,,,38,13,13,812,,15,,573,,15,,,,13,15,201,201,38,,17,814',
'201,,,13,13,,828,778,,,,,275,,,824,13,840,,,,,372,512,305,512,,625,',
',605,,,,281,825,,,796,,305,,,743,201,,,,,,,,,,882,,,38,13,,,274,38,281',
',,,,,17,13,,,,863,,,,,,,,,13,38,,,201,,,,,201,,281,281,,,,16,16,281',
',,871,879,880,,,333,892,333,888,,,390,298,,,706,,795,,16,,,13,,13,,',
',201,13,,711,13,,,,281,,13,15,15,,,,,783,783,909,,16,,38,,,,,281,,,',
',16,16,15,,,,921,,281,,,,16,,,,,4,,925,,201,,16,16,,,,,17,,,15,17,,',
'16,201,17,,,,,,15,15,,,270,,,,,,,,15,,,,,,,,,275,,15,15,,,,,,,,,,16',
',15,,,,,,,,,,16,,791,,783,793,,,,,800,277,,16,,,,,,,,,,,,38,,,,38,,',
'15,,38,783,783,201,,,,,783,,15,,,,,,,,,,,,16,15,16,,,,,16,,,16,,,,,',
'16,,,,,,,,,783,,,,,,,,,,,852,,,855,,274,17,17,15,783,15,,,,,15,,,15',
',,,783,367,15,,,,,775,17,,,,,,,,,,270,,,,,,,,,,,,,,,889,785,785,,893',
'17,,895,,,,,,,,,,17,17,,,,,,,,,,,17,,,,,,,,38,38,,17,17,911,,,,270,',
',,,270,,17,,,,,,,922,38,,924,,,,,,,,,,,,,927,,,,,,277,,,,,782,782,,',
'38,,,,17,,,,,,,,38,38,,,17,,,,785,,,,38,,,,,17,,,,,209,38,38,,240,240',
'240,,,,,,,,38,,,785,785,539,290,291,292,,785,,,,,,,,,,,240,,,17,,17',
',,274,,17,,,17,,,,,,17,,38,,,,,,,785,,,,,38,,,,782,,,,,,,,,38,,785,',
',,,,,,,,,,,785,,,,,,,782,782,,,,,,782,,,,,,,,,,,,,,38,,38,,,,,38,,,38',
',,,,,38,,,,621,,,,623,782,,,,631,,,,,,,,,,,,,,,,782,370,240,378,240',
',,392,,371,375,,,782,,,,,,,209,402,403,404,405,406,407,408,409,410,411',
'412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,,,,',
',,,240,,240,,,,,,434,,435,,,240,,,,,,240,,,240,,,,,,,,,,,,,,,,,,,,,',
',,,,,474,,,,,,,,485,,240,,,,,,,,,,,,,,,,,,,29,,,,,,29,,,,,,,,,,,,29',
'29,,,,29,29,29,776,,,,,29,,,,,,,,,,,,,,,,,,,,240,,29,29,,790,29,29,543',
',29,,,,,,,802,803,,,,,,240,,392,560,378,808,,,,,,,,,,,816,817,,,,,,29',
',,,29,29,29,29,29,,240,,,240,,,240,,569,,,572,,,575,581,,,,,,,,582,',
',,,,,,,240,,,,,,851,606,607,608,,,,,,,,,861,240,,,240,,,,,615,,,572',
'868,,,,,,,,297,240,,,,,,,,29,29,29,29,29,,,29,29,29,338,,340,340,344',
'347,340,29,,,,,,,,,896,,897,,,680,240,902,,685,687,,,,681,690,,,692',
',,,,,,697,,,,,240,,,,240,,,,705,,,29,708,,,,,29,240,,29,,29,,,,713,29',
',240,,,,,,,,569,,,,,,,,240,,,734,29,,240,,729,,,,,,615,,,29,29,,,240',
',,,,,,297,371,,,240,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,240,779,,',
'29,431,431,,777,,,685,687,690,,,,,,,,,,,,240,449,,240,,240,,,572,,29',
',,572,,,,,,,,,,,,,,,,,,,,,,,,,240,,,489,,,,,820,,,,,,,,,,,,29,240,,',
',,,,,836,,,,,,779,,29,,,,,,,,,,850,,,29,,240,,240,,,,,,854,,857,,,,29',
',,,29,,,240,,29,,29,,,,615,548,,,,,,,29,,,,,,29,,297,240,,,,,,,,,,240',
',,240,,,,,569,,,572,29,29,240,,,,29,,562,,898,,,,431,,,548,,,548,,,',
',,240,562,562,240,,,431,,910,,,913,,,,,297,,,,,240,,,29,,,,,572,,,240',
',,,,,,,926,,,,,,,,,,,,,,,,297,,,,,,,,,,,29,,,,,29,,,,,,,29,29,,,,,,',
',,,,,,,,,,,,,,,,29,,,,,,,,,29,,,,,,,,,431,,,,,,,,,,,,29,562,,,431,,',
',,,,,29,29,,,,,,,,,,548,29,,,,,,,727,732,29,,29,29,,,,,,727,,727,,,',
'29,29,,,,,,,,,,,,,,,297,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,29,,',
',,,,,,,,,,29,,,,,,,,,,,431,,,431,,,,,431,,,,,29,,548,548,,,,,807,,,',
'811,,,,,,,29,,29,,,,,29,,,29,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,431,,,431,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,297',
',,,,,,431,,,,431,,,431,,,,,,,,,,,727,,,,,,,,,,,,,,,,,,,,,,,,431,,,,',
'727,,,,,,,,,,,,,431,,,431,,,,,,,,,,,,,431' ]
        racc_goto_table = arr = ::Array.new(2612, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'16,21,3,82,43,5,16,13,13,48,52,52,32,49,49,9,59,59,59,85,86,56,56,48',
'23,23,55,149,143,46,35,16,29,29,29,53,53,80,44,61,60,25,61,79,79,6,34',
'34,34,81,81,56,142,142,142,15,15,145,6,15,11,1,16,29,131,58,58,141,4',
'141,131,49,36,9,7,12,25,85,149,17,25,25,128,128,25,49,128,63,63,63,14',
'36,36,47,18,47,26,27,16,37,15,15,15,15,38,54,16,31,31,31,64,40,41,65',
'33,33,67,68,75,76,77,83,84,87,88,25,25,25,25,89,90,91,92,93,94,95,96',
'97,98,21,99,100,101,102,103,104,105,106,107,108,109,111,11,112,115,116',
'117,118,119,120,11,121,46,122,143,123,126,127,129,145,57,57,57,33,33',
'130,132,133,134,135,136,141,137,138,140,20,144,148,16,,82,20,,,,,,,',
',49,29,,20,20,16,,,20,20,20,,,,,,20,20,20,25,25,,,,36,,,142,142,19,',
'142,,,,19,,,20,20,,,20,20,,,20,20,59,17,17,17,,58,59,17,58,59,131,56',
'19,55,,,29,,16,,,60,29,16,,29,,44,,,,,55,,,20,,,,20,20,20,20,20,60,16',
'59,,,,,,81,149,142,6,15,15,149,56,,56,,,,80,33,33,,,,63,9,35,61,61,85',
'63,35,19,63,25,25,,,,,19,57,57,,31,,86,21,,32,31,40,41,31,143,,40,41',
',,,,3,3,13,,,52,,16,49,,,,,,,,20,20,20,20,20,,,20,20,20,33,,,,53,,,20',
',33,,,,60,,,34,49,,57,34,29,,,21,57,,,57,,,,,,19,,,,59,,33,,5,,,,,,',
'55,55,19,,59,,,22,20,,,,23,22,20,21,57,20,149,20,,,34,20,20,34,,3,55',
',,,,,25,55,49,29,22,22,22,,,,,49,20,,,79,,,,,,,,16,,20,20,16,,19,25',
',16,,19,22,,20,,20,149,63,49,29,85,85,33,33,,,,,,,,,19,,,45,,85,,62',
',45,,43,,25,13,22,,52,,25,49,,,22,79,,,20,56,79,,,,,45,45,45,,82,33',
',,53,,,,,,,,,,,,,,,3,20,,,,,3,59,45,21,,45,,,19,,,,,,,,,29,17,17,,,',
',17,,,,48,,60,,,,,,,,45,,,,22,20,,,45,,,15,,,,,,,,,,22,20,49,,16,16',
'29,,,,55,,,,20,25,,,85,,,,,85,,,,,16,,20,49,,,20,,,,,20,,20,,56,56,',
',,,,,,,20,16,16,,59,16,20,55,22,,,,22,22,,,45,16,16,55,,19,,62,,19,',
',,16,19,20,20,45,,22,15,20,,,16,16,,55,17,,,,,20,,,15,16,43,,,,,57,22',
'25,22,,85,,,33,,,,56,85,,,63,,25,,,57,20,,,,,,,,,,21,,,45,16,,,45,45',
'56,,,,,,22,16,,,,16,,,,,,,,,16,45,,,20,,,,,20,,56,56,,,,20,20,56,,,85',
'16,16,,,45,59,45,16,,,49,29,,,62,,57,,20,,,16,,16,,,,20,16,,62,16,,',
',56,,16,19,19,,,,,20,20,16,,20,,45,,,,,56,,,,,20,20,19,,,,16,,56,,,',
'20,,,,,2,,16,,20,,20,20,,,,,22,,,19,22,,,20,20,22,,,,,,19,19,,,2,,,',
',,,,19,,,,,,,,,20,,19,19,,,,,,,,,,20,,19,,,,,,,,,,20,,62,,20,62,,,,',
'62,22,,20,,,,,,,,,,,,45,,,,45,,,19,,45,20,20,20,,,,,20,,19,,,,,,,,,',
',,20,19,20,,,,,20,,,20,,,,,,20,,,,,,,,,20,,,,,,,,,,,62,,,62,,45,22,22',
'19,20,19,,,,,19,,,19,,,,20,2,19,,,,,22,22,,,,,,,,,,2,,,,,,,,,,,,,,,62',
'22,22,,62,22,,62,,,,,,,,,,22,22,,,,,,,,,,,22,,,,,,,,45,45,,22,22,62',
',,,2,,,,,2,,22,,,,,,,62,45,,62,,,,,,,,,,,,,62,,,,,,22,,,,,45,45,,,45',
',,,22,,,,,,,,45,45,,,22,,,,22,,,,45,,,,,22,,,,,28,45,45,,28,28,28,,',
',,,,,45,,,22,22,2,28,28,28,,22,,,,,,,,,,,28,,,22,,22,,,45,,22,,,22,',
',,,,22,,45,,,,,,,22,,,,,45,,,,45,,,,,,,,,45,,22,,,,,,,,,,,,,22,,,,,',
',45,45,,,,,,45,,,,,,,,,,,,,,45,,45,,,,,45,,,45,,,,,,45,,,,2,,,,2,45',
',,,2,,,,,,,,,,,,,,,,45,28,28,28,28,,,28,,24,24,,,45,,,,,,,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
',,,,,,,28,,28,,,,,,24,,24,,,28,,,,,,28,,,28,,,,,,,,,,,,,,,,,,,,,,,,',
',,28,,,,,,,,28,,28,,,,,,,,,,,,,,,,,,,39,,,,,,39,,,,,,,,,,,,39,39,,,',
'39,39,39,2,,,,,39,,,,,,,,,,,,,,,,,,,,28,,39,39,,2,39,39,24,,39,,,,,',
',2,2,,,,,,28,,28,28,28,2,,,,,,,,,,,2,2,,,,,,39,,,,39,39,39,39,39,,28',
',,28,,,28,,24,,,24,,,24,28,,,,,,,,24,,,,,,,,,28,,,,,,2,28,28,28,,,,',
',,,,2,28,,,28,,,,,24,,,24,2,,,,,,,,10,28,,,,,,,,39,39,39,39,39,,,39',
'39,39,10,,10,10,10,10,10,39,,,,,,,,,2,,2,,,28,28,2,,28,28,,,,24,28,',
',28,,,,,,,28,,,,,28,,,,28,,,,24,,,39,24,,,,,39,28,,39,,39,,,,24,39,',
'28,,,,,,,,24,,,,,,,,28,,,28,39,,28,,24,,,,,,24,,,39,39,,,28,,,,,,,10',
'24,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,28,,,39,10,10,,24,',
',28,28,28,,,,,,,,,,,,28,10,,28,,28,,,24,,39,,,24,,,,,,,,,,,,,,,,,,,',
',,,,,28,,,10,,,,,24,,,,,,,,,,,,39,28,,,,,,,,24,,,,,,28,,39,,,,,,,,,',
'28,,,39,,28,,28,,,,,,24,,24,,,,39,,,,39,,,28,,39,,39,,,,24,10,,,,,,',
'39,,,,,,39,,10,28,,,,,,,,,,28,,,28,,,,,24,,,24,39,39,28,,,,39,,10,,24',
',,,10,,,10,,,10,,,,,,28,10,10,28,,,10,,24,,,24,,,,,10,,,,,28,,,39,,',
',,24,,,28,,,,,,,,24,,,,,,,,,,,,,,,,10,,,,,,,,,,,39,,,,,39,,,,,,,39,39',
',,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,39,,,,,,,,,10,,,,,,,,,,,,39,10,,,10',
',,,,,,,39,39,,,,,,,,,,10,39,,,,,,,10,10,39,,39,39,,,,,,10,,10,,,,39',
'39,,,,,,,,,,,,,,,10,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,39,,,,,,',
',,,,,,39,,,,,,,,,,,10,,,10,,,,,10,,,,,39,,10,10,,,,,10,,,,10,,,,,,,39',
',39,,,,,39,,,39,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10',
',,10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,,,10,,,,10,',
',10,,,,,,,,,,,10,,,,,,,,,,,,,,,,,,,,,,,,10,,,,,10,,,,,,,,,,,,,10,,,10',
',,,,,,,,,,,,10' ]
        racc_goto_check = arr = ::Array.new(2612, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,    61,   914,  -293,    68,  -471,  -565,  -652,   nil,    10,
  1685,    52,    70,    -2,    80,    -4,    -2,    58,    30,   227,
   183,   -55,   437,  -167,  1248,    21,   -14,    86,  1240,     7,
   nil,    82,  -251,   -81,    17,  -226,  -356,  -342,  -605,  1560,
    78,    79,   nil,   -30,     3,   523,  -480,  -227,   -58,     4,
   nil,   nil,     1,    26,  -260,   -18,   -13,   145,  -234,    -9,
    10,  -398,   286,    62,  -335,  -144,   nil,  -329,  -470,   nil,
   nil,   nil,   nil,   nil,   nil,    51,  -184,    62,   nil,  -263,
  -584,  -447,  -308,    57,  -391,    14,  -496,    56,  -208,    75,
  -166,    74,    71,  -491,    72,  -493,  -370,  -684,    73,  -505,
  -180,  -507,  -682,    78,  -370,  -185,  -370,  -621,  -414,  -413,
   nil,   -86,  -412,   nil,   nil,  -106,  -433,  -105,  -432,  -474,
  -709,  -340,  -448,  -565,   nil,   nil,    93,    92,     5,    89,
  -168,  -273,    96,  -496,  -346,  -346,    99,  -465,  -469,   nil,
  -576,  -693,  -602,  -488,  -574,  -705,   nil,   nil,  -148,  -406 ]

racc_goto_default = [
   nil,   nil,   476,   nil,   nil,   nil,   736,   nil,     5,   nil,
     6,     7,   312,   nil,   nil,   nil,   205,    19,    14,   206,
   289,   nil,   204,   nil,   247,    18,   nil,   nil,    22,    23,
    24,   nil,    28,   602,   nil,   nil,   nil,   nil,   nil,   280,
    32,   nil,    34,    37,    36,   202,   510,   nil,   117,   384,
   116,   119,    71,    72,   nil,   nil,    45,   299,   nil,   300,
   549,   550,   429,   568,   nil,   nil,   257,   nil,   nil,    46,
    47,    48,    49,    50,    51,    52,   nil,   258,    58,   nil,
   nil,   nil,   nil,   nil,   nil,   492,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   238,   nil,   nil,   388,   259,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    70,    73,    74,   nil,   nil,   nil,
   nil,   527,   nil,   nil,   nil,   nil,   nil,   nil,   653,   654,
   655,   656,   nil,   832,   663,   664,   667,   670,   nil,   251 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 145, :_reduce_103,
  1, 145, :_reduce_none,
  1, 146, :_reduce_105,
  0, 186, :_reduce_106,
  4, 146, :_reduce_107,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_174,
  5, 160, :_reduce_175,
  3, 160, :_reduce_176,
  6, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  5, 160, :_reduce_181,
  4, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  3, 160, :_reduce_191,
  4, 160, :_reduce_192,
  4, 160, :_reduce_193,
  2, 160, :_reduce_194,
  2, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  3, 160, :_reduce_208,
  2, 160, :_reduce_209,
  2, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  3, 160, :_reduce_215,
  5, 160, :_reduce_216,
  1, 160, :_reduce_none,
  1, 156, :_reduce_218,
  1, 153, :_reduce_none,
  2, 153, :_reduce_220,
  2, 153, :_reduce_221,
  5, 153, :_reduce_222,
  2, 153, :_reduce_223,
  3, 153, :_reduce_224,
  3, 192, :_reduce_225,
  4, 192, :_reduce_226,
  4, 192, :_reduce_227,
  6, 192, :_reduce_228,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 163, :_reduce_231,
  2, 163, :_reduce_232,
  5, 163, :_reduce_233,
  2, 163, :_reduce_234,
  5, 163, :_reduce_235,
  4, 163, :_reduce_236,
  7, 163, :_reduce_237,
  3, 163, :_reduce_238,
  1, 163, :_reduce_none,
  4, 196, :_reduce_240,
  3, 196, :_reduce_241,
  5, 196, :_reduce_242,
  7, 196, :_reduce_243,
  2, 196, :_reduce_244,
  5, 196, :_reduce_245,
  4, 196, :_reduce_246,
  6, 196, :_reduce_247,
  7, 196, :_reduce_248,
  9, 196, :_reduce_249,
  3, 196, :_reduce_250,
  1, 196, :_reduce_none,
  0, 198, :_reduce_252,
  2, 166, :_reduce_253,
  1, 197, :_reduce_none,
  0, 199, :_reduce_255,
  3, 197, :_reduce_256,
  0, 200, :_reduce_257,
  4, 197, :_reduce_258,
  2, 195, :_reduce_259,
  2, 194, :_reduce_260,
  1, 194, :_reduce_none,
  1, 189, :_reduce_262,
  3, 189, :_reduce_263,
  3, 155, :_reduce_264,
  4, 155, :_reduce_265,
  2, 155, :_reduce_266,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_275,
  0, 221, :_reduce_276,
  4, 188, :_reduce_277,
  0, 222, :_reduce_278,
  5, 188, :_reduce_279,
  3, 188, :_reduce_280,
  3, 188, :_reduce_281,
  2, 188, :_reduce_282,
  4, 188, :_reduce_283,
  3, 188, :_reduce_284,
  0, 223, :_reduce_285,
  4, 188, :_reduce_286,
  1, 188, :_reduce_287,
  4, 188, :_reduce_288,
  3, 188, :_reduce_289,
  1, 188, :_reduce_290,
  5, 188, :_reduce_291,
  2, 188, :_reduce_292,
  1, 188, :_reduce_none,
  2, 188, :_reduce_294,
  6, 188, :_reduce_295,
  6, 188, :_reduce_296,
  0, 224, :_reduce_297,
  0, 225, :_reduce_298,
  7, 188, :_reduce_299,
  0, 226, :_reduce_300,
  0, 227, :_reduce_301,
  7, 188, :_reduce_302,
  5, 188, :_reduce_303,
  4, 188, :_reduce_304,
  5, 188, :_reduce_305,
  0, 228, :_reduce_306,
  0, 229, :_reduce_307,
  9, 188, :_reduce_308,
  0, 230, :_reduce_309,
  0, 231, :_reduce_310,
  7, 188, :_reduce_311,
  0, 232, :_reduce_312,
  0, 233, :_reduce_313,
  0, 234, :_reduce_314,
  9, 188, :_reduce_315,
  0, 235, :_reduce_316,
  0, 236, :_reduce_317,
  6, 188, :_reduce_318,
  0, 237, :_reduce_319,
  6, 188, :_reduce_320,
  0, 238, :_reduce_321,
  0, 239, :_reduce_322,
  9, 188, :_reduce_323,
  1, 188, :_reduce_324,
  1, 188, :_reduce_325,
  1, 188, :_reduce_326,
  1, 188, :_reduce_327,
  1, 152, :_reduce_328,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  2, 211, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 212, :_reduce_none,
  5, 212, :_reduce_337,
  1, 138, :_reduce_none,
  2, 138, :_reduce_339,
  1, 215, :_reduce_none,
  1, 215, :_reduce_341,
  1, 240, :_reduce_342,
  3, 240, :_reduce_343,
  1, 241, :_reduce_344,
  2, 241, :_reduce_345,
  4, 241, :_reduce_346,
  7, 241, :_reduce_347,
  6, 241, :_reduce_348,
  4, 241, :_reduce_349,
  3, 241, :_reduce_350,
  5, 241, :_reduce_351,
  4, 241, :_reduce_352,
  2, 241, :_reduce_353,
  1, 241, :_reduce_354,
  2, 241, :_reduce_355,
  1, 168, :_reduce_356,
  2, 168, :_reduce_357,
  1, 168, :_reduce_358,
  3, 168, :_reduce_359,
  0, 243, :_reduce_360,
  0, 244, :_reduce_361,
  6, 242, :_reduce_362,
  2, 164, :_reduce_363,
  4, 164, :_reduce_364,
  4, 164, :_reduce_365,
  0, 246, :_reduce_366,
  3, 210, :_reduce_367,
  4, 210, :_reduce_368,
  4, 210, :_reduce_369,
  3, 210, :_reduce_370,
  2, 210, :_reduce_371,
  1, 210, :_reduce_372,
  0, 247, :_reduce_373,
  0, 248, :_reduce_374,
  6, 209, :_reduce_375,
  0, 249, :_reduce_376,
  0, 250, :_reduce_377,
  6, 209, :_reduce_378,
  0, 253, :_reduce_379,
  6, 214, :_reduce_380,
  1, 251, :_reduce_none,
  4, 251, :_reduce_382,
  2, 251, :_reduce_383,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  6, 137, :_reduce_386,
  0, 137, :_reduce_387,
  1, 254, :_reduce_388,
  1, 254, :_reduce_none,
  1, 254, :_reduce_none,
  2, 255, :_reduce_391,
  1, 255, :_reduce_none,
  2, 139, :_reduce_393,
  1, 139, :_reduce_none,
  1, 201, :_reduce_395,
  1, 201, :_reduce_396,
  1, 201, :_reduce_none,
  1, 202, :_reduce_398,
  1, 257, :_reduce_none,
  2, 257, :_reduce_400,
  3, 258, :_reduce_401,
  1, 258, :_reduce_402,
  3, 203, :_reduce_403,
  3, 204, :_reduce_404,
  3, 205, :_reduce_405,
  3, 205, :_reduce_406,
  1, 261, :_reduce_407,
  3, 261, :_reduce_408,
  1, 262, :_reduce_none,
  2, 262, :_reduce_410,
  3, 206, :_reduce_411,
  3, 206, :_reduce_412,
  1, 264, :_reduce_413,
  3, 264, :_reduce_414,
  1, 259, :_reduce_415,
  2, 259, :_reduce_416,
  1, 260, :_reduce_417,
  2, 260, :_reduce_418,
  1, 263, :_reduce_419,
  0, 266, :_reduce_420,
  3, 263, :_reduce_421,
  0, 267, :_reduce_422,
  4, 263, :_reduce_423,
  1, 265, :_reduce_424,
  1, 265, :_reduce_425,
  1, 265, :_reduce_426,
  1, 265, :_reduce_none,
  2, 184, :_reduce_428,
  1, 184, :_reduce_429,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  3, 185, :_reduce_434,
  1, 256, :_reduce_none,
  1, 256, :_reduce_none,
  2, 256, :_reduce_437,
  2, 256, :_reduce_438,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_444,
  1, 177, :_reduce_445,
  1, 177, :_reduce_446,
  1, 177, :_reduce_447,
  1, 177, :_reduce_448,
  1, 177, :_reduce_449,
  1, 207, :_reduce_450,
  1, 151, :_reduce_451,
  1, 154, :_reduce_452,
  1, 154, :_reduce_453,
  1, 216, :_reduce_454,
  0, 269, :_reduce_455,
  4, 216, :_reduce_456,
  2, 216, :_reduce_457,
  4, 218, :_reduce_458,
  2, 218, :_reduce_459,
  6, 270, :_reduce_460,
  4, 270, :_reduce_461,
  4, 270, :_reduce_462,
  2, 270, :_reduce_463,
  4, 270, :_reduce_464,
  2, 270, :_reduce_465,
  2, 270, :_reduce_466,
  1, 270, :_reduce_467,
  0, 270, :_reduce_468,
  1, 276, :_reduce_469,
  1, 276, :_reduce_470,
  1, 276, :_reduce_471,
  1, 276, :_reduce_472,
  1, 276, :_reduce_473,
  1, 271, :_reduce_474,
  3, 271, :_reduce_475,
  3, 277, :_reduce_476,
  1, 272, :_reduce_477,
  3, 272, :_reduce_478,
  1, 278, :_reduce_none,
  1, 278, :_reduce_none,
  2, 273, :_reduce_481,
  1, 273, :_reduce_482,
  1, 279, :_reduce_none,
  1, 279, :_reduce_none,
  2, 275, :_reduce_485,
  2, 274, :_reduce_486,
  0, 274, :_reduce_487,
  1, 219, :_reduce_none,
  0, 280, :_reduce_489,
  5, 219, :_reduce_490,
  1, 208, :_reduce_491,
  2, 208, :_reduce_492,
  2, 208, :_reduce_493,
  1, 191, :_reduce_none,
  3, 191, :_reduce_495,
  3, 281, :_reduce_496,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 245, :_reduce_none,
  1, 245, :_reduce_none,
  1, 245, :_reduce_none,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  0, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 217, :_reduce_516,
  1, 217, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_519,
  0, 142, :_reduce_520 ]

racc_reduce_n = 521

racc_shift_n = 928

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tLBRACK2 => 91,
  :tRBRACK => 92,
  :tLBRACE => 93,
  :tLBRACE_ARG => 94,
  :tSTAR => 95,
  :tSTAR2 => 96,
  :tAMPER => 97,
  :tAMPER2 => 98,
  :tTILDE => 99,
  :tPERCENT => 100,
  :tDIVIDE => 101,
  :tPLUS => 102,
  :tMINUS => 103,
  :tLT => 104,
  :tGT => 105,
  :tPIPE => 106,
  :tBANG => 107,
  :tCARET => 108,
  :tLCURLY => 109,
  :tRCURLY => 110,
  :tBACK_REF2 => 111,
  :tSYMBEG => 112,
  :tSTRING_BEG => 113,
  :tXSTRING_BEG => 114,
  :tREGEXP_BEG => 115,
  :tWORDS_BEG => 116,
  :tQWORDS_BEG => 117,
  :tSTRING_DBEG => 118,
  :tSTRING_DVAR => 119,
  :tSTRING_END => 120,
  :tSTRING => 121,
  :tSYMBOL => 122,
  :tNL => 123,
  :tEH => 124,
  :tCOLON => 125,
  :tCOMMA => 126,
  :tSPACE => 127,
  :tSEMI => 128,
  :tLAST_TOKEN => 129,
  :tEQL => 130,
  :tLOWEST => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "@28",
  "block_par",
  "block_var",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "when_args",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_22(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_45(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_46(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]

                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no2"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      raise "no3"

                      if val[4] then
                        block_dup_check result, val[4]

                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_80(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (in_def || in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 101 omitted

# reduce 102 omitted

def _reduce_103(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 104 omitted

def _reduce_105(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_106(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_107(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

def _reduce_174(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_175(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_176(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_177(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2].sexp_type = :arglist if val[2]
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_180(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_181(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_182(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_183(val, _values, result)
                      backref_assign_error val[0]
                    
    result
end

def _reduce_184(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_185(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_193(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_194(val, _values, result)
                      if val[1].sexp_type == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@"
                      end
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", argl(val[2])))
                    
    result
end

def _reduce_207(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_208(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_209(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_210(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_211(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_214(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_215(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 217 omitted

def _reduce_218(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 219 omitted

def _reduce_220(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_223(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_224(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_225(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_226(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_227(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_228(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 229 omitted

# reduce 230 omitted

def _reduce_231(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_232(val, _values, result)
                      result = arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = arg_concat val[0], val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_237(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = arg_concat val[0], val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      args = list_prepend val[0], val[2]
                      result = arg_blk_pass args, val[3]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = arg_concat s(:array, val[0]), val[3]
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = arg_blk_pass result, val[1]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = arg_blk_pass result, val[4]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = arg_blk_pass result, val[3]
                    
    result
end

def _reduce_247(val, _values, result)
                      arg_value, _, args, _, assocs, opt_block = val
                      result = s(:array, arg_value).add_all(args)
                      result.add(s(:hash, *assocs.sexp_body))
                      result = arg_blk_pass result, opt_block
                    
    result
end

def _reduce_248(val, _values, result)
                      result = arg_concat s(:array, val[0]).add(s(:hash, *val[2].sexp_body)), val[5]
                      result = arg_blk_pass result, val[6]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = arg_blk_pass result, val[8]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 251 omitted

def _reduce_252(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_253(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 254 omitted

def _reduce_255(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_256(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_257(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_258(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = arg_concat val[0], val[3]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

def _reduce_275(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_276(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_277(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_278(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_279(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_280(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_283(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_284(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_286(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_287(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_292(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 293 omitted

def _reduce_294(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter

                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_297(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_298(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_299(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_300(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_301(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_303(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_304(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_305(val, _values, result)
                      (_, line), _, _, elsebody, _ = val
                      result = new_case nil, elsebody, line
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_308(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_309(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_310(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (in_def || in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_311(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_313(val, _values, result)
                      result = in_def
                      self.in_def = false
                    
    result
end

def _reduce_314(val, _values, result)
                      result = in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        in_def or in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.in_def

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      in_def = val[2]

                      result = new_defn val

                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_322(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_323(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_327(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_328(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

def _reduce_342(val, _values, result)
                      result = s(:array, clean_mlhs(val[0]))
                    
    result
end

def _reduce_343(val, _values, result)
                      result = list_append val[0], clean_mlhs(val[2])
                    
    result
end

def _reduce_344(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_345(val, _values, result)
                      result = block_var18 val[0], nil, nil
                    
    result
end

def _reduce_346(val, _values, result)
                      result = block_var18 val[0], nil, val[3]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = block_var18 val[0], val[3], val[6]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = block_var18 val[0], s(:splat), val[5]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = block_var18 val[0], val[3], nil
                    
    result
end

def _reduce_350(val, _values, result)
                      result = block_var18 val[0], s(:splat), nil
                    
    result
end

def _reduce_351(val, _values, result)
                      result = block_var18 nil, val[1], val[4]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = block_var18 nil, s(:splat), val[3]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = block_var18 nil, val[1], nil
                    
    result
end

def _reduce_354(val, _values, result)
                      result = block_var18 nil, s(:splat), nil
                    
    result
end

def _reduce_355(val, _values, result)
                      result = block_var18 nil, nil, val[1]
                    
    result
end

def _reduce_356(val, _values, result)
 result = 0 
    result
end

def _reduce_357(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_358(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[1]
                      self.lexer.command_start = true
                    
    result
end

def _reduce_360(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_361(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_362(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_363(val, _values, result)
                      block_dup_check val[0], val[1]

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_364(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_365(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_366(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_367(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_368(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_371(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_372(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_373(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_374(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_375(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_376(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_377(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_378(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_379(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_380(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      result = list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_383(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

# reduce 384 omitted

# reduce 385 omitted

def _reduce_386(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_387(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_388(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 389 omitted

# reduce 390 omitted

def _reduce_391(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 394 omitted

def _reduce_395(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_396(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_401(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_402(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_405(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0] << new_word_list_entry(val)
                    
    result
end

# reduce 409 omitted

def _reduce_410(val, _values, result)
                      result = literal_concat val[0], val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_412(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_414(val, _values, result)
                      result = val[0] << new_qword_list_entry(val)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_416(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_417(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_418(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_420(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_421(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_422(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_423(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_424(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_425(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_426(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 427 omitted

def _reduce_428(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_429(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

def _reduce_434(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 435 omitted

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_438(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

# reduce 441 omitted

# reduce 442 omitted

# reduce 443 omitted

def _reduce_444(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_445(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_446(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_447(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_448(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_449(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_450(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_451(val, _values, result)
                      result = assignable val[0]
                    
    result
end

def _reduce_452(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_453(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_454(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_455(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_456(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_457(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_461(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_462(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_463(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_464(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_465(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_466(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_467(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_468(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_469(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_470(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_471(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_472(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_473(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_475(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_476(val, _values, result)
                      result = assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = block_append val[0], val[2]
                    
    result
end

# reduce 479 omitted

# reduce 480 omitted

def _reduce_481(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_482(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 483 omitted

# reduce 484 omitted

def _reduce_485(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_486(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_487(val, _values, result)
                      result = nil
                    
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_491(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_493(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_496(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

def _reduce_516(val, _values, result)
 yyerrok 
    result
end

# reduce 517 omitted

# reduce 518 omitted

def _reduce_519(val, _values, result)
 yyerrok 
    result
end

def _reduce_520(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby18Parser
