#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby19Parser < RubyParser::Parser


require "ruby_parser/legacy/ruby_lexer"
require "ruby_parser/legacy/ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-481,8,69,70,71,12,57,-481,-481,-481,63,64,-481,-481,-481,67,-481,65',
'66,68,32,33,72,73,-481,259,-481,-481,-481,31,30,29,95,94,96,97,-481',
'-481,22,-481,-481,-481,-481,-481,11,47,10,13,99,98,100,89,56,91,90,92',
'717,93,101,102,551,87,88,551,44,45,43,-481,-481,-481,-481,-481,-481',
'-481,-481,-481,-481,-481,-481,-481,-481,259,-93,-481,-481,-481,42,-481',
'-481,35,674,-481,58,59,-481,-481,60,-481,37,-481,3,-481,46,-481,-481',
'-481,-481,-481,-481,-481,23,-481,258,-481,-99,85,79,81,82,83,84,-95',
'103,-100,80,86,-481,-481,-481,-481,-484,-481,551,62,-481,-481,551,-484',
'-484,-484,-107,629,-484,-484,-484,199,-484,697,697,-93,207,208,551,592',
'-484,210,-484,-484,-484,200,629,-102,716,-104,-103,-101,-484,-484,258',
'-484,-484,-484,-484,-484,107,628,-106,107,629,106,-102,107,106,-104',
'-93,-101,106,-93,-95,697,107,211,201,-93,628,106,673,-484,-484,-484',
'-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,206,628,-484',
'-484,-484,591,-484,-484,-90,-103,-484,259,-95,-484,-484,-95,-484,-91',
'-484,250,-484,-95,-484,-484,-484,-484,-484,-484,-484,211,-484,-557,-484',
'-105,-98,107,107,107,882,107,106,106,106,-554,106,-484,-484,-484,-484',
'-284,-484,207,208,-484,-484,107,-284,-284,-284,629,106,305,-284,-284',
'-102,-284,-104,-103,-101,-102,-97,-104,-103,-101,-93,-557,-406,-95,107',
'-92,207,208,-555,106,579,-284,-284,584,-284,-284,-284,-284,-284,628',
'79,386,-481,252,258,-558,388,387,80,-481,253,207,208,688,-554,535,534',
'533,-481,536,-94,306,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-554,579,-284,-284,-284,-484,611,-481,-96,211,-284',
'211,-484,-284,-481,581,580,-555,-284,-415,-284,-484,-284,-284,-284,-284',
'-284,-284,-284,231,-284,688,-284,535,534,533,-484,536,-561,-555,211',
'341,-495,-484,-561,-284,-284,205,-96,-491,-284,-561,-561,-561,-105,798',
'-491,-561,-561,365,-561,228,581,580,-85,230,229,226,227,-561,-71,727',
'-415,518,368,-490,517,-561,579,-415,-561,-561,-490,-561,-561,-561,-561',
'-561,-415,-98,-99,-561,203,384,-332,-107,-496,579,-561,204,579,-332',
'518,-557,579,520,-415,-561,202,921,-332,-561,-561,-561,-561,-561,-561',
'-561,-561,-561,-561,-561,-561,-561,-561,-561,-495,-561,-561,-561,-561',
'612,434,518,389,-561,520,-561,-561,581,580,577,-557,-561,-100,-561,-561',
'-561,-561,-561,-561,-561,-561,-561,506,-561,-561,-561,581,580,582,581',
'580,587,-561,581,580,593,-90,-561,-561,-561,-496,-94,-99,-561,-561,-561',
'-561,-103,-107,-561,-561,-561,538,-561,535,534,533,433,536,430,-492',
'-489,-561,-561,-561,-561,431,-492,-489,518,-106,749,520,-561,-561,432',
'-561,-561,-561,-561,-561,506,-91,307,308,605,-486,750,-100,834,540,527',
'688,-486,535,534,533,435,536,544,543,547,546,436,-561,-561,-561,-561',
'-561,-561,-561,-561,-561,-561,-561,-561,-561,-561,210,-102,-561,-561',
'-561,-97,751,-561,468,-93,-561,-106,684,-561,-561,-102,-561,-104,-561',
'-101,-561,687,-561,-561,-561,-561,-561,-561,-561,261,-561,-561,-561',
'763,-487,535,534,533,107,536,708,-487,231,106,709,-561,-561,-561,-561',
'-284,-561,606,735,-561,-103,107,-284,-284,-284,478,106,-284,-284,-284',
'688,-284,535,534,533,481,536,540,501,502,228,-284,-284,-284,230,229',
'544,543,547,546,483,-284,-284,211,-284,-284,-284,-284,-284,-95,-92,777',
'-493,557,-494,-104,-101,-70,684,-493,688,-494,535,534,533,211,536,687',
'-493,762,-494,491,-284,-284,-284,-284,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,107,497,-284,-284,-284,106,752,-284,498,492,-284',
'499,684,-284,-284,264,-284,496,-284,211,-284,874,-284,-284,-284,-284',
'-284,-284,-284,261,-284,538,-284,535,534,533,688,536,535,534,533,503',
'536,507,-277,-284,-284,-284,-284,-278,-284,-277,-488,-284,-105,508,-278',
'-278,-278,-488,-277,-278,-278,-278,538,-278,535,534,533,540,536,207',
'208,231,684,-278,-278,-278,544,543,547,546,207,208,521,-278,-278,574',
'-278,-278,-278,-278,-278,688,575,535,534,533,557,536,107,378,540,721',
'688,106,535,534,533,561,536,544,543,547,546,562,-278,-278,-278,-278',
'-278,-278,-278,-278,-278,-278,-278,-278,-278,-278,107,684,-278,-278',
'-278,106,231,-278,802,777,-278,586,684,-278,-278,590,-278,597,-278,-263',
'-278,599,-278,-278,-278,-278,-278,-278,-278,211,-278,538,-278,535,534',
'533,107,536,228,207,208,106,230,229,509,-278,-278,-278,-278,-562,-278',
'510,603,-278,802,777,-562,-562,-562,604,432,-562,-562,-562,538,-562',
'535,534,533,540,536,231,261,615,-562,-562,-562,-562,544,543,547,546',
'618,231,231,-562,-562,231,-562,-562,-562,-562,-562,688,231,535,534,533',
'211,536,825,826,540,228,827,101,102,230,229,226,227,544,543,547,546',
'211,-562,-562,-562,-562,-562,-562,-562,-562,-562,-562,-562,-562,-562',
'-562,211,684,-562,-562,-562,559,-85,-562,649,211,-562,512,560,-562,-562',
'660,-562,666,-562,667,-562,558,-562,-562,-562,-562,-562,-562,-562,211',
'-562,-562,-562,688,670,535,534,533,483,536,676,678,681,682,-285,-562',
'-562,-562,-562,-563,-562,-285,690,-562,691,693,-563,-563,-563,557,-285',
'-563,-563,-563,538,-563,535,534,533,700,536,540,729,730,-563,-563,-563',
'-563,-264,736,468,468,547,546,211,-563,-563,712,-563,-563,-563,-563',
'-563,688,711,535,534,533,754,536,481,483,540,713,846,660,535,534,533',
'211,536,544,543,547,546,261,-563,-563,-563,-563,-563,-563,-563,-563',
'-563,-563,-563,-563,-563,-563,261,684,-563,-563,-563,-284,660,-563,231',
'231,-563,777,-284,-563,-563,762,-563,-558,-563,796,-563,-284,-563,-563',
'-563,-563,-563,-563,-563,211,-563,-563,-563,-285,777,712,-493,806,211',
'-265,-285,833,943,-493,836,-563,-563,-563,-563,-285,-563,713,-493,-563',
'281,69,70,71,12,57,838,841,-494,63,64,842,762,848,67,-494,65,66,68,32',
'33,72,73,660,-494,854,-263,858,31,30,29,95,94,96,97,860,846,22,535,534',
'533,861,536,11,47,211,13,99,98,100,89,56,91,90,92,-284,93,101,102,863',
'87,88,-284,44,45,43,948,-558,866,868,-277,-284,688,949,535,534,533,-277',
'536,870,-285,870,947,211,875,42,-277,-285,283,877,879,58,59,211,889',
'60,-285,37,890,211,893,46,763,-266,535,534,533,900,536,23,540,901,904',
'906,85,79,81,82,83,84,907,547,546,80,86,281,69,70,71,12,57,923,62,925',
'63,64,926,930,934,67,540,65,66,68,32,33,72,73,937,544,543,547,546,31',
'30,29,95,94,96,97,939,870,22,110,111,112,113,114,11,47,870,13,99,98',
'100,89,56,91,90,92,-284,93,101,102,944,87,88,-284,44,45,43,945,-558',
'950,952,870,-284,688,870,535,534,533,870,536,110,111,112,113,114,956',
'42,923,666,35,923,980,58,59,981,982,60,984,37,870,870,870,46,763,-558',
'535,534,533,-557,536,23,540,211,870,923,85,79,81,82,83,84,870,547,546',
'80,86,281,69,70,71,12,57,,62,,63,64,,,,67,540,65,66,68,32,33,72,73,',
'544,543,547,546,31,30,29,95,94,96,97,,,22,110,111,112,113,114,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,110,111,112',
'113,114,,688,,535,534,533,,536,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46',
'538,,535,534,533,,536,23,540,,,,85,79,81,82,83,84,,547,546,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,540,65,66,68,32,33,72,73,,544,543,547',
'546,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,688,,535,534,533,,536,,,,,,,42,,',
'283,,,58,59,,,60,,37,,,,46,763,,535,534,533,,536,23,540,,,,85,79,81',
'82,83,84,,547,546,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,540,65,66',
'68,32,33,72,73,,544,543,547,546,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,688',
',535,534,533,,536,,,,,,,42,,,283,,,58,59,,,60,,37,,,688,46,535,534,533',
',536,,,23,540,,,,85,79,81,82,83,84,,547,546,80,86,281,69,70,71,12,57',
',62,,63,64,,,540,67,,65,66,68,32,33,72,73,,547,546,,,31,30,29,95,94',
'96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,688,,535,534,533,,536,,,,,,,42,,,35,,,58,59,,,60,,37',
',,688,46,535,534,533,,536,,,23,540,,,,85,79,81,82,83,84,,547,546,80',
'86,8,69,70,71,12,57,,62,,63,64,,,540,67,,65,66,68,32,33,72,73,,547,546',
',,31,30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248,243',
'244,,-580,-580,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71',
'12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,231,235,240,241,242,237,239,247,248,243,244,,-580,-580,,,245',
'246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232',
'23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,',
',,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-580,-580',
'-580,-580,237,239,,,-580,-580,,,,,,245,246,,42,,,35,,,58,59,,,60,,37',
'228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84',
',,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,,35,,,58',
'59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233,,,,85,79,81,82',
'83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246,,42,,',
'35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233,,,,85,79',
'81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32',
'33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245,246',
',42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233,',
',,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,,,,,,,245',
'246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,,,232,23,233',
',,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,-580,-580,-580,-580',
'237,239,,,-580,-580,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234',
'46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86',
'281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101',
'102,,87,88,,44,45,43,231,-580,-580,-580,-580,237,239,,,-580,-580,,,',
',,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238',
'236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62',
',63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,',
',,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231',
'-580,-580,-580,-580,237,239,,,-580,-580,,,,,,245,246,,42,,,35,,,58,59',
',,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81',
'82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,231,-580,-580,-580,-580,237,239',
',,-580,-580,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229',
'226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71',
'12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,231,-580,-580,-580,-580,237,239,,,-580,-580,,,,,,245,246,,42',
',,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23,233',
',,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65',
'66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242',
'237,239,,,243,244,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46',
'230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80,86,281',
'69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,231,235,240,241,242,237,239,247,,243,244,,,,,,245,246',
',42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,238,236,232,23',
'233,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67',
',65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13',
'99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,,,,,',
',,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227,',
',,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,',
',67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,',
',,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,234,46,230,229,226,227',
',,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,',
',,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,,,,,,',
',,,,,,,,,245,246,,42,,,35,,,58,59,,,60,,37,228,,,46,230,229,226,227',
',,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,',
',,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47',
',13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,',
',,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83',
'84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,',
',60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71',
'12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57,,62,,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,',
',,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,',
'80,86,281,69,70,71,12,57,,62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,',
',31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60',
',37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,281,69,70,71,12,57',
',62,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11,47,10,13,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58',
'59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
',57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,538,,535,534,533,46,536',
',,,,,,221,,,,-414,85,79,81,82,83,84,-414,-414,-414,80,86,-414,-414,-414',
',-414,,,62,,540,721,,,-414,-414,-414,,,544,543,547,546,,,-414,-414,',
'-414,-414,-414,-414,-414,,,,,,,,,,,,,,,,,,,,,,,,-414,-414,-414,-414',
'-414,-414,-414,-414,-414,-414,-414,-414,-414,-414,,,-414,-414,-414,',
',-414,,261,-414,,,-414,-414,,-414,,-414,,-414,,-414,-414,-414,-414,-414',
'-414,-414,,-414,-414,-414,,,,,,,,,,,,-292,-414,-414,,-414,,-414,-292',
'-292,-292,,,-292,-292,-292,,-292,,,,,,,,,,-292,-292,,,,,,,,,-292,-292',
',-292,-292,-292,-292,-292,,,,,,,,,,,,,,,,,,,,,,,,-292,-292,-292,-292',
'-292,-292,-292,-292,-292,-292,-292,-292,-292,-292,,,-292,-292,-292,',
',-292,,264,-292,,,-292,-292,,-292,,-292,,-292,,-292,-292,-292,-292,-292',
'-292,-292,,-292,,-292,,,,,,,,,,,,,-292,-292,,-292,,-292,69,70,71,,57',
',,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30',
'29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273',
',271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,',
',,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,287,,,,,,,,,,,,,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,222,,,58,59,,',
'60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,304,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,,,46,,',
',,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,600,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,231,235,240,241,242,237',
'239,247,248,243,244,,224,225,,,245,246,,216,,,222,,,58,59,,,60,,,228',
',234,46,230,229,226,227,238,236,232,23,233,,,,85,79,81,82,83,84,,,,80',
'86,107,249,69,70,71,106,57,62,,,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,335,,,35,,,58,59,,,60',
',37,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,12,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,11',
'47,10,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,378,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,',
',,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,12,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,',
',,,31,30,29,95,94,96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60',
',37,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,',
',,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,394,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43',
',,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,394,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,',
',62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,211,69,70,71,,57,,62,,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,',
',47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33',
'72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46',
',,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,211,69,70,71,,57,,62,,63,64',
',,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,12',
'57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97',
',,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,222',
',,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,494',
'57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96',
'97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,',
'302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,512',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216',
',,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95',
'94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98',
'100,563,56,91,90,564,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,565',
',,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,296,,,99,98,100,563,56,91,90,564,,93,101,102,,87',
'88,,,,302,,,,,,,,,,,,,,,,,,,,565,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,-579,85,79,81,82,83,84,-579',
'-579,-579,80,86,-579,-579,-579,,-579,,,62,,,,,,-579,-579,-579,,,,,,',
',,-579,-579,,-579,-579,-579,-579,-579,,,,,,,,,,,,,,,,,,,,,,,,-579,-579',
'-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,-579,,,-579,-579',
'-579,,,-579,,261,-579,,,-579,-579,,-579,,-579,,-579,,-579,-579,-579',
'-579,-579,-579,-579,,-579,-579,-579,,,,,,,,,,,,,-579,-579,,-579,,-579',
'69,70,71,,57,,,,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,',
',,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47',
',,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,',
',,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,-579',
'85,79,81,82,83,84,-579,-579,-579,80,86,-579,-579,-579,,-579,,,62,,,',
',,,-579,,,,,,,,,,-579,-579,,-579,-579,-579,-579,-579,,,,,,,,,,,,,-579',
',,,,,,-579,-579,-579,,,-579,-579,-579,,-579,,,,,,-579,,,,-579,,,-579',
',,,,261,-579,-579,-579,,-579,-579,-579,-579,-579,,,,,,,,,,,,,,-579,',
',,,,,,,,,,,-579,,,,,-579,,,-579,,,,,,,-579,,,,,261,-579,,,,,,,,,,,,',
',,,,,,,,,-579,,,,,,69,70,71,,57,,,-579,63,64,,,-579,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,643,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294',
'295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,12,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94',
'96,97,,,22,,,,,,11,47,,13,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,42,,,35,,,58,59,,,60,,37,,,,46,,,,,,,,23',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,378,,62,63,64,,,,67,,65',
'66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99',
'98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292',
',,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,',
',,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67',
',65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296',
',,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,',
',,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,',
'67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72',
'73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91',
'90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,643,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69',
'70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,',
'67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,',
'99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,',
',,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83',
'84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,',
',,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,733,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97',
',,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45',
'43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,',
'85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,643,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,',
'80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294',
'295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,275,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,',
',,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,',
'62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59',
',,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57',
',,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299',
'72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56',
'91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,',
',58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88',
',44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,292',
',,288,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,,,302,,,,,,,,,,,,,,,,,,,,292,,,288,,,58,59,,,60,,,,,,,,,,,,,,,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,394,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295',
'301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102',
',87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,',
',,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,',
'67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,',
'47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,',
',,,,,,,,,,216,,,222,,,58,59,,,60,,273,,,,46,,,,,,,,221,,,,,85,79,81',
'82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73',
',,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92,',
'93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60',
',,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,223,,,,,',
',47,,,99,98,100,89,56,91,90,92,275,93,101,102,,87,88,,44,45,43,,,,,',
',,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,273,,271,,46,,,,,,,,221,,,,,85',
'79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298',
'299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89',
'56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222',
',,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96',
'97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44',
'45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,',
',,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86',
'69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301',
'95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,',
',,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,',
'65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,',
',99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,',
',,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84',
',,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,',
'294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93',
'101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,',
',,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63',
'64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223',
',,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,',
',,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221,,,,,85,79',
'81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72',
'73,,,,,,31,30,29,95,94,96,97,,,22,,,,,,,47,,,99,98,100,89,56,91,90,92',
',93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,',
'60,,,,,,46,,,,,,,,23,,,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62',
'63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29,95,94,96,97,,,22,,,',
',,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,',
',,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,23,,,,,85,79,81,82',
'83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73',
',,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90',
'92,275,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58',
'59,,,60,,,,271,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80,86,69,70,71',
',57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95,94',
'96,97,,,223,,,,,,,47,,,99,98,100,89,56,91,90,92,,93,101,102,,87,88,',
'44,45,43,,,,,,,,,,,,,,,,,,,,216,,,222,,,58,59,,,60,,,,,,46,,,,,,,,221',
',,,,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66',
'68,298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,296,,,99,98',
'100,89,56,91,90,92,,93,101,102,,87,88,,,,302,,,,,,,,,,,,,,,,,,,,903',
',,222,,,58,59,,,60,,,,,,,,,,,,,,,,,,,85,79,81,82,83,84,,,,80,86,69,70',
'71,,57,,,62,63,64,,,,67,,65,66,68,298,299,72,73,,,,,,294,295,301,95',
'94,96,97,,,223,,,,,,,296,,,99,98,100,89,56,91,90,92,,93,101,102,,87',
'88,,,,302,,,,,,,,,,,,,,,,,,,,913,,,222,,,58,59,,,60,,,,,,,,,,,,,,,,',
',,85,79,81,82,83,84,,,,80,86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68',
'298,299,72,73,,,,,,294,295,301,95,94,96,97,,,223,,,,,,,47,,,99,98,100',
'89,56,91,90,92,,93,101,102,,87,88,,44,45,43,,,,,,,,,,,,,,,,,,,,216,',
',222,,,58,59,,,60,,643,,,,46,,,,,,,,221,,,,,85,79,81,82,83,84,,,,80',
'86,69,70,71,,57,,,62,63,64,,,,67,,65,66,68,32,33,72,73,,,,,,31,30,29',
'95,94,96,97,,,223,,,,,616,,47,,,99,98,100,89,56,91,90,92,275,93,101',
'102,,87,88,,44,45,43,231,235,240,241,242,237,239,247,248,243,244,,224',
'225,,,245,246,,216,,,222,,,58,59,,,60,,273,228,271,234,46,230,229,226',
'227,238,236,232,221,233,,,,85,79,81,82,83,84,,,,80,86,,249,,-240,,,',
'62,166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180',
',,,,,161,168,159,160,156,157,158,118,120,117,,119,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86',
'166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180',
',,,,,161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86',
'166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180',
',,,,,161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86',
'166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180',
',,,,,161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,85,,,,,,,,,,86',
'166,177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196',
'175,164,178,182,184,176,169,,,,185,192,187,350,349,351,348,162,181,180',
',,,,,161,168,159,160,345,346,347,343,120,91,90,344,,93,,,,,,,151,152',
',148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,357,',
',,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,,,155,166',
'177,167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175',
'164,178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,',
',,,,161,168,159,160,156,157,158,118,120,375,374,119,,376,,,,,,,151,152',
',148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,',
',,,145,144,,129,150,147,146,142,143,137,135,127,149,128,,,155,166,177',
'167,190,163,183,173,172,193,194,188,171,170,165,191,195,196,175,164',
'178,182,184,176,169,,,,185,192,187,186,179,189,174,162,181,180,,,,,',
'161,168,159,160,156,157,158,118,120,,,119,,,,,,,,,151,152,,148,130,131',
'132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,616,,,,,,,145,144',
',129,150,147,146,142,143,137,135,127,149,128,,,155,231,235,240,241,242',
'237,239,247,248,243,244,,224,225,,,245,246,,,,,,,,,,,,,,,228,,234,,230',
'229,226,227,238,236,232,,233,403,407,,,404,,,,,,,,,151,152,249,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,410,414,155,,409,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,465,407,155,,466,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129,150,147,146,142',
'143,137,135,127,149,128,465,407,155,,466,,,,,,,,,151,152,,148,130,131',
'132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,,,,,,,,,145,144,,129',
'150,147,146,142,143,137,135,127,149,128,619,407,155,,620,,,,,,,,,151',
'152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261',
',,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149,128,621,414',
'155,,622,,,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153',
'154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135',
'127,149,128,653,407,155,,654,,,,,,,,,151,152,,148,130,131,132,139,136',
'138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147',
'146,142,143,137,135,127,149,128,656,414,155,,657,,,,,,,,,151,152,,148',
'130,131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,',
',145,144,,129,150,147,146,142,143,137,135,127,149,128,619,407,155,,620',
',,,,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,621,414,155,,622,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,703,407,155,,704,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,705,414,155,,706,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,810,414,155,,811,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,465,407,155,,466,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,970,414,155,,969,,',
',,,,,,151,152,,148,130,131,132,139,136,138,,,133,134,,,,153,154,140',
'141,,,,,,261,,,,,,,,145,144,,129,150,147,146,142,143,137,135,127,149',
'128,973,407,155,,974,,,,,,,,,151,152,,148,130,131,132,139,136,138,,',
'133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145,144,,129,150,147,146',
'142,143,137,135,127,149,128,975,414,155,,976,,,,,,,,,151,152,,148,130',
'131,132,139,136,138,,,133,134,,,,153,154,140,141,,,,,,261,,,,,,,,145',
'144,,129,150,147,146,142,143,137,135,127,149,128,,,155,231,235,240,241',
'242,237,239,247,248,243,244,,224,225,,,245,246,,,,,,,,,,,,,,,228,,234',
',230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248',
'243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227',
'238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225',
',249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233',
'231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,',
',,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241',
'242,237,239,247,248,243,244,,224,225,211,249,245,246,,,,,,,,,,,,,,,228',
',234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239,247',
'248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226',
'227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244,,224',
'225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232',
',233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245,246',
',,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240',
'241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,',
'228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237,239',
'247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229',
'226,227,238,236,232,,233,231,235,240,241,242,237,239,247,248,243,244',
',224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236',
'232,,233,231,235,240,241,242,237,239,247,248,243,244,,224,225,,249,245',
'246,,,,,,,,,,,,,,,228,,234,,230,229,226,227,238,236,232,,233,231,235',
'240,241,242,237,239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,',
',,,,228,,234,,230,229,226,227,238,236,232,,233,231,235,240,241,242,237',
'239,247,248,243,244,,224,225,,249,245,246,,,,,,,,,,,,,,,228,,234,,230',
'229,226,227,238,236,232,,233,,,,,,,,,,,,,,,,249' ]
        racc_action_table = arr = ::Array.new(23644, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'89,2,2,2,2,2,2,89,89,89,2,2,89,89,89,2,89,2,2,2,2,2,2,2,89,61,89,89',
'89,2,2,2,2,2,2,2,89,89,2,89,89,89,89,89,2,2,2,2,2,2,2,2,2,2,2,2,569',
'2,2,2,325,2,2,326,2,2,2,89,89,89,89,89,89,89,89,89,89,89,89,89,89,297',
'653,89,89,89,2,89,89,2,526,89,2,2,89,89,2,89,2,89,1,89,2,89,89,89,89',
'89,89,89,2,89,61,89,332,2,2,2,2,2,2,654,3,333,2,2,89,89,89,89,92,89',
'807,2,89,89,857,92,92,92,336,463,92,92,92,13,92,553,554,653,427,427',
'878,369,92,22,92,92,92,15,472,973,569,974,975,988,92,92,297,92,92,92',
'92,92,325,463,561,326,473,325,703,569,326,704,653,808,569,653,654,809',
'5,22,16,653,472,5,526,92,92,92,92,92,92,92,92,92,92,92,92,92,92,19,473',
'92,92,92,369,92,92,332,705,92,28,654,92,92,654,92,333,92,25,92,654,92',
'92,92,92,92,92,92,427,92,975,92,706,336,807,553,554,807,857,807,553',
'554,563,857,92,92,92,92,409,92,664,664,92,92,878,409,409,409,635,878',
'39,409,409,973,409,974,975,988,973,561,974,975,988,703,705,28,704,809',
'808,724,724,564,809,363,409,409,363,409,409,409,409,409,635,77,117,563',
'27,28,706,117,117,77,563,27,20,20,687,563,687,687,687,563,687,705,42',
'409,409,409,409,409,409,409,409,409,409,409,409,409,409,563,588,409',
'409,409,564,409,343,706,47,409,664,564,409,343,363,363,564,409,772,409',
'564,409,409,409,409,409,409,409,458,409,874,409,874,874,874,344,874',
'656,564,724,69,214,344,410,409,409,18,409,345,409,410,410,410,409,687',
'345,410,410,83,410,458,588,588,648,458,458,458,458,410,648,588,772,317',
'84,346,317,810,359,772,410,410,346,410,410,410,410,410,772,18,214,656',
'17,115,48,18,215,361,656,17,366,48,318,656,371,318,772,656,17,874,48',
'410,410,410,410,410,410,410,410,410,410,410,410,410,410,656,40,410,410',
'410,810,410,217,524,197,410,524,810,410,359,359,359,810,410,215,410',
'810,410,410,410,410,410,410,410,433,410,410,410,361,361,361,366,366',
'366,810,371,371,371,40,621,410,410,41,410,40,410,621,621,621,410,217',
'621,621,621,323,621,323,323,323,216,323,213,347,348,621,621,621,621',
'213,347,348,669,433,619,669,621,621,213,621,621,621,621,621,306,41,43',
'43,403,349,620,41,753,323,323,540,349,540,540,540,218,540,323,323,323',
'323,219,621,621,621,621,621,621,621,621,621,621,621,621,621,621,223',
'619,621,621,621,306,621,621,254,403,621,306,540,621,621,403,621,620',
'621,753,621,540,621,621,621,621,621,621,621,257,621,621,621,628,350',
'628,628,628,278,628,565,350,439,278,565,621,621,621,621,622,621,404',
'601,621,621,329,622,622,622,268,329,622,622,622,684,622,684,684,684',
'269,684,628,302,302,439,622,622,622,439,439,628,628,628,628,272,622',
'622,275,622,622,622,622,622,404,601,928,289,928,290,404,601,282,684',
'289,796,290,796,796,796,284,796,684,289,628,290,285,622,622,622,622',
'622,622,622,622,622,622,622,622,622,622,717,291,622,622,622,717,622',
'622,291,286,622,292,796,622,622,295,622,291,622,296,622,796,622,622',
'622,622,622,622,622,301,622,527,622,527,527,527,798,527,798,798,798',
'303,798,307,293,622,622,622,622,56,622,293,351,622,622,308,56,56,56',
'351,293,56,56,56,572,56,572,572,572,527,572,315,315,311,798,56,56,56',
'527,527,527,527,324,324,319,56,56,353,56,56,56,56,56,875,353,875,875',
'875,330,875,722,331,572,572,921,722,921,921,921,335,921,572,572,572',
'572,337,56,56,56,56,56,56,56,56,56,56,56,56,56,56,817,875,56,56,56,817',
'440,56,692,692,56,365,921,56,56,368,56,390,56,392,56,395,56,56,56,56',
'56,56,56,398,56,676,56,676,676,676,887,676,440,718,718,887,440,440,309',
'56,56,56,56,414,56,309,401,56,958,958,414,414,414,402,309,414,414,414',
'678,414,678,678,678,676,678,459,411,419,414,414,414,414,676,676,676',
'676,429,441,442,414,414,443,414,414,414,414,414,923,444,923,923,923',
'474,923,725,725,678,459,725,725,725,459,459,459,459,678,678,678,678',
'475,414,414,414,414,414,414,414,414,414,414,414,414,414,414,489,923',
'414,414,414,334,490,414,493,495,414,500,334,414,414,504,414,513,414',
'514,414,334,414,414,414,414,414,414,414,515,414,414,414,681,522,681',
'681,681,525,681,529,530,531,538,499,414,414,414,414,415,414,499,545',
'414,548,550,415,415,415,555,499,415,415,415,721,415,721,721,721,556',
'721,681,592,594,415,415,415,415,598,602,607,613,681,681,623,415,415',
'567,415,415,415,415,415,956,567,956,956,956,625,956,640,642,721,567',
'762,650,762,762,762,652,762,721,721,721,721,655,415,415,415,415,415',
'415,415,415,415,415,415,415,415,415,658,956,415,415,415,657,659,415',
'662,663,415,665,657,415,415,675,415,657,415,686,415,657,415,415,415',
'415,415,415,415,689,415,415,415,709,694,902,910,699,702,732,709,737',
'902,910,755,415,415,415,415,709,415,902,910,415,35,35,35,35,35,35,756',
'757,911,35,35,759,760,763,35,911,35,35,35,35,35,35,35,771,911,775,778',
'779,35,35,35,35,35,35,35,783,901,35,901,901,901,784,901,35,35,785,35',
'35,35,35,35,35,35,35,35,811,35,35,35,786,35,35,811,35,35,35,912,811',
'787,790,914,811,841,912,841,841,841,914,841,791,950,793,912,795,797',
'35,914,950,35,800,803,35,35,813,818,35,950,35,819,820,829,35,836,830',
'836,836,836,843,836,35,841,844,849,851,35,35,35,35,35,35,852,841,841',
'35,35,199,199,199,199,199,199,876,35,880,199,199,881,886,894,199,836',
'199,199,199,199,199,199,199,895,836,836,836,836,199,199,199,199,199',
'199,199,896,897,199,9,9,9,9,9,199,199,899,199,199,199,199,199,199,199',
'199,199,976,199,199,199,903,199,199,976,199,199,199,905,976,913,916',
'917,976,866,918,866,866,866,919,866,280,280,280,280,280,920,199,922',
'946,199,957,962,199,199,963,964,199,965,199,966,967,968,199,838,969',
'838,838,838,970,838,199,866,972,977,978,199,199,199,199,199,199,990',
'866,866,199,199,222,222,222,222,222,222,,199,,222,222,,,,222,838,222',
'222,222,222,222,222,222,,838,838,838,838,222,222,222,222,222,222,222',
',,222,488,488,488,488,488,222,222,,222,222,222,222,222,222,222,222,222',
',222,222,222,,222,222,,222,222,222,647,647,647,647,647,,868,,868,868',
'868,,868,,,,,,,222,,,222,,,222,222,,,222,,222,,,,222,863,,863,863,863',
',863,222,868,,,,222,222,222,222,222,222,,868,868,222,222,283,283,283',
'283,283,283,,222,,283,283,,,,283,863,283,283,283,283,283,283,283,,863',
'863,863,863,283,283,283,283,283,283,283,,,283,,,,,,283,283,,283,283',
'283,283,283,283,283,283,283,,283,283,283,,283,283,,283,283,283,,,,,',
',870,,870,870,870,,870,,,,,,,283,,,283,,,283,283,,,283,,283,,,,283,934',
',934,934,934,,934,283,870,,,,283,283,283,283,283,283,,870,870,283,283',
'288,288,288,288,288,288,,283,,288,288,,,,288,934,288,288,288,288,288',
'288,288,,934,934,934,934,288,288,288,288,288,288,288,,,288,,,,,,288',
'288,,288,288,288,288,288,288,288,288,288,,288,288,288,,288,288,,288',
'288,288,,,,,,,937,,937,937,937,,937,,,,,,,288,,,288,,,288,288,,,288',
',288,,,939,288,939,939,939,,939,,,288,937,,,,288,288,288,288,288,288',
',937,937,288,288,314,314,314,314,314,314,,288,,314,314,,,939,314,,314',
'314,314,314,314,314,314,,939,939,,,314,314,314,314,314,314,314,,,314',
',,,,,314,314,,314,314,314,314,314,314,314,314,314,,314,314,314,,314',
'314,,314,314,314,,,,,,,952,,952,952,952,,952,,,,,,,314,,,314,,,314,314',
',,314,,314,,,984,314,984,984,984,,984,,,314,952,,,,314,314,314,314,314',
'314,,952,952,314,314,384,384,384,384,384,384,,314,,384,384,,,984,384',
',384,384,384,384,384,384,384,,984,984,,,384,384,384,384,384,384,384',
',,384,,,,,,384,384,384,384,384,384,384,384,384,384,384,384,,384,384',
'384,,384,384,,384,384,384,437,437,437,437,437,437,437,437,437,437,437',
',437,437,,,437,437,,384,,,384,,,384,384,,,384,,384,437,,437,384,437',
'437,437,437,437,437,437,384,437,,,,384,384,384,384,384,384,,,,384,384',
'549,549,549,549,549,549,,384,,549,549,,,,549,,549,549,549,549,549,549',
'549,,,,,,549,549,549,549,549,549,549,,,549,,,,,,549,549,,549,549,549',
'549,549,549,549,549,549,,549,549,549,,549,549,,549,549,549,438,438,438',
'438,438,438,438,438,438,438,438,,438,438,,,438,438,,549,,,549,,,549',
'549,,,549,,549,438,,438,549,438,438,438,438,438,438,438,549,438,,,,549',
'549,549,549,549,549,,,,549,549,552,552,552,552,552,552,,549,,552,552',
',,,552,,552,552,552,552,552,552,552,,,,,,552,552,552,552,552,552,552',
',,552,,,,,,552,552,,552,552,552,552,552,552,552,552,552,,552,552,552',
',552,552,,552,552,552,448,448,448,448,448,448,448,,,448,448,,,,,,448',
'448,,552,,,552,,,552,552,,,552,,552,448,,448,552,448,448,448,448,448',
'448,448,552,448,,,,552,552,552,552,552,552,,,,552,552,673,673,673,673',
'673,673,,552,,673,673,,,,673,,673,673,673,673,673,673,673,,,,,,673,673',
'673,673,673,673,673,,,673,,,,,,673,673,,673,673,673,673,673,673,673',
'673,673,,673,673,673,,673,673,,673,673,673,449,,,,,,,,,,,,,,,,449,449',
',673,,,673,,,673,673,,,673,,673,449,,449,673,449,449,449,449,,,449,673',
'449,,,,673,673,673,673,673,673,,,,673,673,674,674,674,674,674,674,,673',
',674,674,,,,674,,674,674,674,674,674,674,674,,,,,,674,674,674,674,674',
'674,674,,,674,,,,,,674,674,,674,674,674,674,674,674,674,674,674,,674',
'674,674,,674,674,,674,674,674,450,,,,,,,,,,,,,,,,450,450,,674,,,674',
',,674,674,,,674,,674,450,,450,674,450,450,450,450,,,450,674,450,,,,674',
'674,674,674,674,674,,,,674,674,719,719,719,719,719,719,,674,,719,719',
',,,719,,719,719,719,719,719,719,719,,,,,,719,719,719,719,719,719,719',
',,719,,,,,,719,719,,719,719,719,719,719,719,719,719,719,,719,719,719',
',719,719,,719,719,719,451,,,,,,,,,,,,,,,,451,451,,719,,,719,,,719,719',
',,719,,719,451,,451,719,451,451,451,451,,,451,719,451,,,,719,719,719',
'719,719,719,,,,719,719,720,720,720,720,720,720,,719,,720,720,,,,720',
',720,720,720,720,720,720,720,,,,,,720,720,720,720,720,720,720,,,720',
',,,,,720,720,,720,720,720,720,720,720,720,720,720,,720,720,720,,720',
'720,,720,720,720,452,,,,,,,,,,,,,,,,452,452,,720,,,720,,,720,720,,,720',
',720,452,,452,720,452,452,452,452,,,452,720,452,,,,720,720,720,720,720',
'720,,,,720,720,726,726,726,726,726,726,,720,,726,726,,,,726,,726,726',
'726,726,726,726,726,,,,,,726,726,726,726,726,726,726,,,726,,,,,,726',
'726,,726,726,726,726,726,726,726,726,726,,726,726,726,,726,726,,726',
'726,726,453,453,453,453,453,453,453,,,453,453,,,,,,453,453,,726,,,726',
',,726,726,,,726,,726,453,,453,726,453,453,453,453,453,453,453,726,453',
',,,726,726,726,726,726,726,,,,726,726,765,765,765,765,765,765,,726,',
'765,765,,,,765,,765,765,765,765,765,765,765,,,,,,765,765,765,765,765',
'765,765,,,765,,,,,,765,765,,765,765,765,765,765,765,765,765,765,,765',
'765,765,,765,765,,765,765,765,454,454,454,454,454,454,454,,,454,454',
',,,,,454,454,,765,,,765,,,765,765,,,765,,765,454,,454,765,454,454,454',
'454,454,454,454,765,454,,,,765,765,765,765,765,765,,,,765,765,767,767',
'767,767,767,767,,765,,767,767,,,,767,,767,767,767,767,767,767,767,,',
',,,767,767,767,767,767,767,767,,,767,,,,,,767,767,,767,767,767,767,767',
'767,767,767,767,,767,767,767,,767,767,,767,767,767,455,455,455,455,455',
'455,455,,,455,455,,,,,,455,455,,767,,,767,,,767,767,,,767,,767,455,',
'455,767,455,455,455,455,455,455,455,767,455,,,,767,767,767,767,767,767',
',,,767,767,768,768,768,768,768,768,,767,,768,768,,,,768,,768,768,768',
'768,768,768,768,,,,,,768,768,768,768,768,768,768,,,768,,,,,,768,768',
',768,768,768,768,768,768,768,768,768,,768,768,768,,768,768,,768,768',
'768,456,456,456,456,456,456,456,,,456,456,,,,,,456,456,,768,,,768,,',
'768,768,,,768,,768,456,,456,768,456,456,456,456,456,456,456,768,456',
',,,768,768,768,768,768,768,,,,768,768,777,777,777,777,777,777,,768,',
'777,777,,,,777,,777,777,777,777,777,777,777,,,,,,777,777,777,777,777',
'777,777,,,777,,,,,,777,777,,777,777,777,777,777,777,777,777,777,,777',
'777,777,,777,777,,777,777,777,457,457,457,457,457,457,457,,,457,457',
',,,,,457,457,,777,,,777,,,777,777,,,777,,777,457,,457,777,457,457,457',
'457,457,457,457,777,457,,,,777,777,777,777,777,777,,,,777,777,804,804',
'804,804,804,804,,777,,804,804,,,,804,,804,804,804,804,804,804,804,,',
',,,804,804,804,804,804,804,804,,,804,,,,,,804,804,,804,804,804,804,804',
'804,804,804,804,,804,804,804,,804,804,,804,804,804,460,460,460,460,460',
'460,460,,,460,460,,,,,,460,460,,804,,,804,,,804,804,,,804,,804,460,',
'460,804,460,460,460,460,460,460,460,804,460,,,,804,804,804,804,804,804',
',,,804,804,805,805,805,805,805,805,,804,,805,805,,,,805,,805,805,805',
'805,805,805,805,,,,,,805,805,805,805,805,805,805,,,805,,,,,,805,805',
',805,805,805,805,805,805,805,805,805,,805,805,805,,805,805,,805,805',
'805,461,461,461,461,461,461,461,461,,461,461,,,,,,461,461,,805,,,805',
',,805,805,,,805,,805,461,,461,805,461,461,461,461,461,461,461,805,461',
',,,805,805,805,805,805,805,,,,805,805,814,814,814,814,814,814,,805,',
'814,814,,,,814,,814,814,814,814,814,814,814,,,,,,814,814,814,814,814',
'814,814,,,814,,,,,,814,814,,814,814,814,814,814,814,814,814,814,,814',
'814,814,,814,814,,814,814,814,445,,,,,,,,,,,,,,,,445,445,,814,,,814',
',,814,814,,,814,,814,445,,445,814,445,445,445,445,,,,814,,,,,814,814',
'814,814,814,814,,,,814,814,850,850,850,850,850,850,,814,,850,850,,,',
'850,,850,850,850,850,850,850,850,,,,,,850,850,850,850,850,850,850,,',
'850,,,,,,850,850,,850,850,850,850,850,850,850,850,850,,850,850,850,',
'850,850,,850,850,850,446,,,,,,,,,,,,,,,,446,446,,850,,,850,,,850,850',
',,850,,850,446,,446,850,446,446,446,446,,,,850,,,,,850,850,850,850,850',
'850,,,,850,850,854,854,854,854,854,854,,850,,854,854,,,,854,,854,854',
'854,854,854,854,854,,,,,,854,854,854,854,854,854,854,,,854,,,,,,854',
'854,,854,854,854,854,854,854,854,854,854,,854,854,854,,854,854,,854',
'854,854,447,,,,,,,,,,,,,,,,447,447,,854,,,854,,,854,854,,,854,,854,447',
',,854,447,447,447,447,,,,854,,,,,854,854,854,854,854,854,,,,854,854',
'883,883,883,883,883,883,,854,,883,883,,,,883,,883,883,883,883,883,883',
'883,,,,,,883,883,883,883,883,883,883,,,883,,,,,,883,883,,883,883,883',
'883,883,883,883,883,883,,883,883,883,,883,883,,883,883,883,,,,,,,,,',
',,,,,,,,,,883,,,883,,,883,883,,,883,,883,,,,883,,,,,,,,883,,,,,883,883',
'883,883,883,883,,,,883,883,909,909,909,909,909,909,,883,,909,909,,,',
'909,,909,909,909,909,909,909,909,,,,,,909,909,909,909,909,909,909,,',
'909,,,,,,909,909,,909,909,909,909,909,909,909,909,909,,909,909,909,',
'909,909,,909,909,909,,,,,,,,,,,,,,,,,,,,909,,,909,,,909,909,,,909,,909',
',,,909,,,,,,,,909,,,,,909,909,909,909,909,909,,,,909,909,924,924,924',
'924,924,924,,909,,924,924,,,,924,,924,924,924,924,924,924,924,,,,,,924',
'924,924,924,924,924,924,,,924,,,,,,924,924,,924,924,924,924,924,924',
'924,924,924,,924,924,924,,924,924,,924,924,924,,,,,,,,,,,,,,,,,,,,924',
',,924,,,924,924,,,924,,924,,,,924,,,,,,,,924,,,,,924,924,924,924,924',
'924,,,,924,924,929,929,929,929,929,929,,924,,929,929,,,,929,,929,929',
'929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,929',
'929,,929,929,929,929,929,929,929,929,929,,929,929,929,,929,929,,929',
'929,929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,929,,,,929,,,',
',,,,929,,,,,929,929,929,929,929,929,,,,929,929,932,932,932,932,932,932',
',929,,932,932,,,,932,,932,932,932,932,932,932,932,,,,,,932,932,932,932',
'932,932,932,,,932,,,,,,932,932,,932,932,932,932,932,932,932,932,932',
',932,932,932,,932,932,,932,932,932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932',
'932,,,932,,932,,,,932,,,,,,,,932,,,,,932,932,932,932,932,932,,,,932',
'932,933,933,933,933,933,933,,932,,933,933,,,,933,,933,933,933,933,933',
'933,933,,,,,,933,933,933,933,933,933,933,,,933,,,,,,933,933,,933,933',
'933,933,933,933,933,933,933,,933,933,933,,933,933,,933,933,933,,,,,',
',,,,,,,,,,,,,,933,,,933,,,933,933,,,933,,933,,,,933,,,,,,,,933,,,,,933',
'933,933,933,933,933,,,,933,933,8,8,8,8,8,,,933,8,8,,,,8,,8,8,8,8,8,8',
'8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8',
'8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8',
'8,8,,,,8,8,23,23,23,,23,,,8,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23',
'23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23',
',23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,892,,892,892',
'892,23,892,,,,,,,23,,,,29,23,23,23,23,23,23,29,29,29,23,23,29,29,29',
',29,,,23,,892,892,,,29,29,29,,,892,892,892,892,,,29,29,,29,29,29,29',
'29,,,,,,,,,,,,,,,,,,,,,,,,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
',,29,29,29,,,29,,29,29,,,29,29,,29,,29,,29,,29,29,29,29,29,29,29,,29',
'29,29,,,,,,,,,,,,30,29,29,,29,,29,30,30,30,,,30,30,30,,30,,,,,,,,,,30',
'30,,,,,,,,,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,,,,,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30',
',30,,30,30,30,30,30,30,30,,30,,30,,,,,,,,,,,,,30,30,,30,,30,31,31,31',
',31,,,,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,',
',31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,,31,31,31',
',,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,,,,,,31,,,,,31',
'31,31,31,31,31,,,,31,31,32,32,32,,32,,,31,32,32,,,,32,,32,32,32,32,32',
'32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32',
'32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,',
',32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,33,33,33,,33',
',,32,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33',
',,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,',
',,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33',
'33,33,33,33,,,,33,33,36,36,36,,36,,,33,36,36,,,,36,,36,36,36,36,36,36',
'36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,,36,,,36,36,36,36,36,36,36,36',
',36,36,36,,36,36,,,,36,,,,,,,,,,,,,,,,,,,,36,,,36,,,36,36,,,36,,36,',
',,,,,,,,,,,,,,,36,36,36,36,36,36,,,,36,36,37,37,37,,37,,,36,37,37,,',
',37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,',
'37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37',
',,37,,,37,37,,,37,,,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,44,44',
'44,37,44,,,37,44,44,,,,44,,44,44,44,44,44,44,44,,,,,,44,44,44,44,44',
'44,44,,,44,,,,,,,44,,,44,44,44,44,44,44,44,44,,44,44,44,,44,44,,44,44',
'44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44,,,44,,,,,,44,,,,,,,,44,,,,,44',
'44,44,44,44,44,,,,44,44,45,45,45,,45,,,44,45,45,,,,45,,45,45,45,45,45',
'45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45',
'45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45',
',,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,46,46,46,,46,,,45,46',
'46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,',
'46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,',
',,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46',
',,,46,46,58,58,58,,58,,,46,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58',
'58,58,58,58,58,58,,,58,,,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58',
',58,58,,58,58,58,,,,,,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,',
',,,,58,,,,,58,58,58,58,58,58,,,,58,58,59,59,59,,59,,,58,59,59,,,,59',
',59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59',
'59,59,59,59,59,59,59,59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59',
',,59,,,59,59,,,59,,59,,,,59,,,,,,,,59,,,,,59,59,59,59,59,59,,,,59,59',
'63,63,63,,63,,,59,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63',
'63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,63',
'63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,',
'63,63,63,63,63,63,,,,63,63,64,64,64,,64,,,63,64,64,,,,64,,64,64,64,64',
'64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64',
'64,64,,64,64,64,,64,64,,64,64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64',
',,64,,,,,,64,,,,,,,,64,,,,,64,64,64,64,64,64,,,,64,64,67,67,67,,67,',
',64,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67',
',,,,397,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67,397',
'397,397,397,397,397,397,397,397,397,397,,397,397,,,397,397,,67,,,67',
',,67,67,,,67,,,397,,397,67,397,397,397,397,397,397,397,67,397,,,,67',
'67,67,67,67,67,,,,67,67,67,397,68,68,68,67,68,67,,,68,68,,,,68,,68,68',
'68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68,68',
'68,68,68,68,,68,68,68,,68,68,,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68,68',
',,68,,68,,,,,,,,,,,,,,,,,68,68,68,68,68,68,,,,68,68,105,105,105,105',
'105,,,68,105,105,,,,105,,105,105,105,105,105,105,105,,,,,,105,105,105',
'105,105,105,105,,,105,,,,,,105,105,105,105,105,105,105,105,105,105,105',
'105,,105,105,105,,105,105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105',
',,105,105,,,105,,105,,,,105,,,,,,,,105,,,,,105,105,105,105,105,105,',
',,105,105,110,110,110,,110,105,,105,110,110,,,,110,,110,110,110,110',
'110,110,110,,,,,,110,110,110,110,110,110,110,,,110,,,,,,,110,,,110,110',
'110,110,110,110,110,110,,110,110,110,,110,110,,110,110,110,,,,,,,,,',
',,,,,,,,,,110,,,110,,,110,110,,,110,,,,,,110,,,,,,,,110,,,,,110,110',
'110,110,110,110,,,,110,110,111,111,111,,111,,,110,111,111,,,,111,,111',
'111,111,111,111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,',
',111,,,111,111,111,111,111,111,111,111,,111,111,111,,111,111,,111,111',
'111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,,,,,111,,,,,,,,111',
',,,,111,111,111,111,111,111,,,,111,111,112,112,112,,112,,,111,112,112',
',,,112,,112,112,112,112,112,112,112,,,,,,112,112,112,112,112,112,112',
',,112,,,,,,,112,,,112,112,112,112,112,112,112,112,,112,112,112,,112',
'112,,112,112,112,,,,,,,,,,,,,,,,,,,,112,,,112,,,112,112,,,112,,,,,,112',
',,,,,,,112,,,,,112,112,112,112,112,112,,,,112,112,113,113,113,,113,',
',112,113,113,,,,113,,113,113,113,113,113,113,113,,,,,,113,113,113,113',
'113,113,113,,,113,,,,,,,113,,,113,113,113,113,113,113,113,113,,113,113',
'113,,113,113,,113,113,113,,,,,,,,,,,,,,,,,,,,113,,,113,,,113,113,,,113',
',,,,,113,,,,,,,,113,,,,,113,113,113,113,113,113,,,,113,113,114,114,114',
'114,114,,,113,114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114,114',
'114,114,114,114,114,,,114,,,,,,114,114,,114,114,114,114,114,114,114',
'114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,',
'114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114',
',,,114,114,200,200,200,,200,,,114,200,200,,,,200,,200,200,200,200,200',
'200,200,,,,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200,200,200',
'200,200,200,200,200,,200,200,200,,200,200,,200,200,200,,,,,,,,,,,,,',
',,,,,,200,,,200,,,200,200,,,200,,200,,,,200,,,,,,,,200,,,,,200,200,200',
'200,200,200,,,,200,200,201,201,201,,201,,,200,201,201,,,,201,,201,201',
'201,201,201,201,201,,,,,,201,201,201,201,201,201,201,,,201,,,,,,,201',
',,201,201,201,201,201,201,201,201,,201,201,201,,201,201,,201,201,201',
',,,,,,,,,,,,,,,,,,,201,,,201,,,201,201,,,201,,,,,,201,,,,,,,,201,,,',
',201,201,201,201,201,201,,,,201,201,202,202,202,,202,,,201,202,202,',
',,202,,202,202,202,202,202,202,202,,,,,,202,202,202,202,202,202,202',
',,202,,,,,,,202,,,202,202,202,202,202,202,202,202,202,202,202,202,,202',
'202,,202,202,202,,,,,,,,,,,,,,,,,,,,202,,,202,,,202,202,,,202,,202,',
'202,,202,,,,,,,,202,,,,,202,202,202,202,202,202,,,,202,202,205,205,205',
',205,,,202,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205',
'205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,205',
',205,205,205,,205,205,,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205',
'205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205,205,205,205,,,,205,205',
'206,206,206,,206,,,205,206,206,,,,206,,206,206,206,206,206,206,206,',
',,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206',
'206,206,206,,206,206,206,,206,206,,206,206,206,,,,,,,,,,,,,,,,,,,,206',
',,206,,,206,206,,,206,,206,,,,206,,,,,,,,206,,,,,206,206,206,206,206',
'206,,,,206,206,207,207,207,,207,,,206,207,207,,,,207,,207,207,207,207',
'207,207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207',
'207,207,207,207,207,207,,207,207,207,,207,207,,207,207,207,,,,,,,,,',
',,,,,,,,,,207,,,207,,,207,207,,,207,,,,,,207,,,,,,,,207,,,,,207,207',
'207,207,207,207,,,,207,207,208,208,208,,208,,,207,208,208,,,,208,,208',
'208,208,208,208,208,208,,,,,,208,208,208,208,208,208,208,,,208,,,,,',
',208,,,208,208,208,208,208,208,208,208,,208,208,208,,208,208,,208,208',
'208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,,,,,208,,,,,,,,208',
',,,,208,208,208,208,208,208,,,,208,208,209,209,209,,209,,,208,209,209',
',,,209,,209,209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209',
',,209,,,,,,,209,,,209,209,209,209,209,209,209,209,,209,209,209,,209',
'209,,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,209,,,209,,,,,,209',
',,,,,,,209,,,,,209,209,209,209,209,209,,,,209,209,210,210,210,,210,',
',209,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,210,221,221',
'221,,221,,210,,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221',
'221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221',
'221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221',
',,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221',
'221,224,224,224,,224,,,221,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,224,,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224',
',,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224',
',,,224,224,225,225,225,,225,,,224,225,225,,,,225,,225,225,225,225,225',
'225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225,225',
'225,225,225,225,225,,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,',
',,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225',
'225,225,225,,,,225,225,226,226,226,,226,,,225,226,226,,,,226,,226,226',
'226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,,,226',
',,226,226,226,226,226,226,226,226,,226,226,226,,226,226,,226,226,226',
',,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226,,,',
',226,226,226,226,226,226,,,,226,226,227,227,227,,227,,,226,227,227,',
',,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227,227',
',,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,,227',
'227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,,,,227',
',,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227,228,228,228,,228,',
',227,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228,228,228',
'228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228,,228,228',
'228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228,228,,,228',
',,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228,229,229,229',
',229,,,228,229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229',
'229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,229',
',229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229,,,229',
'229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229',
'230,230,230,,230,,,229,230,230,,,,230,,230,230,230,230,230,230,230,',
',,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230',
'230,230,230,,230,230,230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230',
',,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230',
',,,230,230,231,231,231,,231,,,230,231,231,,,,231,,231,231,231,231,231',
'231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231,231,231',
'231,231,231,231,231,,231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,',
',,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,231,,,,,231,231,231',
'231,231,231,,,,231,231,232,232,232,,232,,,231,232,232,,,,232,,232,232',
'232,232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232',
',,232,232,232,232,232,232,232,232,,232,232,232,,232,232,,232,232,232',
',,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,',
',232,232,232,232,232,232,,,,232,232,233,233,233,,233,,,232,233,233,',
',,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233,233',
',,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233,,233',
'233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,,,,,233',
',,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,234,234,234,,234,',
',233,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234,234,234',
'234,234,234,,,234,,,,,,,234,,,234,234,234,234,234,234,234,234,,234,234',
'234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234',
',,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234,235,235,235',
',235,,,234,235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235',
'235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235',
',235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235',
'235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235',
'236,236,236,,236,,,235,236,236,,,,236,,236,236,236,236,236,236,236,',
',,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236',
'236,236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236',
',,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236',
',,,236,236,237,237,237,,237,,,236,237,237,,,,237,,237,237,237,237,237',
'237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237',
'237,237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,',
',,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237',
'237,237,237,,,,237,237,238,238,238,,238,,,237,238,238,,,,238,,238,238',
'238,238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238',
',,238,238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238',
',,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,',
',238,238,238,238,238,238,,,,238,238,239,239,239,,239,,,238,239,239,',
',,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239',
',,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,,239',
'239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239',
',,,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,240,240,240,,240,',
',239,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240',
'240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240',
'240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240',
',,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,241,241,241',
',241,,,240,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241',
'241,241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241',
',241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241',
'241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241',
'242,242,242,,242,,,241,242,242,,,,242,,242,242,242,242,242,242,242,',
',,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242',
'242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242',
',,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242',
',,,242,242,243,243,243,,243,,,242,243,243,,,,243,,243,243,243,243,243',
'243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243',
'243,243,243,243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,',
',,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243',
'243,243,243,,,,243,243,244,244,244,,244,,,243,244,244,,,,244,,244,244',
'244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244',
',,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244,244,244',
',,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,',
',244,244,244,244,244,244,,,,244,244,245,245,245,,245,,,244,245,245,',
',,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245,245',
',,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,,245',
'245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245',
',,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,246,246,246,,246,',
',245,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246',
'246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246',
'246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246',
',,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,247,247,247',
',247,,,246,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247',
'247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247',
',247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247',
'247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247',
'248,248,248,,248,,,247,248,248,,,,248,,248,248,248,248,248,248,248,',
',,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248',
',,,248,248,249,249,249,,249,,,248,249,249,,,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,',
',,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249',
'249,249,249,,,,249,249,255,255,255,,255,,,249,255,255,,,,255,,255,255',
'255,255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255',
',,255,255,255,255,255,255,255,255,255,255,255,255,,255,255,,255,255',
'255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,255,,255,,255,,,,',
',,,255,,,,,255,255,255,255,255,255,,,,255,255,261,261,261,,261,,,255',
'261,261,,,,261,,261,261,261,261,261,261,261,,,,,,261,261,261,261,261',
'261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,261,261,261',
'261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,,261',
',261,,261,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,264',
'264,264,,264,,,261,264,264,,,,264,,264,264,264,264,264,264,264,,,,,',
'264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264,264,264,264',
'264,264,264,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264',
',,264,,,264,264,,,264,,264,,264,,264,,,,,,,,264,,,,,264,264,264,264',
'264,264,,,,264,264,264,271,271,271,,271,,264,,271,271,,,,271,,271,271',
'271,271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271',
',,271,271,271,271,271,271,271,271,,271,271,271,,271,271,,271,271,271',
',,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,,,,,271,,,,,,,,271,,,',
',271,271,271,271,271,271,,,,271,271,273,273,273,,273,,,271,273,273,',
',,273,,273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273,273',
',,273,,,,,,,273,,,273,273,273,273,273,273,273,273,,273,273,273,,273',
'273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,,,,,273',
',,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,281,281,281,281,281',
',,273,281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281',
'281,281,281,,,281,,,,,,281,281,,281,281,281,281,281,281,281,281,281',
',281,281,281,,281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281',
'281,,,281,,281,,,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281',
'281,287,287,287,,287,,,281,287,287,,,,287,,287,287,287,287,287,287,287',
',,,,,287,287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287,287,287',
'287,287,287,,287,287,287,,287,287,,,,287,,,,,,,,,,,,,,,,,,,,287,,,287',
',,287,287,,,287,,,,,,,,,,,,,,,,,,,287,287,287,287,287,287,,,,287,287',
'304,304,304,287,304,,,287,304,304,,,,304,,304,304,304,304,304,304,304',
',,,,,304,304,304,304,304,304,304,,,304,,,,,,,304,,,304,304,304,304,304',
'304,304,304,,304,304,304,,304,304,,,,304,,,,,,,,,,,,,,,,,,,,304,,,304',
',,304,304,,,304,,,,,,,,,,,,,,,,,,,304,304,304,304,304,304,,,,304,304',
'313,313,313,,313,,,304,313,313,,,,313,,313,313,313,313,313,313,313,',
',,,,313,313,313,313,313,313,313,,,313,,,,,,,313,,,313,313,313,313,313',
'313,313,313,,313,313,313,,313,313,,313,313,313,,,,,,,,,,,,,,,,,,,,313',
',,313,313,,313,313,,,313,,,,,,313,,,,,,,,313,,,,,313,313,313,313,313',
'313,,,,313,313,320,320,320,,320,,,313,320,320,,,,320,,320,320,320,320',
'320,320,320,,,,,,320,320,320,320,320,320,320,,,320,,,,,,,320,,,320,320',
'320,320,320,320,320,320,320,320,320,320,,320,320,,320,320,320,,,,,,',
',,,,,,,,,,,,,320,,,320,,,320,320,,,320,,,,,,320,,,,,,,,320,,,,,320,320',
'320,320,320,320,,,,320,320,327,327,327,,327,,,320,327,327,,,,327,,327',
'327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327,,,327,,,,,',
',327,,,327,327,327,327,327,327,327,327,,327,327,327,,327,327,,327,327',
'327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327,,,327,,,,,,327,,,,,,,,327',
',,,,327,327,327,327,327,327,,,,327,327,328,328,328,,328,,,327,328,328',
',,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328',
',,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328,,328',
'328,,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,,,,328',
',,,,,,,328,,,,,328,328,328,328,328,328,,,,328,328,340,340,340,,340,',
',328,340,340,,,,340,,340,340,340,340,340,340,340,,,,,,340,340,340,340',
'340,340,340,,,340,,,,,,,340,,,340,340,340,340,340,340,340,340,,340,340',
'340,,340,340,,,,340,,,,,,,,,,,,,,,,,,,,340,,,340,,,340,340,,,340,,,',
',,,,,,,,,,,,,,,340,340,340,340,340,340,,,,340,340,342,342,342,,342,',
',340,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342,342',
'342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342,342',
'342,,342,342,,,,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,',
',,,,,,,,,,,,,,,342,342,342,342,342,342,,,,342,342,394,394,394,,394,',
',342,394,394,,,,394,,394,394,394,394,394,394,394,,,,,,394,394,394,394',
'394,394,394,,,394,,,,,,,394,,,394,394,394,394,394,394,394,394,,394,394',
'394,,394,394,,394,394,394,,,,,,,,,,,,,,,,,,,,394,,,394,,,394,394,,,394',
',,,,,394,,,,,,,,394,,,,405,394,394,394,394,394,394,405,405,405,394,394',
'405,405,405,,405,,,394,,,,,,405,405,405,,,,,,,,,405,405,,405,405,405',
'405,405,,,,,,,,,,,,,,,,,,,,,,,,405,405,405,405,405,405,405,405,405,405',
'405,405,405,405,,,405,405,405,,,405,,405,405,,,405,405,,405,,405,,405',
',405,405,405,405,405,405,405,,405,405,405,,,,,,,,,,,,,405,405,,405,',
'405,432,432,432,,432,,,,432,432,,,,432,,432,432,432,432,432,432,432',
',,,,,432,432,432,432,432,432,432,,,432,,,,,,,432,,,432,432,432,432,432',
'432,432,432,432,432,432,432,,432,432,,432,432,432,,,,,,,,,,,,,,,,,,',
',432,,,432,,,432,432,,,432,,432,,432,,432,,,,,,,,432,,,,,432,432,432',
'432,432,432,,,,432,432,434,434,434,,434,,,432,434,434,,,,434,,434,434',
'434,434,434,434,434,,,,,,434,434,434,434,434,434,434,,,434,,,,,,,434',
',,434,434,434,434,434,434,434,434,,434,434,434,,434,434,,434,434,434',
',,,,,,,,,,,,,,,,,,,434,,,434,,,434,434,,,434,,,,,,434,,,,,,,,434,,,',
',434,434,434,434,434,434,,,,434,434,435,435,435,,435,,,434,435,435,',
',,435,,435,435,435,435,435,435,435,,,,,,435,435,435,435,435,435,435',
',,435,,,,,,,435,,,435,435,435,435,435,435,435,435,,435,435,435,,435',
'435,,435,435,435,,,,,,,,,,,,,,,,,,,,435,,,435,,,435,435,,,435,,,,,,435',
',,,,,,,435,,,,,435,435,435,435,435,435,,,,435,435,436,436,436,,436,',
',435,436,436,,,,436,,436,436,436,436,436,436,436,,,,,,436,436,436,436',
'436,436,436,,,436,,,,,,,436,,,436,436,436,436,436,436,436,436,,436,436',
'436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436,436,,,436',
',,,,,436,,,,,,,,436,,,,464,436,436,436,436,436,436,464,464,464,436,436',
'464,464,464,,464,,,436,,,,,,,464,,,,,,,,,,464,464,,464,464,464,464,464',
',,,,,,,,,,,,467,,,,,,,467,467,467,,,467,467,467,,467,,,,,,464,,,,467',
',,464,,,,,464,464,467,467,,467,467,467,467,467,,,,,,,,,,,,,,464,,,,',
',,,,,,,,464,,,,,464,,,467,,,,,,,467,,,,,467,467,,,,,,,,,,,,,,,,,,,,',
',467,,,,,,478,478,478,,478,,,467,478,478,,,467,478,,478,478,478,478',
'478,478,478,,,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478',
'478,478,478,478,478,478,478,478,478,478,,478,478,,478,478,478,,,,,,',
',,,,,,,,,,,,,478,,,478,,,478,478,,,478,,478,,478,,478,,,,,,,,478,,,',
',478,478,478,478,478,478,,,,478,478,481,481,481,,481,,,478,481,481,',
',,481,,481,481,481,481,481,481,481,,,,,,481,481,481,481,481,481,481',
',,481,,,,,,,481,,,481,481,481,481,481,481,481,481,481,481,481,481,,481',
'481,,481,481,481,,,,,,,,,,,,,,,,,,,,481,,,481,,,481,481,,,481,,,,481',
',481,,,,,,,,481,,,,,481,481,481,481,481,481,,,,481,481,483,483,483,',
'483,,,481,483,483,,,,483,,483,483,483,483,483,483,483,,,,,,483,483,483',
'483,483,483,483,,,483,,,,,,,483,,,483,483,483,483,483,483,483,483,,483',
'483,483,,483,483,,483,483,483,,,,,,,,,,,,,,,,,,,,483,,,483,,,483,483',
',,483,,,,,,483,,,,,,,,483,,,,,483,483,483,483,483,483,,,,483,483,485',
'485,485,,485,,,483,485,485,,,,485,,485,485,485,485,485,485,485,,,,,',
'485,485,485,485,485,485,485,,,485,,,,,,,485,,,485,485,485,485,485,485',
'485,485,,485,485,485,,485,485,,485,485,485,,,,,,,,,,,,,,,,,,,,485,,',
'485,,,485,485,,,485,,,,,,485,,,,,,,,485,,,,,485,485,485,485,485,485',
',,,485,485,487,487,487,487,487,,,485,487,487,,,,487,,487,487,487,487',
'487,487,487,,,,,,487,487,487,487,487,487,487,,,487,,,,,,487,487,,487',
'487,487,487,487,487,487,487,487,,487,487,487,,487,487,,487,487,487,',
',,,,,,,,,,,,,,,,,,487,,,487,,,487,487,,,487,,487,,,,487,,,,,,,,487,',
',,,487,487,487,487,487,487,,,,487,487,494,494,494,,494,487,,487,494',
'494,,,,494,,494,494,494,494,494,494,494,,,,,,494,494,494,494,494,494',
'494,,,494,,,,,,,494,,,494,494,494,494,494,494,494,494,,494,494,494,',
'494,494,,,,494,,,,,,,,,,,,,,,,,,,,494,,,494,,,494,494,,,494,,,,,,,,',
',,,,,,,,,,494,494,494,494,494,494,,,,494,494,496,496,496,,496,,,494',
'496,496,,,,496,,496,496,496,496,496,496,496,,,,,,496,496,496,496,496',
'496,496,,,496,,,,,,,496,,,496,496,496,496,496,496,496,496,496,496,496',
'496,,496,496,,496,496,496,,,,,,,,,,,,,,,,,,,,496,,,496,,,496,496,,,496',
',496,,496,,496,,,,,,,,496,,,,,496,496,496,496,496,496,,,,496,496,503',
'503,503,,503,,,496,503,503,,,,503,,503,503,503,503,503,503,503,,,,,',
'503,503,503,503,503,503,503,,,503,,,,,,,503,,,503,503,503,503,503,503',
'503,503,,503,503,503,,503,503,,,,503,,,,,,,,,,,,,,,,,,,,503,,,503,,',
'503,503,,,503,,,,,,,,,,,,,,,,,,,503,503,503,503,503,503,,,,503,503,506',
'506,506,,506,,,503,506,506,,,,506,,506,506,506,506,506,506,506,,,,,',
'506,506,506,506,506,506,506,,,506,,,,,,,506,,,506,506,506,506,506,506',
'506,506,,506,506,506,,506,506,,506,506,506,,,,,,,,,,,,,,,,,,,,506,,',
'506,,,506,506,,,506,,,,,,506,,,,,,,,506,,,,,506,506,506,506,506,506',
',,,506,506,507,507,507,,507,,,506,507,507,,,,507,,507,507,507,507,507',
'507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,,,507,,,507,507,507',
'507,507,507,507,507,,507,507,507,,507,507,,507,507,507,,,,,,,,,,,,,',
',,,,,,507,,,507,,,507,507,,,507,,,,,,507,,,,,,,,507,,,,,507,507,507',
'507,507,507,,,,507,507,508,508,508,,508,,,507,508,508,,,,508,,508,508',
'508,508,508,508,508,,,,,,508,508,508,508,508,508,508,,,508,,,,,,,508',
',,508,508,508,508,508,508,508,508,,508,508,508,,508,508,,508,508,508',
',,,,,,,,,,,,,,,,,,,508,,,508,,,508,508,,,508,,,,,,508,,,,,,,,508,,,',
',508,508,508,508,508,508,,,,508,508,512,512,512,,512,,,508,512,512,',
',,512,,512,512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512',
',,512,,,,,,,512,,,512,512,512,512,512,512,512,512,,512,512,512,,512',
'512,,512,512,512,,,,,,,,,,,,,,,,,,,,512,,,512,,,512,512,,,512,,,,,,512',
',,,,,,,512,,,,,512,512,512,512,512,512,,,,512,512,517,517,517,,517,',
',512,517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517,517,517',
'517,517,517,,,517,,,,,,,517,,,517,517,517,517,517,517,517,517,517,517',
'517,517,,517,517,,517,517,517,,,,,,,,,,,,,,,,,,,,517,,,517,,,517,517',
',,517,,517,,,,517,,,,,,,,517,,,,,517,517,517,517,517,517,,,,517,517',
'520,520,520,,520,,,517,520,520,,,,520,,520,520,520,520,520,520,520,',
',,,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520,520',
'520,520,520,520,520,520,520,,520,520,,520,520,520,,,,,,,,,,,,,,,,,,',
',520,,,520,,,520,520,,,520,,,,,,520,,,,,,,,520,,,,,520,520,520,520,520',
'520,,,,520,520,558,558,558,,558,,,520,558,558,,,,558,,558,558,558,558',
'558,558,558,,,,,,558,558,558,558,558,558,558,,,558,,,,,,,558,,,558,558',
'558,558,558,558,558,558,558,558,558,558,,558,558,,558,558,558,,,,,,',
',,,,,,,,,,,,,558,,,558,,,558,558,,,558,,558,,558,,558,,,,,,,,558,,,',
',558,558,558,558,558,558,,,,558,558,570,570,570,,570,,,558,570,570,',
',,570,,570,570,570,570,570,570,570,,,,,,570,570,570,570,570,570,570',
',,570,,,,,,,570,,,570,570,570,570,570,570,570,570,,570,570,570,,570',
'570,,570,570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,,,,,570',
',,,,,,,570,,,,,570,570,570,570,570,570,,,,570,570,576,576,576,,576,',
',570,576,576,,,,576,,576,576,576,576,576,576,576,,,,,,576,576,576,576',
'576,576,576,,,576,,,,,,,576,,,576,576,576,576,576,576,576,576,,576,576',
'576,,576,576,,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576,,,576,576,,,576',
',,,,,576,,,,,,,,576,,,,,576,576,576,576,576,576,,,,576,576,599,599,599',
',599,,,576,599,599,,,,599,,599,599,599,599,599,599,599,,,,,,599,599',
'599,599,599,599,599,,,599,,,,,,,599,,,599,599,599,599,599,599,599,599',
',599,599,599,,599,599,,599,599,599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599',
'599,,,599,,599,,,,599,,,,,,,,599,,,,,599,599,599,599,599,599,,,,599',
'599,600,600,600,,600,,,599,600,600,,,,600,,600,600,600,600,600,600,600',
',,,,,600,600,600,600,600,600,600,,,600,,,,,,,600,,,600,600,600,600,600',
'600,600,600,,600,600,600,,600,600,,600,600,600,,,,,,,,,,,,,,,,,,,,600',
',,600,,,600,600,,,600,,,,,,600,,,,,,,,600,,,,,600,600,600,600,600,600',
',,,600,600,603,603,603,,603,,,600,603,603,,,,603,,603,603,603,603,603',
'603,603,,,,,,603,603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603',
'603,603,603,603,603,603,603,603,603,,603,603,,603,603,603,,,,,,,,,,',
',,,,,,,,,603,,,603,,,603,603,,,603,,603,,603,,603,,,,,,,,603,,,,,603',
'603,603,603,603,603,,,,603,603,604,604,604,,604,,,603,604,604,,,,604',
',604,604,604,604,604,604,604,,,,,,604,604,604,604,604,604,604,,,604',
',,,,,,604,,,604,604,604,604,604,604,604,604,604,604,604,604,,604,604',
',604,604,604,,,,,,,,,,,,,,,,,,,,604,,,604,,,604,604,,,604,,,,604,,604',
',,,,,,,604,,,,,604,604,604,604,604,604,,,,604,604,605,605,605,,605,',
',604,605,605,,,,605,,605,605,605,605,605,605,605,,,,,,605,605,605,605',
'605,605,605,,,605,,,,,,,605,,,605,605,605,605,605,605,605,605,,605,605',
'605,,605,605,,605,605,605,,,,,,,,,,,,,,,,,,,,605,,,605,,,605,605,,,605',
',,,,,605,,,,,,,,605,,,,,605,605,605,605,605,605,,,,605,605,606,606,606',
',606,,,605,606,606,,,,606,,606,606,606,606,606,606,606,,,,,,606,606',
'606,606,606,606,606,,,606,,,,,,,606,,,606,606,606,606,606,606,606,606',
',606,606,606,,606,606,,606,606,606,,,,,,,,,,,,,,,,,,,,606,,,606,,,606',
'606,,,606,,,,,,606,,,,,,,,606,,,,,606,606,606,606,606,606,,,,606,606',
'611,611,611,,611,,,606,611,611,,,,611,,611,611,611,611,611,611,611,',
',,,,611,611,611,611,611,611,611,,,611,,,,,,,611,,,611,611,611,611,611',
'611,611,611,,611,611,611,,611,611,,611,611,611,,,,,,,,,,,,,,,,,,,,611',
',,611,,,611,611,,,611,,,,,,611,,,,,,,,611,,,,,611,611,611,611,611,611',
',,,611,611,612,612,612,,612,,,611,612,612,,,,612,,612,612,612,612,612',
'612,612,,,,,,612,612,612,612,612,612,612,,,612,,,,,,,612,,,612,612,612',
'612,612,612,612,612,,612,612,612,,612,612,,612,612,612,,,,,,,,,,,,,',
',,,,,,612,,,612,,,612,612,,,612,,,,,,612,,,,,,,,612,,,,,612,612,612',
'612,612,612,,,,612,612,615,615,615,,615,,,612,615,615,,,,615,,615,615',
'615,615,615,615,615,,,,,,615,615,615,615,615,615,615,,,615,,,,,,,615',
',,615,615,615,615,615,615,615,615,,615,615,615,,615,615,,615,615,615',
',,,,,,,,,,,,,,,,,,,615,,,615,,,615,615,,,615,,,,,,615,,,,,,,,615,,,',
',615,615,615,615,615,615,,,,615,615,616,616,616,,616,,,615,616,616,',
',,616,,616,616,616,616,616,616,616,,,,,,616,616,616,616,616,616,616',
',,616,,,,,,,616,,,616,616,616,616,616,616,616,616,,616,616,616,,616',
'616,,616,616,616,,,,,,,,,,,,,,,,,,,,616,,,616,,,616,616,,,616,,,,,,616',
',,,,,,,616,,,,,616,616,616,616,616,616,,,,616,616,643,643,643,,643,',
',616,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643,643,643',
'643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643,643,,643,643',
'643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643',
',,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643,643,649,649,649',
',649,,,643,649,649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649',
'649,649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649',
',649,649,649,,649,649,,,,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649',
',,649,,,,,,,,,,,,,,,,,,,649,649,649,649,649,649,,,,649,649,660,660,660',
',660,,,649,660,660,,,,660,,660,660,660,660,660,660,660,,,,,,660,660',
'660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660,660,660,660,660',
',660,660,660,,660,660,,,,660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660,660',
',,660,,,,,,,,,,,,,,,,,,,660,660,660,660,660,660,,,,660,660,666,666,666',
',666,,,660,666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666,666',
'666,666,666,666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666,666',
',666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666',
'666,,,666,,666,,,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666',
'666,682,682,682,,682,,,666,682,682,,,,682,,682,682,682,682,682,682,682',
',,,,,682,682,682,682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682',
'682,682,682,,682,682,682,,682,682,,682,682,682,,,,,,,,,,,,,,,,,,,,682',
',,682,,,682,682,,,682,,,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682',
',,,682,682,701,701,701,,701,,,682,701,701,,,,701,,701,701,701,701,701',
'701,701,,,,,,701,701,701,701,701,701,701,,,701,,,,,,,701,,,701,701,701',
'701,701,701,701,701,,701,701,701,,701,701,,701,701,701,,,,,,,,,,,,,',
',,,,,,701,,,701,,,701,701,,,701,,701,,,,701,,,,,,,,701,,,,,701,701,701',
'701,701,701,,,,701,701,707,707,707,,707,,,701,707,707,,,,707,,707,707',
'707,707,707,707,707,,,,,,707,707,707,707,707,707,707,,,707,,,,,,,707',
',,707,707,707,707,707,707,707,707,,707,707,707,,707,707,,707,707,707',
',,,,,,,,,,,,,,,,,,,707,,,707,,,707,707,,,707,,,,,,707,,,,,,,,707,,,',
',707,707,707,707,707,707,,,,707,707,713,713,713,,713,,,707,713,713,',
',,713,,713,713,713,713,713,713,713,,,,,,713,713,713,713,713,713,713',
',,713,,,,,,,713,,,713,713,713,713,713,713,713,713,713,713,713,713,,713',
'713,,713,713,713,,,,,,,,,,,,,,,,,,,,713,,,713,,,713,713,,,713,,713,',
'713,,713,,,,,,,,713,,,,,713,713,713,713,713,713,,,,713,713,733,733,733',
',733,,,713,733,733,,,,733,,733,733,733,733,733,733,733,,,,,,733,733',
'733,733,733,733,733,,,733,,,,,,,733,,,733,733,733,733,733,733,733,733',
',733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,,,,,,,,733,,,733,,,733',
'733,,,733,,,,,,733,,,,,,,,733,,,,,733,733,733,733,733,733,,,,733,733',
'735,735,735,,735,,,733,735,735,,,,735,,735,735,735,735,735,735,735,',
',,,,735,735,735,735,735,735,735,,,735,,,,,,,735,,,735,735,735,735,735',
'735,735,735,,735,735,735,,735,735,,735,735,735,,,,,,,,,,,,,,,,,,,,735',
',,735,,,735,735,,,735,,,,,,735,,,,,,,,735,,,,,735,735,735,735,735,735',
',,,735,735,749,749,749,,749,,,735,749,749,,,,749,,749,749,749,749,749',
'749,749,,,,,,749,749,749,749,749,749,749,,,749,,,,,,,749,,,749,749,749',
'749,749,749,749,749,,749,749,749,,749,749,,749,749,749,,,,,,,,,,,,,',
',,,,,,749,,,749,,,749,749,,,749,,,,,,749,,,,,,,,749,,,,,749,749,749',
'749,749,749,,,,749,749,750,750,750,,750,,,749,750,750,,,,750,,750,750',
'750,750,750,750,750,,,,,,750,750,750,750,750,750,750,,,750,,,,,,,750',
',,750,750,750,750,750,750,750,750,,750,750,750,,750,750,,750,750,750',
',,,,,,,,,,,,,,,,,,,750,,,750,,,750,750,,,750,,,,,,750,,,,,,,,750,,,',
',750,750,750,750,750,750,,,,750,750,751,751,751,,751,,,750,751,751,',
',,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751,751,751,751',
',,751,,,,,,,751,,,751,751,751,751,751,751,751,751,,751,751,751,,751',
'751,,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751,,,751,751,,,751,,,,,,751',
',,,,,,,751,,,,,751,751,751,751,751,751,,,,751,751,752,752,752,,752,',
',751,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752',
'752,752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,,752,752',
'752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752',
',,,,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752,754,754,754',
',754,,,752,754,754,,,,754,,754,754,754,754,754,754,754,,,,,,754,754',
'754,754,754,754,754,,,754,,,,,,,754,,,754,754,754,754,754,754,754,754',
',754,754,754,,754,754,,754,754,754,,,,,,,,,,,,,,,,,,,,754,,,754,,,754',
'754,,,754,,,,,,754,,,,,,,,754,,,,,754,754,754,754,754,754,,,,754,754',
'802,802,802,,802,,,754,802,802,,,,802,,802,802,802,802,802,802,802,',
',,,,802,802,802,802,802,802,802,,,802,,,,,,,802,,,802,802,802,802,802',
'802,802,802,,802,802,802,,802,802,,802,802,802,,,,,,,,,,,,,,,,,,,,802',
',,802,,,802,802,,,802,,,,,,802,,,,,,,,802,,,,,802,802,802,802,802,802',
',,,802,802,815,815,815,,815,,,802,815,815,,,,815,,815,815,815,815,815',
'815,815,,,,,,815,815,815,815,815,815,815,,,815,,,,,,,815,,,815,815,815',
'815,815,815,815,815,,815,815,815,,815,815,,815,815,815,,,,,,,,,,,,,',
',,,,,,815,,,815,,,815,815,,,815,,,,,,815,,,,,,,,815,,,,,815,815,815',
'815,815,815,,,,815,815,833,833,833,,833,,,815,833,833,,,,833,,833,833',
'833,833,833,833,833,,,,,,833,833,833,833,833,833,833,,,833,,,,,,,833',
',,833,833,833,833,833,833,833,833,833,833,833,833,,833,833,,833,833',
'833,,,,,,,,,,,,,,,,,,,,833,,,833,,,833,833,,,833,,,,833,,833,,,,,,,',
'833,,,,,833,833,833,833,833,833,,,,833,833,834,834,834,,834,,,833,834',
'834,,,,834,,834,834,834,834,834,834,834,,,,,,834,834,834,834,834,834',
'834,,,834,,,,,,,834,,,834,834,834,834,834,834,834,834,,834,834,834,',
'834,834,,834,834,834,,,,,,,,,,,,,,,,,,,,834,,,834,,,834,834,,,834,,',
',,,834,,,,,,,,834,,,,,834,834,834,834,834,834,,,,834,834,848,848,848',
',848,,,834,848,848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848',
'848,848,848,848,848,,,848,,,,,,,848,,,848,848,848,848,848,848,848,848',
',848,848,848,,848,848,,,,848,,,,,,,,,,,,,,,,,,,,848,,,848,,,848,848',
',,848,,,,,,,,,,,,,,,,,,,848,848,848,848,848,848,,,,848,848,858,858,858',
',858,,,848,858,858,,,,858,,858,858,858,858,858,858,858,,,,,,858,858',
'858,858,858,858,858,,,858,,,,,,,858,,,858,858,858,858,858,858,858,858',
',858,858,858,,858,858,,,,858,,,,,,,,,,,,,,,,,,,,858,,,858,,,858,858',
',,858,,,,,,,,,,,,,,,,,,,858,858,858,858,858,858,,,,858,858,882,882,882',
',882,,,858,882,882,,,,882,,882,882,882,882,882,882,882,,,,,,882,882',
'882,882,882,882,882,,,882,,,,,,,882,,,882,882,882,882,882,882,882,882',
',882,882,882,,882,882,,882,882,882,,,,,,,,,,,,,,,,,,,,882,,,882,,,882',
'882,,,882,,882,,,,882,,,,,,,,882,,,,,882,882,882,882,882,882,,,,882',
'882,947,947,947,,947,,,882,947,947,,,,947,,947,947,947,947,947,947,947',
',,,,,947,947,947,947,947,947,947,,,947,,,,,422,,947,,,947,947,947,947',
'947,947,947,947,947,947,947,947,,947,947,,947,947,947,422,422,422,422',
'422,422,422,422,422,422,422,,422,422,,,422,422,,947,,,947,,,947,947',
',,947,,947,422,947,422,947,422,422,422,422,422,422,422,947,422,,,,947',
'947,947,947,947,947,,,,947,947,,422,,422,,,,947,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11',
'11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11',
',11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12',
'12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12',
',12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12',
'12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,385,385,385,385,385',
'385,385,385,385,385,385,385,385,385,385,385,385,385,385,385,385,385',
'385,385,,,,385,385,385,385,385,385,385,385,385,385,,,,,,385,385,385',
'385,385,385,385,385,385,,,385,,,,,,,,,385,385,,385,385,385,385,385,385',
'385,,,385,385,,,,385,385,385,385,,,,,,,,,,,,,,385,385,,385,385,385,385',
'385,385,385,385,385,385,385,,,385,385,,,,,,,,,,385,596,596,596,596,596',
'596,596,596,596,596,596,596,596,596,596,596,596,596,596,596,596,596',
'596,596,,,,596,596,596,596,596,596,596,596,596,596,,,,,,596,596,596',
'596,596,596,596,596,596,,,596,,,,,,,,,596,596,,596,596,596,596,596,596',
'596,,,596,596,,,,596,596,596,596,,,,,,,,,,,,,,596,596,,596,596,596,596',
'596,596,596,596,596,596,596,,,596,596,,,,,,,,,,596,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,,,,71,71,71,71',
'71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,71,71,71,71,71,,71,,,,,',
',71,71,,71,71,71,71,71,71,71,,,71,71,,,,71,71,71,71,,,,,,71,,,,,,,,71',
'71,,71,71,71,71,71,71,71,71,71,71,71,,,71,85,85,85,85,85,85,85,85,85',
'85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,,,,85,85,85,85,85,85,85',
'85,85,85,,,,,,85,85,85,85,85,85,85,85,85,85,85,85,,85,,,,,,,85,85,,85',
'85,85,85,85,85,85,,,85,85,,,,85,85,85,85,,,,,,,,,,,,,,85,85,,85,85,85',
'85,85,85,85,85,85,85,85,,,85,723,723,723,723,723,723,723,723,723,723',
'723,723,723,723,723,723,723,723,723,723,723,723,723,723,,,,723,723,723',
'723,723,723,723,723,723,723,,,,,,723,723,723,723,723,723,723,723,723',
',,723,,,,,,,,,723,723,,723,723,723,723,723,723,723,,,723,723,,,,723',
'723,723,723,,,,,,,624,,,,,,,723,723,,723,723,723,723,723,723,723,723',
'723,723,723,,,723,624,624,624,624,624,624,624,624,624,624,624,,624,624',
',,624,624,,,,,,,,,,,,,,,624,,624,,624,624,624,624,624,624,624,,624,203',
'203,,,203,,,,,,,,,203,203,624,203,203,203,203,203,203,203,,,203,203',
',,,203,203,203,203,,,,,,203,,,,,,,,203,203,,203,203,203,203,203,203',
'203,203,203,203,203,204,204,203,,204,,,,,,,,,204,204,,204,204,204,204',
'204,204,204,,,204,204,,,,204,204,204,204,,,,,,204,,,,,,,,204,204,,204',
'204,204,204,204,204,204,204,204,204,204,252,252,204,,252,,,,,,,,,252',
'252,,252,252,252,252,252,252,252,,,252,252,,,,252,252,252,252,,,,,,',
',,,,,,,252,252,,252,252,252,252,252,252,252,252,252,252,252,253,253',
'252,,253,,,,,,,,,253,253,,253,253,253,253,253,253,253,,,253,253,,,,253',
'253,253,253,,,,,,,,,,,,,,253,253,,253,253,253,253,253,253,253,253,253',
'253,253,430,430,253,,430,,,,,,,,,430,430,,430,430,430,430,430,430,430',
',,430,430,,,,430,430,430,430,,,,,,430,,,,,,,,430,430,,430,430,430,430',
'430,430,430,430,430,430,430,431,431,430,,431,,,,,,,,,431,431,,431,431',
'431,431,431,431,431,,,431,431,,,,431,431,431,431,,,,,,431,,,,,,,,431',
'431,,431,431,431,431,431,431,431,431,431,431,431,497,497,431,,497,,',
',,,,,,497,497,,497,497,497,497,497,497,497,,,497,497,,,,497,497,497',
'497,,,,,,497,,,,,,,,497,497,,497,497,497,497,497,497,497,497,497,497',
'497,498,498,497,,498,,,,,,,,,498,498,,498,498,498,498,498,498,498,,',
'498,498,,,,498,498,498,498,,,,,,498,,,,,,,,498,498,,498,498,498,498',
'498,498,498,498,498,498,498,509,509,498,,509,,,,,,,,,509,509,,509,509',
'509,509,509,509,509,,,509,509,,,,509,509,509,509,,,,,,509,,,,,,,,509',
'509,,509,509,509,509,509,509,509,509,509,509,509,510,510,509,,510,,',
',,,,,,510,510,,510,510,510,510,510,510,510,,,510,510,,,,510,510,510',
'510,,,,,,510,,,,,,,,510,510,,510,510,510,510,510,510,510,510,510,510',
'510,559,559,510,,559,,,,,,,,,559,559,,559,559,559,559,559,559,559,,',
'559,559,,,,559,559,559,559,,,,,,559,,,,,,,,559,559,,559,559,559,559',
'559,559,559,559,559,559,559,560,560,559,,560,,,,,,,,,560,560,,560,560',
'560,560,560,560,560,,,560,560,,,,560,560,560,560,,,,,,560,,,,,,,,560',
'560,,560,560,560,560,560,560,560,560,560,560,560,711,711,560,,711,,',
',,,,,,711,711,,711,711,711,711,711,711,711,,,711,711,,,,711,711,711',
'711,,,,,,711,,,,,,,,711,711,,711,711,711,711,711,711,711,711,711,711',
'711,712,712,711,,712,,,,,,,,,712,712,,712,712,712,712,712,712,712,,',
'712,712,,,,712,712,712,712,,,,,,712,,,,,,,,712,712,,712,712,712,712',
'712,712,712,712,712,712,712,943,943,712,,943,,,,,,,,,943,943,,943,943',
'943,943,943,943,943,,,943,943,,,,943,943,943,943,,,,,,943,,,,,,,,943',
'943,,943,943,943,943,943,943,943,943,943,943,943,948,948,943,,948,,',
',,,,,,948,948,,948,948,948,948,948,948,948,,,948,948,,,,948,948,948',
'948,,,,,,948,,,,,,,,948,948,,948,948,948,948,948,948,948,948,948,948',
'948,949,949,948,,949,,,,,,,,,949,949,,949,949,949,949,949,949,949,,',
'949,949,,,,949,949,949,949,,,,,,949,,,,,,,,949,949,,949,949,949,949',
'949,949,949,949,949,949,949,,,949,24,24,24,24,24,24,24,24,24,24,24,',
'24,24,,,24,24,,,,,,,,,,,,,,,24,,24,,24,24,24,24,24,24,24,,24,266,266',
'266,266,266,266,266,266,266,266,266,,266,266,,24,266,266,,,,,,,,,,,',
',,,266,,266,,266,266,266,266,266,266,266,,266,417,417,417,417,417,417',
'417,417,417,417,417,,417,417,,266,417,417,,,,,,,,,,,,,,,417,,417,,417',
'417,417,417,417,417,417,,417,462,462,462,462,462,462,462,462,462,462',
'462,,462,462,,417,462,462,,,,,,,,,,,,,,,462,,462,,462,462,462,462,462',
'462,462,,462,511,511,511,511,511,511,511,511,511,511,511,,511,511,462',
'462,511,511,,,,,,,,,,,,,,,511,,511,,511,511,511,511,511,511,511,,511',
'661,661,661,661,661,661,661,661,661,661,661,,661,661,,511,661,661,,',
',,,,,,,,,,,,661,,661,,661,661,661,661,661,661,661,,661,734,734,734,734',
'734,734,734,734,734,734,734,,734,734,,661,734,734,,,,,,,,,,,,,,,734',
',734,,734,734,734,734,734,734,734,,734,739,739,739,739,739,739,739,739',
'739,739,739,,739,739,,734,739,739,,,,,,,,,,,,,,,739,,739,,739,739,739',
'739,739,739,739,,739,741,741,741,741,741,741,741,741,741,741,741,,741',
'741,,739,741,741,,,,,,,,,,,,,,,741,,741,,741,741,741,741,741,741,741',
',741,744,744,744,744,744,744,744,744,744,744,744,,744,744,,741,744,744',
',,,,,,,,,,,,,,744,,744,,744,744,744,744,744,744,744,,744,746,746,746',
'746,746,746,746,746,746,746,746,,746,746,,744,746,746,,,,,,,,,,,,,,',
'746,,746,,746,746,746,746,746,746,746,,746,748,748,748,748,748,748,748',
'748,748,748,748,,748,748,,746,748,748,,,,,,,,,,,,,,,748,,748,,748,748',
'748,748,748,748,748,,748,832,832,832,832,832,832,832,832,832,832,832',
',832,832,,748,832,832,,,,,,,,,,,,,,,832,,832,,832,832,832,832,832,832',
'832,,832,835,835,835,835,835,835,835,835,835,835,835,,835,835,,832,835',
'835,,,,,,,,,,,,,,,835,,835,,835,835,835,835,835,835,835,,835,,,,,,,',
',,,,,,,,835' ]
        racc_action_check = arr = ::Array.new(23644, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   100,     0,   122,   nil,    64,   nil,   nil,  4788,  1289,
   nil, 21076, 21200,    33,   nil,    24,   105,   355,   301,    76,
   280,   nil,    65,  4912, 22931,   203,   nil,   230,   197,  5026,
  5151,  5281,  5405,  5529,   nil,  1164,  5653,  5777,   nil,   143,
   380,   426,   271,   495,  5901,  6025,  6149,   224,   357,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   770,   nil,  6273,  6397,
   nil,     0,   nil,  6521,  6645,   nil,   nil,  6769,  6895,   299,
   nil, 21572,   nil,   nil,   nil,   nil,   nil,   189,   nil,   nil,
   nil,   nil,   nil,   270,   285, 21685,   nil,   nil,   nil,     0,
   nil,   nil,   130,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  7019,   nil,   nil,   nil,   nil,
  7143,  7267,  7391,  7515,  7639,   322,   nil,   253,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   346,   nil,  1289,
  7763,  7887,  8011, 21907, 21968,  8135,  8259,  8383,  8507,  8631,
  8755,   nil,   nil,   454,   296,   350,   475,   386,   435,   489,
   nil,  8880,  1414,   501,  9004,  9128,  9252,  9376,  9500,  9624,
  9748,  9872,  9996, 10120, 10244, 10368, 10492, 10616, 10740, 10864,
 10988, 11112, 11236, 11360, 11484, 11608, 11732, 11856, 11980, 12104,
   nil,   nil, 22029, 22090,   502, 12228,   nil,   530,   nil,   nil,
   nil, 12352,   nil,   nil, 12476,   nil, 22976,   nil,   521,   531,
   nil, 12601,   587, 12725,   nil,   552,   nil,   nil,   503,   nil,
  1330, 12849,   557,  1539,   574,   615,   601, 12973,  1664,   609,
   611,   644,   677,   687,   nil,   646,   614,    56,   nil,   nil,
   nil,   660,   602,   633, 13097,   nil,   467,   697,   709,   817,
   nil,   727,   nil, 13221,  1789,   756,   nil,   288,   317,   710,
 13345,   nil,   nil,   474,   767,    48,    51, 13469, 13593,   520,
   803,   691,    90,    99,   908,   775,   116,   812,   nil,   nil,
 13717,   nil, 13841,   270,   299,   312,   338,   455,   456,   481,
   547,   695,   nil,   730,   nil,   nil,   nil,   nil,   nil,   359,
   nil,   378,   nil,   235,   nil,   739,   381,   nil,   743,    93,
   nil,   385,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1914, 21324,   nil,   nil,   nil,   nil,
   755,   nil,   741,   nil, 13965,   743,   nil,  6769,   754,   nil,
   nil,   774,   781,   471,   555, 14079,   nil,   nil,   nil,   260,
   385,   833,   nil,   nil,   900,  1030,   nil, 23021,   nil,   789,
   nil,   nil, 20944,   nil,   nil,   nil,   nil,   114,   nil,   842,
 22151, 22212, 14209,   408, 14333, 14457, 14581,  1914,  2039,   566,
   790,   867,   868,   871,   878,  3664,  3789,  3914,  2164,  2289,
  2414,  2539,  2664,  2789,  2914,  3039,  3164,  3289,   303,   855,
  3414,  3539, 23066,    66, 14695,   nil,   nil, 14751,   nil,   nil,
   nil,   nil,    85,   103,   823,   840,   nil,   nil, 14868,   nil,
   nil, 14992,   nil, 15116,   nil, 15240,   nil, 15364,  1414,   855,
   858,   nil,   nil,   860, 15488,   864, 15612, 22273, 22334,   947,
   902,   nil,   nil, 15736,   867,   nil, 15860, 15984, 16108, 22395,
 22456, 23111, 16232,   991,   991,   884,   nil, 16356,   nil,   nil,
 16480,   nil,   902,   nil,   348,   931,    62,   701,   nil,   892,
   893,   894,   nil,   nil,   nil,   nil,   nil,   nil,   889,   nil,
   514,   nil,   nil,   nil,   nil,   982,   nil,   nil,   984,  2039,
  1024,   nil,  2164,   121,   122,  1024,  1041,   nil, 16604, 22517,
 22578,   152,   nil,   229,   268,   580,   nil,   990,   nil,    55,
 16728,   nil,   734,   nil,   nil,   nil, 16852,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   282,   nil,
   nil,   nil,   923,   nil,   941,   nil, 21448,   nil,   930, 16976,
 17100,   556,   965, 17224, 17348, 17472, 17596,   964,   nil,   nil,
   nil, 17720, 17844,   965,   nil, 17968, 18092,   nil,   nil,   457,
   473,   510,   640,   939, 21846,   951,   nil,   nil,   573,   nil,
   nil,   nil,   nil,   nil,   nil,   195,   nil,   nil,   nil,   nil,
   952,   nil,   994, 18216,   nil,   nil,   nil,  1442,   276, 18340,
   957,   nil,   964,    58,    97,  1006,   354,  1038,  1021,   988,
 18464, 23156,  1052,  1053,   226,  1108, 18588,   nil,   nil,   416,
   nil,   nil,   nil,  2289,  2414,   995,   831,   nil,   864,   nil,
   nil,   963, 18712,   nil,   604,   nil,  1001,   267,   nil,  1014,
   nil,   nil,   846,   nil,  1131,   nil,   nil,   nil,   nil,  1139,
   nil, 18836,  1023,   156,   159,   196,   220, 18960,   nil,  1066,
   nil, 22639, 22700, 19084,   nil,   nil,   nil,   595,   854,  2539,
  2664,   994,   695, 21798,   255,   898,  2789,   nil,   nil,   nil,
   nil,   nil,  1021, 19208, 23201, 19332,   nil,  1023,   nil, 23246,
   nil, 23291,   nil,   nil, 23336,   nil, 23381,   nil, 23426, 19456,
 19580, 19704, 19828,   475, 19952,  1026,  1042,  1043,   nil,  1067,
  1046,   nil,  1034,  1043,   nil,  2914,   nil,  3039,  3164,   nil,
   nil,  1059,   335,   nil,   nil,  1182,   nil,  3289,  1062,  1104,
   nil,   nil,   nil,  1087,  1197,  1084,  1095,  1104,   nil,   nil,
  1105,  1115,   nil,  1117,   nil,  1122,   644,  1120,   706,   nil,
  1245,   nil, 20076,  1246,  3414,  3539,   nil,   120,   161,   163,
   393,  1142,   nil,  1132,  3664, 20200,   nil,   725,  1250,  1254,
  1138,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1152,
  1139,   nil, 23471, 20324, 20448, 23516,  1216,   nil,  1341,   nil,
   nil,  1186,   nil,  1163,  1147,   nil,   nil,   nil, 20572,  1268,
  3789,  1165,  1276,   nil,  3914,   nil,   nil,   124, 20696,   nil,
   nil,   nil,   nil,  1466,   nil,   nil,  1311,   nil,  1436,   nil,
  1561,   nil,   nil,   nil,   321,   763,  1167,   nil,   140,   nil,
  1289,  1292, 20820,  4039,   nil,   nil,  1293,   761,   nil,   nil,
   nil,   nil,  4958,   nil,  1174,  1184,  1196,  1197,   nil,  1206,
   nil,  1150,  1068,  1294,   nil,  1243,   nil,   nil,   nil,  4164,
  1069,  1095,  1153,  1303,  1157,   nil,  1230,  1231,  1234,  1238,
  1245,   774,  1247,   893,  4289,   nil,   nil,   nil,   672,  4414,
   nil,   nil,  4539,  4664,  1591,   nil,   nil,  1686,   nil,  1714,
   nil,   nil,   nil, 22761,   nil,   nil,  1370, 20944, 22822, 22883,
  1167,   nil,  1811,   nil,   nil,   nil,  1023,  1250,   892,   nil,
   nil,   nil,  1371,  1374,  1375,  1257,  1259,  1260,  1261,  1303,
  1307,   nil,  1275,   149,   151,   152,  1267,  1273,  1274,   nil,
   nil,   nil,   nil,   nil,  1839,   nil,   nil,   nil,   153,   nil,
  1281,   nil ]

racc_action_default = [
    -1,  -580,  -579,  -580,    -2,  -566,    -4,    -5,  -580,    -8,
    -9,  -580,  -580,  -580,   -29,  -580,  -580,  -580,  -277,  -580,
   -41,   -44,  -568,  -580,   -49,   -51,   -52,   -53,  -258,  -258,
  -258,  -289,  -328,  -329,   -70,  -579,   -74,   -82,   -84,  -580,
  -493,  -494,  -580,  -580,  -580,  -580,  -580,  -568,  -239,  -270,
  -271,  -272,  -273,  -274,  -275,  -276,  -556,  -279,  -580,  -579,
  -287,  -297,  -394,  -580,  -580,  -302,  -305,  -566,  -580,  -313,
  -320,  -580,  -330,  -331,  -435,  -436,  -437,  -438,  -439,  -579,
  -442,  -579,  -579,  -579,  -579,  -579,  -471,  -477,  -478,  -554,
  -482,  -483,  -555,  -485,  -486,  -487,  -488,  -489,  -490,  -491,
  -492,  -497,  -498,   992,    -3,  -567,  -575,  -576,  -577,    -7,
  -580,  -580,  -580,  -580,  -580,  -580,   -17,  -580,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -121,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -122,  -579,
  -580,  -580,  -579,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
  -568,  -569,   -48,  -580,  -493,  -494,  -580,  -277,  -580,  -580,
  -231,  -580,  -579,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
  -400,  -403,  -580,  -580,   -59,  -580,  -296,  -580,  -416,  -419,
   -65,  -579,  -413,   -66,  -568,   -67,  -240,  -253,  -579,  -579,
  -257,  -580,  -263,  -580,  -550,  -568,   -68,   -69,  -566,   -13,
   -14,  -580,   -72,  -579,  -568,  -580,   -75,   -78,  -579,   -90,
   -91,  -580,  -580,   -98,  -289,  -292,  -568,  -406,  -328,  -329,
  -332,  -414,  -580,   -80,  -580,   -86,  -285,  -479,  -480,  -580,
  -216,  -217,  -232,  -580,  -579,  -281,  -241,  -572,  -572,  -580,
  -579,  -298,  -299,  -519,   -50,  -580,  -580,  -580,  -580,  -566,
  -580,  -567,  -493,  -494,  -580,  -580,  -277,  -580,  -353,  -354,
  -580,  -316,  -580,  -113,  -114,  -154,  -155,  -156,  -172,  -177,
  -184,  -187,  -323,  -580,  -493,  -494,  -545,  -546,  -440,  -580,
  -455,  -580,  -457,  -580,  -459,  -580,  -580,  -447,  -580,  -580,
  -453,  -580,  -470,  -472,  -473,  -474,  -475,    -6,  -578,   -23,
   -24,   -25,   -26,   -27,  -579,  -580,   -19,   -20,   -21,  -123,
  -580,   -30,   -39,   -40,  -580,  -580,   -31,  -197,  -568,  -248,
  -249,  -579,  -579,  -557,  -558,  -258,  -411,  -559,  -560,  -558,
  -557,  -258,  -410,  -412,  -559,  -560,   -37,  -205,   -38,  -580,
   -42,   -43,  -195,  -263,   -45,   -46,   -47,  -568,  -295,  -580,
  -580,  -580,  -579,  -285,  -580,  -580,  -580,  -206,  -207,  -208,
  -209,  -210,  -211,  -212,  -213,  -218,  -219,  -220,  -221,  -222,
  -223,  -224,  -225,  -226,  -227,  -228,  -229,  -230,  -233,  -234,
  -235,  -236,  -568,  -579,  -258,  -557,  -558,  -258,   -56,   -60,
  -259,  -407,  -579,  -579,  -568,  -568,  -291,  -254,  -580,  -262,
  -255,  -580,  -260,  -580,  -264,  -580,   -12,  -567,   -16,  -568,
   -71,  -283,   -87,   -76,  -580,  -568,  -579,  -580,  -580,   -97,
  -580,  -479,  -480,  -580,   -83,   -88,  -580,  -580,  -580,  -580,
  -580,  -237,  -580,  -427,  -580,  -568,  -242,  -574,  -573,  -244,
  -574,  -286,  -580,  -548,  -572,  -580,  -580,  -519,  -397,  -544,
  -544,  -544,  -518,  -520,  -521,  -522,  -523,  -524,  -525,  -526,
  -580,  -528,  -534,  -536,  -537,  -539,  -540,  -541,  -580,  -579,
  -344,  -345,  -579,  -580,  -580,  -580,  -580,  -422,  -579,  -580,
  -580,  -285,  -310,  -108,  -109,  -580,  -111,  -580,  -277,  -580,
  -580,  -321,  -519,  -325,  -564,  -565,  -580,  -441,  -456,  -461,
  -462,  -464,  -443,  -458,  -444,  -460,  -445,  -446,  -580,  -449,
  -451,  -452,  -580,  -476,  -580,   -18,  -580,   -28,  -269,  -580,
  -580,  -415,  -580,  -250,  -252,  -580,  -580,   -61,  -246,  -247,
  -408,  -580,  -580,   -63,  -409,  -580,  -580,  -294,  -570,  -557,
  -558,  -557,  -558,  -568,  -195,  -580,  -383,  -384,  -579,  -386,
  -401,   -54,  -404,   -55,  -405,  -579,  -417,  -420,  -245,  -290,
  -579,  -261,  -265,  -580,  -551,  -552,  -553,   -15,   -73,  -580,
   -79,   -85,  -568,  -557,  -558,  -579,   -94,   -96,  -580,   -81,
  -580,  -204,  -214,  -215,  -568,  -579,  -579,  -280,  -282,  -572,
  -288,  -549,  -395,  -579,  -579,  -579,  -580,  -511,  -580,  -514,
  -516,  -580,  -580,  -355,  -580,  -357,  -359,  -366,  -525,  -568,
  -538,  -542,  -579,  -346,  -579,  -303,  -347,  -348,  -306,  -580,
  -309,  -580,  -568,  -557,  -558,  -561,  -284,  -580,  -108,  -109,
  -110,  -580,  -580,  -579,  -314,  -499,  -500,  -580,  -317,  -579,
  -579,  -519,  -580,  -580,  -568,  -580,  -579,  -448,  -450,  -454,
   -10,  -124,  -267,  -580,  -198,  -580,  -571,  -579,   -33,  -200,
   -34,  -201,   -62,   -35,  -203,   -36,  -202,   -64,  -196,  -580,
  -580,  -580,  -580,  -415,  -580,  -544,  -544,  -544,  -382,  -580,
  -579,  -388,  -580,  -525,  -532,  -579,   -57,  -579,  -579,  -256,
  -266,   -77,   -92,   -89,  -293,  -579,  -351,  -579,  -428,  -579,
  -429,  -430,  -243,  -580,  -580,  -568,  -544,  -544,  -529,  -543,
  -544,  -544,  -535,  -544,  -530,  -568,  -580,  -364,  -580,  -527,
  -580,  -349,  -580,  -580,  -579,  -579,  -308,  -580,  -415,  -580,
  -108,  -109,  -112,  -568,  -579,  -580,  -502,  -580,  -580,  -580,
  -568,  -504,  -326,  -547,  -463,  -466,  -467,  -468,  -469,  -580,
  -268,   -32,  -199,  -251,  -580,  -238,  -373,  -375,  -580,  -378,
  -380,  -580,  -385,  -580,  -389,  -390,  -392,  -393,  -580,  -580,
  -579,  -580,  -580,   -11,  -579,  -434,  -352,  -580,  -580,  -432,
  -398,  -399,  -396,  -580,  -507,  -509,  -580,  -512,  -580,  -515,
  -580,  -517,  -356,  -358,  -362,  -580,  -367,  -300,  -580,  -301,
  -580,  -580,  -580,  -579,  -311,  -415,  -580,  -580,  -318,  -322,
  -324,  -503,  -519,  -465,  -544,  -544,  -544,  -544,  -533,  -544,
  -387,  -580,  -531,  -580,  -402,  -580,  -418,  -421,  -433,  -579,
   -99,  -100,  -580,  -580,  -107,  -431,  -544,  -544,  -544,  -544,
  -360,  -580,  -365,  -580,  -579,  -304,  -307,  -265,  -579,  -579,
  -315,  -501,  -579,  -579,  -580,  -370,  -372,  -580,  -376,  -580,
  -379,  -381,  -391,  -580,  -285,   -58,  -427,  -579,  -580,  -580,
  -106,  -505,  -580,  -508,  -510,  -513,  -580,  -363,  -579,  -423,
  -424,  -425,  -580,  -580,  -580,  -544,  -544,  -544,  -544,  -284,
  -561,  -426,  -568,  -557,  -558,  -561,  -105,  -544,  -361,  -350,
  -312,  -319,  -327,  -368,  -580,  -371,  -374,  -377,  -415,  -506,
  -544,  -369 ]

clist = [
'6,209,398,267,267,267,286,268,268,268,262,108,556,352,665,121,121,421',
'528,300,300,504,405,411,116,198,313,373,124,124,480,4,212,514,469,317',
'549,552,393,644,126,126,105,756,418,254,260,263,720,695,698,300,641',
'800,9,641,303,316,775,532,9,474,325,326,873,1,329,792,788,516,519,464',
'467,108,689,121,282,360,644,362,364,367,370,362,601,845,847,803,710',
'121,876,109,284,315,17,2,898,630,324,324,17,578,324,104,115,585,636',
'637,589,379,380,381,382,361,759,213,853,371,265,276,277,197,339,213',
'213,213,385,17,291,291,632,635,569,634,571,850,269,269,269,596,319,356',
'522,321,322,324,324,324,324,337,213,714,353,573,314,213,213,9,515,213',
'334,785,644,480,318,330,383,922,320,327,804,328,805,757,267,707,395',
'641,641,929,340,814,395,570,406,817,932,342,377,719,572,873,898,723',
'892,760,844,17,526,672,399,323,213,213,213,213,17,251,415,391,396,650',
'463,957,416,420,765,472,795,767,659,787,675,790,942,847,473,267,788',
'768,959,268,623,267,812,701,267,699,471,779,268,857,424,425,426,427',
'843,358,978,405,411,894,792,359,485,363,366,588,428,399,369,824,788',
'532,725,726,479,479,372,766,300,815,786,576,505,500,671,,,,,,262,,108',
',,300,,,,17,213,213,213,,652,213,213,213,213,213,213,,,884,493,,532',
'753,,,476,,17,487,655,,523,979,,960,,300,282,300,553,554,655,282,728',
',490,488,,108,,16,772,285,489,683,470,16,,495,,213,,,,475,,213,,,213',
',702,,269,,324,324,758,,771,,933,269,16,,,17,,17,486,602,655,291,17',
'895,6,896,,,609,742,808,121,,644,614,747,,,291,,595,479,479,769,124',
'608,267,,17,641,916,,,406,,594,126,,820,,,213,213,782,607,,,524,421',
'555,613,,399,,567,,567,415,9,,818,819,16,625,,,,609,,971,609,16,,,,',
',,,532,,,,626,608,,505,608,,,267,,626,626,,505,,617,17,300,406,965,',
'631,,,633,683,300,,797,,406,,,,399,,,,769,885,,,415,390,780,,,,,,,,',
'813,415,,,,883,,,,638,639,213,,285,,,,267,655,,886,16,,,648,,647,406',
',,651,,,,664,,,,,,,,,399,16,,696,696,,,668,415,,,,909,,,,,,,715,,,,17',
',,,640,,,291,285,213,924,,,285,,,291,,683,,683,121,,602,,213,718,,,',
'731,961,724,,124,738,740,16,,16,505,743,745,669,16,420,126,761,,532',
',773,602,300,626,,,609,,479,614,,17,395,300,17,,,,,16,213,963,964,608',
',,,,988,,,,213,776,781,822,,,213,,,,,761,,920,683,807,,,,602,,,,267',
',,,,776,,776,406,,,,213,213,,,,,213,213,,809,213,737,,,399,774,,,415',
',,,16,,,683,816,683,,,121,821,,,,,,,479,,799,,,,291,324,,831,,,972,',
',,,291,,,,,683,761,,,,,,28,17,17,655,,,28,,823,855,,,,859,,,,,,,,28',
',,,,,,602,28,28,28,,28,,213,,878,,,,213,,,,,,17,17,,887,696,,,17,,28',
',16,888,,28,28,213,,28,,300,19,862,,,,324,19,,,300,,872,,,,,,,324,,',
'692,,,694,17,,17,17,,,,,19,,28,891,17,,,28,28,28,28,28,,,,,,,,16,,755',
'16,,,,,,931,213,,17,17,338,,,,,,,,17,213,,,,,,,,677,679,680,,267,,,',
',,,776,,,406,,,,,,19,791,,,793,902,,17,,19,399,17,415,,,912,602,,415',
',,776,,,,,28,28,28,28,,,28,28,28,28,28,28,,,17,,783,784,,,,,,28,,,,',
',,,,,,,,,,,,17,,,,,,18,16,16,,,,18,,,17,28,,,,17,,28,17,17,28,,,19,829',
',,,,,419,,,213,18,293,293,28,,28,,,,,28,,19,,16,16,,,,,,16,,,,,,,,849',
',851,852,336,,,28,,,,,856,,,,,,,,28,28,,,,,,897,,,899,16,,16,16,,,,',
'880,881,18,19,16,19,,,,,19,18,,917,,,918,,919,,,,,,,,,,,,,16,16,837',
'839,840,19,,28,,,16,,,,,905,,,,908,,,,,,,,,,,,,,864,865,,,867,869,,871',
',,,,,16,,928,,16,,,966,,28,967,,968,,,,,,,18,,,,,,977,,,946,19,,,,16',
',,,,,,,,18,958,,,,,962,,,,,,,,,990,,16,,,,,28,,,,,,,,,28,16,,,,392,16',
',,16,16,423,,,,,28,,,,,,935,936,938,940,,941,18,,18,,,,293,18,,,,,,',
',,951,953,954,955,,,,293,,28,,,28,40,,19,,18,28,40,,,,,,,,,,,28,,482',
',484,,28,,,,,,,568,,568,40,289,289,983,985,986,987,,,,,,,,,989,,,,28',
'28,,,,,28,28,,991,28,,19,,332,19,525,354,,,,,18,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,40,,,,,,,,,40,,,,,,,,28,28,,,,,,,,,419,,,,,,,,,,,,598,,,,,,',
',,,,,28,,,,,,28,,,,,,28,28,,,,,,28,,,,18,,,,,28,,293,,,,19,19,,,,293',
',,,40,,,,,,,,,,,,,,,28,,28,28,,,,,40,41,,,28,,642,41,,525,,645,,646',
'19,19,,,,18,,19,18,,,,,,,28,,28,28,,41,290,290,,,,,28,28,,,642,,,525',
',,,,,,,,,,40,19,40,19,19,,289,40,333,,,355,,19,,,,,28,,,,28,289,,,,',
',,,,,40,,,,,,,19,19,,,,41,,,,,19,28,,,41,,,,,354,293,354,,,,,,,732,',
',293,642,525,,,,28,,,,,,,18,18,19,,,,19,,28,,915,,,28,,,28,28,,40,,',
',,,,,,770,,,28,,,,19,,,,,,,,,,,18,18,,,,778,828,18,,41,,,,,,19,,,,,',
'794,,,,,,,,,19,,41,,,19,,,19,19,423,,,,,,18,,18,18,,,,,,,,,18,,,,,,',
',,,,,,,830,,,,40,,,,,,,289,,18,18,,,,,41,289,41,,18,,290,41,,,,,,,,',
',,,,,,,290,,,,,,,,,,41,,,,,568,,18,,,,18,,,40,914,,40,,,,,,,,,355,,355',
',,,,,,,,,,,18,,,,,,,,525,,,,,,,,,,,,,,,,,,18,,,,41,,,,,,,,,,,18,,,,',
'18,,,18,18,,,,,,,927,,,,,,,,,,,,,,,,,289,,,,,,,,,,,289,,,,,,,,,,,,,40',
'40,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,290,,,,40,40,,,,290,,40',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,40,40,,41,,,41,,,,40,,,,,',
',,,,,,,,,,,,,,,220,,,,,,40,40,266,266,266,,,,,,40,,,,,310,311,312,,',
',,,,,,,,,,266,,,,,,,,,,,,,,354,,40,,,,40,,,,910,,,,,,,,,,,,290,,,,,',
',,,,,290,,40,,,,,,,,,,,41,41,,,,,,,,,,,,,,40,,,,,,,,,,,,,,,40,,,,,40',
',,40,40,,,,,,,41,41,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,397,266,',
',417,422,,,,,41,,41,41,,,,,,,220,,41,437,438,439,440,441,442,443,444',
'445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461',
'462,41,41,,,,266,,,,,41,266,,,266,,,,,,,266,,266,,,,,,,,,,,,,,,,,,,',
',355,,41,,,,41,,,,911,,,,,,,,,511,,,,,,,266,,,,,,,,,41,,,,,,,,,,,,,',
',,,,,,,,,,,,41,,,,,,,,,,,,,,,41,,,,,41,,,41,41,,,,,,,,,,,,,,,266,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,417,624,397,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,266,,,266,,266,,266,,,,,,,,,,,266,,,,,,,,,,661',
'662,663,,,,,,,,,266,,,266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,734,,,266,266,739,741,,,',
',744,746,,,624,748,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,',
',,,266,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,266,,,,,',
',,,,,,,,,,,,,,266,,832,,,,,,,,,,,,,,739,741,746,744,,835,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266',
'832,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266' ]
        racc_goto_table = arr = ::Array.new(3036, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,25,35,35,35,50,66,66,66,69,91,88,57,13,58,58,20,143,64,64,52,38',
'38,17,17,33,57,61,61,71,2,22,10,40,66,85,85,29,179,62,62,8,131,29,39',
'39,39,92,87,87,64,72,86,9,72,51,6,14,134,9,25,19,19,125,1,19,174,173',
'67,67,38,38,91,127,58,46,6,179,6,6,6,6,6,26,138,139,14,55,58,128,7,47',
'31,24,3,175,41,31,31,24,165,31,5,11,165,41,41,165,19,19,19,19,161,136',
'24,15,161,45,45,45,18,21,24,24,24,32,24,24,24,70,42,56,70,56,43,68,68',
'68,63,65,80,81,82,84,31,31,31,31,89,24,90,93,94,95,24,24,9,96,24,24',
'136,179,71,68,5,9,128,97,98,99,100,101,132,35,102,66,72,72,103,104,105',
'66,106,69,107,108,109,7,110,111,125,175,112,113,129,137,24,140,141,6',
'142,24,24,24,24,24,144,58,22,22,52,145,128,22,22,146,149,127,150,52',
'132,143,132,138,139,151,35,173,152,153,66,25,35,55,154,35,88,69,155',
'66,156,31,31,31,31,136,159,128,38,38,131,174,160,33,162,163,164,48,6',
'166,167,173,134,168,169,6,6,170,41,64,171,172,178,50,33,67,,,,,,69,',
'91,,,64,,,,24,24,24,24,,25,24,24,24,24,24,24,,,87,51,,134,26,,,48,,24',
'8,38,,6,86,,14,,64,46,64,19,19,38,46,165,,48,9,,91,,23,26,12,47,126',
'45,23,,47,,24,,,,45,,24,,,24,,25,,68,,31,31,134,,52,,92,68,23,,,24,',
'24,5,33,38,24,24,132,6,132,,,69,40,26,58,,179,69,40,,,24,,17,6,6,71',
'61,6,35,,24,72,132,,,69,,2,62,,143,,,24,24,67,39,,,68,20,5,39,,6,,24',
',24,58,9,,10,10,23,33,,,,69,,13,69,23,,,,,,,,134,,,,6,6,,50,6,,,35,',
'6,6,,50,,48,24,64,69,132,,39,,,39,126,64,,126,,69,,,,6,,,,71,26,,,58',
'12,29,,,,,,,,,25,58,,,,85,,,,48,48,24,,12,,,,35,38,,10,23,,,48,,9,69',
',,48,,,,31,,,,,,,,,6,23,,91,91,,,48,58,,,,85,,,,,,,91,,,,24,,,,68,,',
'24,12,24,85,,,12,,,24,,126,,126,58,,33,,24,31,,,,17,88,31,,61,22,22',
'23,,23,50,22,22,68,23,22,62,6,,134,,50,33,64,6,,,69,,6,69,,24,66,64',
'24,,,,,23,24,10,10,6,,,,,26,,,,24,6,6,57,,,24,,,,,6,,126,126,66,,,,33',
',,,35,,,,,6,,6,69,,,,24,24,,,,,24,24,,19,24,68,,,6,48,,,58,,,,23,,,126',
'91,126,,,58,91,,,,,,,6,,48,,,,24,31,,22,,,25,,,,,24,,,,,126,6,,,,,,44',
'24,24,38,,,44,,48,6,,,,6,,,,,,,,44,,,,,,,33,44,44,44,,44,,24,,19,,,',
'24,,,,,,24,24,,19,91,,,24,,44,,23,91,,44,44,24,,44,,64,28,48,,,,31,28',
',,64,,48,,,,,,,31,,,12,,,12,24,,24,24,,,,,28,,44,48,24,,,44,44,44,44',
'44,,,,,,,,23,,130,23,,,,,,91,24,,24,24,28,,,,,,,,24,24,,,,,,,,133,133',
'133,,35,,,,,,,6,,,69,,,,,,28,130,,,130,24,,24,,28,6,24,58,,,24,33,,58',
',,6,,,,,44,44,44,44,,,44,44,44,44,44,44,,,24,,12,12,,,,,,44,,,,,,,,',
',,,,,,,,24,,,,,,27,23,23,,,,27,,,24,44,,,,24,,44,24,24,44,,,28,12,,',
',,,28,,,24,27,27,27,44,,44,,,,,44,,28,,23,23,,,,,,23,,,,,,,,12,,12,12',
'27,,,44,,,,,12,,,,,,,,44,44,,,,,,130,,,130,23,,23,23,,,,,12,12,27,28',
'23,28,,,,,28,27,,130,,,130,,130,,,,,,,,,,,,,23,23,133,133,133,28,,44',
',,23,,,,,12,,,,12,,,,,,,,,,,,,,133,133,,,133,133,,133,,,,,,23,,12,,23',
',,130,,44,130,,130,,,,,,,27,,,,,,130,,,12,28,,,,23,,,,,,,,,27,12,,,',
',12,,,,,,,,,130,,23,,,,,44,,,,,,,,,44,23,,,,30,23,,,23,23,30,,,,,44',
',,,,,133,133,133,133,,133,27,,27,,,,27,27,,,,,,,,,133,133,133,133,,',
',27,,44,,,44,53,,28,,27,44,53,,,,,,,,,,,44,,30,,30,,44,,,,,,,27,,27',
'53,53,53,133,133,133,133,,,,,,,,,133,,,,44,44,,,,,44,44,,133,44,,28',
',53,28,30,53,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,,,,53,,,,,,',
',44,44,,,,,,,,,28,,,,,,,,,,,,30,,,,,,,,,,,,44,,,,,,44,,,,,,44,44,,,',
',,44,,,,27,,,,,44,,27,,,,28,28,,,,27,,,,53,,,,,,,,,,,,,,,44,,44,44,',
',,,53,54,,,44,,30,54,,30,,30,,30,28,28,,,,27,,28,27,,,,,,,44,,44,44',
',54,54,54,,,,,44,44,,,30,,,30,,,,,,,,,,,53,28,53,28,28,,53,53,54,,,54',
',28,,,,,44,,,,44,53,,,,,,,,,,53,,,,,,,28,28,,,,54,,,,,28,44,,,54,,,',
',53,27,53,,,,,,,30,,,27,30,30,,,,44,,,,,,,27,27,28,,,,28,,44,,28,,,44',
',,44,44,,53,,,,,,,,,30,,,44,,,,28,,,,,,,,,,,27,27,,,,30,27,27,,54,,',
',,,28,,,,,,30,,,,,,,,,28,,54,,,28,,,28,28,30,,,,,,27,,27,27,,,,,,,,',
'27,,,,,,,,,,,,,,30,,,,53,,,,,,,53,,27,27,,,,,54,53,54,,27,,54,54,,,',
',,,,,,,,,,,,54,,,,,,,,,,54,,,,,27,,27,,,,27,,,53,27,,53,,,,,,,,,54,',
'54,,,,,,,,,,,,27,,,,,,,,30,,,,,,,,,,,,,,,,,,27,,,,54,,,,,,,,,,,27,,',
',,27,,,27,27,,,,,,,30,,,,,,,,,,,,,,,,,53,,,,,,,,,,,53,,,,,,,,,,,,,53',
'53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,54,,,,,,,54,,,,53,53,,,,54,,53,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,53,53,,54,,,54,,,,53,,,,,,',
',,,,,,,,,,,,,,34,,,,,,53,53,34,34,34,,,,,,53,,,,,34,34,34,,,,,,,,,,',
',,34,,,,,,,,,,,,,,53,,53,,,,53,,,,53,,,,,,,,,,,,54,,,,,,,,,,,54,,53',
',,,,,,,,,,54,54,,,,,,,,,,,,,,53,,,,,,,,,,,,,,,53,,,,,53,,,53,53,,,,',
',,54,54,,,,,,54,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,34,,,34,34,,,,,54,',
'54,54,,,,,,,34,,54,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,54,54,,,,34,,,,,54,34,,,34,,,,,,,34,,34,',
',,,,,,,,,,,,,,,,,,,54,,54,,,,54,,,,54,,,,,,,,,34,,,,,,,34,,,,,,,,,54',
',,,,,,,,,,,,,,,,,,,,,,,,,54,,,,,,,,,,,,,,,54,,,,,54,,,54,54,,,,,,,,',
',,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34,34,34,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,34,,34,,,,,,,,,,,34,,,,,,,',
',,34,34,34,,,,,,,,,34,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,34,34,34,34,,,,,34,34',
',,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,',
',,,,,,,,,34,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,34',
',34,,,,,,,,,,,,,,34,34,34,34,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3036, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,    65,    29,    95,   nil,    98,    -2,    83,    37,    52,
  -281,    94,   304,  -499,  -607,  -659,   nil,    13,   109,    -1,
  -189,    54,     9,   335,    92,  -200,  -314,  1005,   830,  -162,
  1063,    35,    10,   -21,  2088,   -28,   nil,   nil,  -181,    17,
  -220,  -366,  -337,  -631,   762,    87,    41,    57,    48,   nil,
   -30,    19,  -283,  1313,  1534,  -477,  -208,   -58,     4,   nil,
   nil,    17,    29,  -250,   -17,    81,   -24,  -248,   105,   -19,
  -334,  -239,  -426,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    70,  -178,    82,   nil,    82,  -289,  -639,  -504,  -318,    81,
  -418,     6,  -524,    81,  -200,    97,  -157,   108,   104,  -525,
   105,  -526,  -387,  -705,   111,  -533,  -158,  -533,  -702,   117,
  -382,  -162,  -380,  -628,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  -732,  -199,  -466,  -708,  -433,
   258,  -585,  -455,   386,  -264,   nil,  -514,  -566,  -677,  -676,
  -125,  -327,   139,  -305,   182,   -38,  -414,   nil,   nil,   -41,
  -417,   -33,  -408,  -698,  -322,  -427,  -538,   nil,   nil,   170,
   174,    32,   173,   173,  -109,  -258,   176,  -464,  -316,  -316,
   183,  -445,  -404,  -608,  -611,  -742,   nil,   nil,   -84,  -442 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   279,     7,   331,   280,
   nil,   nil,   513,   nil,   801,   nil,   278,   nil,   nil,   nil,
    14,    15,    21,   219,   309,   nil,   nil,   217,   218,   nil,
   272,    20,   nil,   429,    24,    25,    26,    27,   658,   nil,
   nil,   nil,   nil,   nil,   297,   400,    34,   nil,   nil,    36,
    39,    38,   nil,   214,   215,   566,   nil,   123,   408,   122,
   125,    75,    76,   nil,    48,   nil,   401,   nil,   402,   413,
   610,   477,   270,   255,    49,    50,    51,    52,    53,    54,
    55,   nil,   256,    61,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   550,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   685,   539,   nil,   686,   nil,
   529,   nil,   531,   nil,   789,   627,   nil,   nil,   nil,   537,
   nil,   nil,   nil,   722,   nil,   nil,   nil,   412,   257,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,    77,    78,
   nil,   nil,   nil,   nil,   nil,   583,   nil,   nil,   nil,   nil,
   nil,   nil,   530,   541,   542,   764,   545,   548,   nil,   274 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 140, :_reduce_1,
  2, 138, :_reduce_2,
  2, 139, :_reduce_3,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 141, :_reduce_6,
  2, 141, :_reduce_none,
  1, 144, :_reduce_none,
  0, 148, :_reduce_9,
  5, 144, :_reduce_10,
  4, 147, :_reduce_11,
  2, 149, :_reduce_12,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 153, :_reduce_15,
  2, 153, :_reduce_16,
  0, 169, :_reduce_17,
  4, 146, :_reduce_18,
  3, 146, :_reduce_19,
  3, 146, :_reduce_20,
  3, 146, :_reduce_21,
  2, 146, :_reduce_22,
  3, 146, :_reduce_23,
  3, 146, :_reduce_24,
  3, 146, :_reduce_25,
  3, 146, :_reduce_26,
  3, 146, :_reduce_27,
  4, 146, :_reduce_28,
  1, 146, :_reduce_none,
  3, 146, :_reduce_30,
  3, 146, :_reduce_31,
  6, 146, :_reduce_32,
  5, 146, :_reduce_33,
  5, 146, :_reduce_34,
  5, 146, :_reduce_35,
  5, 146, :_reduce_36,
  3, 146, :_reduce_37,
  3, 146, :_reduce_38,
  3, 146, :_reduce_39,
  3, 146, :_reduce_40,
  1, 146, :_reduce_none,
  3, 157, :_reduce_42,
  3, 157, :_reduce_43,
  1, 168, :_reduce_none,
  3, 168, :_reduce_45,
  3, 168, :_reduce_46,
  3, 168, :_reduce_47,
  2, 168, :_reduce_48,
  1, 168, :_reduce_none,
  1, 156, :_reduce_50,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 173, :_reduce_none,
  4, 173, :_reduce_54,
  4, 173, :_reduce_55,
  0, 179, :_reduce_56,
  0, 180, :_reduce_57,
  6, 177, :_reduce_58,
  2, 172, :_reduce_59,
  3, 172, :_reduce_60,
  4, 172, :_reduce_61,
  5, 172, :_reduce_62,
  4, 172, :_reduce_63,
  5, 172, :_reduce_64,
  2, 172, :_reduce_65,
  2, 172, :_reduce_66,
  2, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 158, :_reduce_none,
  3, 158, :_reduce_71,
  1, 184, :_reduce_none,
  3, 184, :_reduce_73,
  1, 183, :_reduce_74,
  2, 183, :_reduce_75,
  3, 183, :_reduce_76,
  5, 183, :_reduce_77,
  2, 183, :_reduce_78,
  4, 183, :_reduce_79,
  2, 183, :_reduce_80,
  4, 183, :_reduce_81,
  1, 183, :_reduce_82,
  3, 183, :_reduce_83,
  1, 187, :_reduce_none,
  3, 187, :_reduce_85,
  2, 186, :_reduce_86,
  3, 186, :_reduce_87,
  1, 189, :_reduce_88,
  3, 189, :_reduce_89,
  1, 188, :_reduce_90,
  1, 188, :_reduce_91,
  4, 188, :_reduce_92,
  3, 188, :_reduce_93,
  3, 188, :_reduce_94,
  3, 188, :_reduce_95,
  3, 188, :_reduce_96,
  2, 188, :_reduce_97,
  1, 188, :_reduce_98,
  1, 165, :_reduce_99,
  1, 165, :_reduce_100,
  4, 165, :_reduce_101,
  3, 165, :_reduce_102,
  3, 165, :_reduce_103,
  3, 165, :_reduce_104,
  3, 165, :_reduce_105,
  2, 165, :_reduce_106,
  1, 165, :_reduce_107,
  1, 192, :_reduce_108,
  1, 192, :_reduce_none,
  2, 193, :_reduce_110,
  1, 193, :_reduce_111,
  3, 193, :_reduce_112,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_none,
  1, 194, :_reduce_116,
  1, 194, :_reduce_117,
  1, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 154, :_reduce_120,
  1, 154, :_reduce_none,
  1, 155, :_reduce_122,
  0, 200, :_reduce_123,
  4, 155, :_reduce_124,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  3, 171, :_reduce_195,
  5, 171, :_reduce_196,
  3, 171, :_reduce_197,
  5, 171, :_reduce_198,
  6, 171, :_reduce_199,
  5, 171, :_reduce_200,
  5, 171, :_reduce_201,
  5, 171, :_reduce_202,
  5, 171, :_reduce_203,
  4, 171, :_reduce_204,
  3, 171, :_reduce_205,
  3, 171, :_reduce_206,
  3, 171, :_reduce_207,
  3, 171, :_reduce_208,
  3, 171, :_reduce_209,
  3, 171, :_reduce_210,
  3, 171, :_reduce_211,
  3, 171, :_reduce_212,
  3, 171, :_reduce_213,
  4, 171, :_reduce_214,
  4, 171, :_reduce_215,
  2, 171, :_reduce_216,
  2, 171, :_reduce_217,
  3, 171, :_reduce_218,
  3, 171, :_reduce_219,
  3, 171, :_reduce_220,
  3, 171, :_reduce_221,
  3, 171, :_reduce_222,
  3, 171, :_reduce_223,
  3, 171, :_reduce_224,
  3, 171, :_reduce_225,
  3, 171, :_reduce_226,
  3, 171, :_reduce_227,
  3, 171, :_reduce_228,
  3, 171, :_reduce_229,
  3, 171, :_reduce_230,
  2, 171, :_reduce_231,
  2, 171, :_reduce_232,
  3, 171, :_reduce_233,
  3, 171, :_reduce_234,
  3, 171, :_reduce_235,
  3, 171, :_reduce_236,
  3, 171, :_reduce_237,
  6, 171, :_reduce_238,
  1, 171, :_reduce_none,
  1, 167, :_reduce_240,
  1, 202, :_reduce_none,
  2, 202, :_reduce_242,
  4, 202, :_reduce_243,
  2, 202, :_reduce_244,
  3, 206, :_reduce_245,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_248,
  1, 162, :_reduce_249,
  2, 162, :_reduce_250,
  4, 162, :_reduce_251,
  2, 162, :_reduce_252,
  1, 182, :_reduce_253,
  2, 182, :_reduce_254,
  2, 182, :_reduce_255,
  4, 182, :_reduce_256,
  1, 182, :_reduce_none,
  0, 210, :_reduce_258,
  2, 176, :_reduce_259,
  2, 209, :_reduce_260,
  2, 208, :_reduce_261,
  1, 208, :_reduce_none,
  1, 203, :_reduce_263,
  2, 203, :_reduce_264,
  3, 203, :_reduce_265,
  4, 203, :_reduce_266,
  3, 166, :_reduce_267,
  4, 166, :_reduce_268,
  2, 166, :_reduce_269,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_278,
  0, 232, :_reduce_279,
  4, 201, :_reduce_280,
  0, 233, :_reduce_281,
  4, 201, :_reduce_282,
  3, 201, :_reduce_283,
  3, 201, :_reduce_284,
  2, 201, :_reduce_285,
  3, 201, :_reduce_286,
  0, 234, :_reduce_287,
  4, 201, :_reduce_288,
  1, 201, :_reduce_289,
  4, 201, :_reduce_290,
  3, 201, :_reduce_291,
  1, 201, :_reduce_292,
  5, 201, :_reduce_293,
  4, 201, :_reduce_294,
  3, 201, :_reduce_295,
  2, 201, :_reduce_296,
  1, 201, :_reduce_none,
  2, 201, :_reduce_298,
  2, 201, :_reduce_299,
  6, 201, :_reduce_300,
  6, 201, :_reduce_301,
  0, 235, :_reduce_302,
  0, 236, :_reduce_303,
  7, 201, :_reduce_304,
  0, 237, :_reduce_305,
  0, 238, :_reduce_306,
  7, 201, :_reduce_307,
  5, 201, :_reduce_308,
  4, 201, :_reduce_309,
  0, 239, :_reduce_310,
  0, 240, :_reduce_311,
  9, 201, :_reduce_312,
  0, 241, :_reduce_313,
  0, 242, :_reduce_314,
  7, 201, :_reduce_315,
  0, 243, :_reduce_316,
  0, 244, :_reduce_317,
  0, 245, :_reduce_318,
  9, 201, :_reduce_319,
  0, 246, :_reduce_320,
  0, 247, :_reduce_321,
  6, 201, :_reduce_322,
  0, 248, :_reduce_323,
  6, 201, :_reduce_324,
  0, 249, :_reduce_325,
  0, 250, :_reduce_326,
  9, 201, :_reduce_327,
  1, 201, :_reduce_328,
  1, 201, :_reduce_329,
  1, 201, :_reduce_330,
  1, 201, :_reduce_331,
  1, 161, :_reduce_332,
  1, 251, :_reduce_none,
  1, 252, :_reduce_none,
  1, 253, :_reduce_none,
  1, 254, :_reduce_none,
  1, 255, :_reduce_none,
  1, 256, :_reduce_none,
  1, 257, :_reduce_none,
  1, 258, :_reduce_none,
  1, 259, :_reduce_none,
  1, 260, :_reduce_none,
  1, 261, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  2, 222, :_reduce_none,
  1, 224, :_reduce_none,
  1, 224, :_reduce_none,
  1, 223, :_reduce_none,
  5, 223, :_reduce_350,
  1, 151, :_reduce_none,
  2, 151, :_reduce_352,
  1, 226, :_reduce_none,
  1, 226, :_reduce_354,
  1, 262, :_reduce_none,
  3, 262, :_reduce_356,
  1, 265, :_reduce_357,
  3, 265, :_reduce_358,
  1, 264, :_reduce_359,
  4, 264, :_reduce_360,
  6, 264, :_reduce_361,
  3, 264, :_reduce_362,
  5, 264, :_reduce_363,
  2, 264, :_reduce_364,
  4, 264, :_reduce_365,
  1, 264, :_reduce_366,
  3, 264, :_reduce_367,
  6, 266, :_reduce_368,
  8, 266, :_reduce_369,
  4, 266, :_reduce_370,
  6, 266, :_reduce_371,
  4, 266, :_reduce_372,
  2, 266, :_reduce_373,
  6, 266, :_reduce_374,
  2, 266, :_reduce_375,
  4, 266, :_reduce_376,
  6, 266, :_reduce_377,
  2, 266, :_reduce_378,
  4, 266, :_reduce_379,
  2, 266, :_reduce_380,
  4, 266, :_reduce_381,
  1, 266, :_reduce_382,
  1, 178, :_reduce_383,
  1, 178, :_reduce_none,
  3, 272, :_reduce_385,
  1, 272, :_reduce_386,
  4, 272, :_reduce_387,
  1, 273, :_reduce_none,
  2, 273, :_reduce_389,
  1, 274, :_reduce_390,
  3, 274, :_reduce_391,
  1, 275, :_reduce_392,
  1, 275, :_reduce_none,
  0, 279, :_reduce_394,
  3, 221, :_reduce_395,
  4, 277, :_reduce_396,
  1, 277, :_reduce_397,
  3, 278, :_reduce_398,
  3, 278, :_reduce_399,
  0, 282, :_reduce_400,
  0, 283, :_reduce_401,
  6, 281, :_reduce_402,
  2, 174, :_reduce_403,
  4, 174, :_reduce_404,
  4, 174, :_reduce_405,
  0, 285, :_reduce_406,
  3, 220, :_reduce_407,
  4, 220, :_reduce_408,
  4, 220, :_reduce_409,
  3, 220, :_reduce_410,
  3, 220, :_reduce_411,
  3, 220, :_reduce_412,
  2, 220, :_reduce_413,
  1, 220, :_reduce_414,
  4, 220, :_reduce_415,
  0, 286, :_reduce_416,
  0, 287, :_reduce_417,
  6, 219, :_reduce_418,
  0, 288, :_reduce_419,
  0, 289, :_reduce_420,
  6, 219, :_reduce_421,
  0, 291, :_reduce_422,
  6, 225, :_reduce_423,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  6, 150, :_reduce_426,
  0, 150, :_reduce_427,
  1, 292, :_reduce_428,
  1, 292, :_reduce_none,
  1, 292, :_reduce_none,
  2, 293, :_reduce_431,
  1, 293, :_reduce_none,
  2, 152, :_reduce_433,
  1, 152, :_reduce_none,
  1, 211, :_reduce_435,
  1, 211, :_reduce_436,
  1, 211, :_reduce_none,
  1, 212, :_reduce_438,
  1, 295, :_reduce_none,
  2, 295, :_reduce_440,
  3, 296, :_reduce_441,
  1, 296, :_reduce_442,
  3, 213, :_reduce_443,
  3, 214, :_reduce_444,
  3, 215, :_reduce_445,
  3, 215, :_reduce_446,
  1, 300, :_reduce_447,
  3, 300, :_reduce_448,
  1, 301, :_reduce_none,
  2, 301, :_reduce_450,
  3, 216, :_reduce_451,
  3, 216, :_reduce_452,
  1, 303, :_reduce_453,
  3, 303, :_reduce_454,
  1, 297, :_reduce_455,
  2, 297, :_reduce_456,
  1, 298, :_reduce_457,
  2, 298, :_reduce_458,
  1, 299, :_reduce_459,
  2, 299, :_reduce_460,
  1, 302, :_reduce_461,
  0, 305, :_reduce_462,
  3, 302, :_reduce_463,
  0, 306, :_reduce_464,
  4, 302, :_reduce_465,
  1, 304, :_reduce_466,
  1, 304, :_reduce_467,
  1, 304, :_reduce_468,
  1, 304, :_reduce_none,
  2, 198, :_reduce_470,
  1, 198, :_reduce_471,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  3, 199, :_reduce_476,
  1, 294, :_reduce_none,
  1, 294, :_reduce_none,
  2, 294, :_reduce_479,
  2, 294, :_reduce_480,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 191, :_reduce_486,
  1, 191, :_reduce_487,
  1, 191, :_reduce_488,
  1, 191, :_reduce_489,
  1, 191, :_reduce_490,
  1, 191, :_reduce_491,
  1, 191, :_reduce_492,
  1, 217, :_reduce_493,
  1, 217, :_reduce_494,
  1, 160, :_reduce_495,
  1, 160, :_reduce_496,
  1, 164, :_reduce_497,
  1, 164, :_reduce_498,
  1, 227, :_reduce_499,
  0, 308, :_reduce_500,
  4, 227, :_reduce_501,
  2, 227, :_reduce_502,
  3, 229, :_reduce_503,
  2, 229, :_reduce_504,
  6, 280, :_reduce_505,
  8, 280, :_reduce_506,
  4, 280, :_reduce_507,
  6, 280, :_reduce_508,
  4, 280, :_reduce_509,
  6, 280, :_reduce_510,
  2, 280, :_reduce_511,
  4, 280, :_reduce_512,
  6, 280, :_reduce_513,
  2, 280, :_reduce_514,
  4, 280, :_reduce_515,
  2, 280, :_reduce_516,
  4, 280, :_reduce_517,
  1, 280, :_reduce_518,
  0, 280, :_reduce_519,
  1, 276, :_reduce_520,
  1, 276, :_reduce_521,
  1, 276, :_reduce_522,
  1, 276, :_reduce_523,
  1, 263, :_reduce_none,
  1, 263, :_reduce_525,
  1, 310, :_reduce_none,
  3, 310, :_reduce_527,
  1, 267, :_reduce_528,
  3, 267, :_reduce_529,
  3, 311, :_reduce_530,
  3, 312, :_reduce_531,
  1, 268, :_reduce_532,
  3, 268, :_reduce_533,
  1, 309, :_reduce_534,
  3, 309, :_reduce_535,
  1, 313, :_reduce_none,
  1, 313, :_reduce_none,
  2, 269, :_reduce_538,
  1, 269, :_reduce_539,
  1, 314, :_reduce_none,
  1, 314, :_reduce_none,
  2, 271, :_reduce_542,
  2, 270, :_reduce_543,
  0, 270, :_reduce_544,
  1, 230, :_reduce_none,
  0, 315, :_reduce_546,
  4, 230, :_reduce_547,
  1, 218, :_reduce_548,
  2, 218, :_reduce_549,
  1, 205, :_reduce_none,
  3, 205, :_reduce_551,
  3, 316, :_reduce_552,
  3, 316, :_reduce_553,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 231, :_reduce_none,
  1, 231, :_reduce_none,
  0, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 185, :_reduce_none,
  2, 163, :_reduce_none,
  0, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 228, :_reduce_575,
  1, 228, :_reduce_none,
  1, 145, :_reduce_none,
  2, 145, :_reduce_578,
  0, 143, :_reduce_579 ]

racc_reduce_n = 580

racc_shift_n = 992

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAST_TOKEN => 132,
  :tLAMBDA => 133,
  :tLAMBEG => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tLAMBDA",
  "tLAMBEG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@27",
  "f_args",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

# reduce 8 omitted

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_57(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary = list_append val[0], s(:splat, val[2])
                      ary.concat val[4].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      ary = s(:array, s(:splat))
                      ary.concat val[2].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_230(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~"
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 239 omitted

def _reduce_240(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_245(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 246 omitted

# reduce 247 omitted

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0] << s(:hash, *val[2].sexp_body) # TODO: self.args
                    
    result
end

def _reduce_252(val, _values, result)
                      result = s(:hash, *val[0].values)
                    
    result
end

def _reduce_253(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_254(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

# reduce 257 omitted

def _reduce_258(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_259(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 262 omitted

def _reduce_263(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_264(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_266(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_267(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

def _reduce_278(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_279(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_280(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_281(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_282(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_287(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_291(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_292(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_293(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_295(val, _values, result)
                      raise "no3\non#{val.inspect}"
                    
    result
end

def _reduce_296(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call nil, oper.to_sym
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 297 omitted

def _reduce_298(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_299(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_302(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_303(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_309(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_313(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_314(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_319(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_321(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_324(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_326(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_329(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_330(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

def _reduce_350(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 351 omitted

def _reduce_352(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 353 omitted

def _reduce_354(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_357(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_359(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_360(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_361(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_362(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_364(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_365(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_366(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_367(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_368(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_369(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_370(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_371(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
 result = 0 
    result
end

# reduce 384 omitted

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = s(:args)
                      self.lexer.command_start = true
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

# reduce 388 omitted

def _reduce_389(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      # TODO: dyna_push ? hrm
                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_395(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_399(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_400(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_401(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_402(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_403(val, _values, result)
                      # TODO:
                      # if (nd_type($1) == NODE_YIELD) {
                      #     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_404(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_405(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_406(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_407(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_409(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_411(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_412(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_414(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_416(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_418(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_419(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_420(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_421(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_422(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 424 omitted

# reduce 425 omitted

def _reduce_426(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_428(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 429 omitted

# reduce 430 omitted

def _reduce_431(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 432 omitted

def _reduce_433(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 434 omitted

def _reduce_435(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_436(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

# reduce 439 omitted

def _reduce_440(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_442(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_443(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_444(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_445(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_446(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_448(val, _values, result)
                      result = val[0] << new_word_list_entry(val)
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[0] << new_qword_list_entry(val)
                    
    result
end

def _reduce_455(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_456(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_458(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_460(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_462(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_463(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_465(val, _values, result)
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_466(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_467(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_468(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 472 omitted

# reduce 473 omitted

# reduce 474 omitted

# reduce 475 omitted

def _reduce_476(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 477 omitted

# reduce 478 omitted

def _reduce_479(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_480(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

def _reduce_486(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_487(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_488(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_489(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_491(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_492(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_493(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_494(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_495(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_496(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_497(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_498(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_499(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_500(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_502(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_503(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_504(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_506(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_507(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_508(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_509(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_510(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_511(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_512(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_513(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_514(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_515(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_516(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_517(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_518(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_519(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_520(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_521(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_522(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 524 omitted

def _reduce_525(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 526 omitted

def _reduce_527(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_528(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_529(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_530(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_531(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_533(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_534(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_535(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 536 omitted

# reduce 537 omitted

def _reduce_538(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_539(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 540 omitted

# reduce 541 omitted

def _reduce_542(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_543(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_544(val, _values, result)
                      result = nil
                    
    result
end

# reduce 545 omitted

def _reduce_546(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_547(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_548(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_549(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 550 omitted

def _reduce_551(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_552(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_553(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      result = s(:array, s(:lit, label.to_sym), val.last)
                    
    result
end

# reduce 554 omitted

# reduce 555 omitted

# reduce 556 omitted

# reduce 557 omitted

# reduce 558 omitted

# reduce 559 omitted

# reduce 560 omitted

# reduce 561 omitted

# reduce 562 omitted

# reduce 563 omitted

# reduce 564 omitted

# reduce 565 omitted

# reduce 566 omitted

# reduce 567 omitted

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

def _reduce_575(val, _values, result)
 yyerrok 
    result
end

# reduce 576 omitted

# reduce 577 omitted

def _reduce_578(val, _values, result)
 yyerrok 
    result
end

def _reduce_579(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby19Parser
